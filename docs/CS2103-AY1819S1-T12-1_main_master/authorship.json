[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d Expense Tracker"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "image:https://travis-ci.org/CS2103-AY1819S1-T12-1/main.svg?branch\u003ddevelop[\"Build Status\", link\u003d\"https://travis-ci.org/CS2103-AY1819S1-T12-1/main\"]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "https://ci.appveyor.com/project/JasonChong96/main[image:https://ci.appveyor.com/api/projects/status/jae5ywvu7fdjst00?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-T12-1/main?branch\u003ddevelop[image:https://coveralls.io/repos/github/CS2103-AY1819S1-T12-1/main/badge.svg?branch\u003ddevelop[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "image:https://api.codacy.com/project/badge/Grade/56707ee7344441ebaa5839b92e17a881[\"Codacy code quality\", link\u003d\"https://www.codacy.com/app/JasonChong96/main?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dCS2103-AY1819S1-T12-1/main\u0026utm_campaign\u003dBadge_Grade\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "image::docs/images/UI.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "image::docs/images/UI2.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* Have you ever lost track of your expenditure and burst your budget for the month? Fret not! The Expense Tracker is here to help you."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* The Expense Tracker application features a GUI but interactions happen using a CLI (Command Line Interface) for quick and easy use"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* The Expense Tracker application is a Java application intended for students who wish to have a better way to track their expenses."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* It includes support for _Build Automation_ using Gradle and for _Continuous Integration_ using Travis CI."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* This application was inspired by the AddressBook-Level4 project created by SE-EDU initiative at https://github.com/se-edu/"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 4,
      "jonathantjm": 6,
      "JasonChong96": 2,
      "-": 20
    }
  },
  {
    "path": "_reposense/config.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "  \"authors\":"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "  ["
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"githubId\": \"JasonChong96\","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"displayName\": \"Jason Chong Yi Sheng\","
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"authorNames\": [\"JasonChong96\", \"Jason Chong\"]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"githubId\": \"Snookerballs\","
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"displayName\": \"Jamie Chow Wen Juan\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"authorNames\": [\"Snookerballs\", \"Jaime Chow\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t{"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"githubId\": \"jonathantjm\","
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"displayName\": \"Jonathan Tan Jit Ming\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"authorNames\": [\"jonathantjm\", \"Jonathan Tan\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"githubId\": \"jcjxwy\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"displayName\": \"Jiang Chen\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"authorNames\": [\"DESKTOP-GJ61B8F\\\\xiangyu\", \"jcjxwy\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    },"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t{"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"githubId\": \"winsonhys\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"displayName\": \"Winson Heng Yong Seng\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \"authorNames\": [\"winsonhys\", \"winson\", \"Winson Heng Yong Seng\"]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "  ]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 30
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "// Gradle Configuration File"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "// For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "// user guide available at http://gradle.org/docs/4.8.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.gradle.api.tasks.testing.logging.TestLogEvent"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.kt3k.coveralls\u0027 version \u00272.4.0\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027com.github.johnrengelman.shadow\u0027 version \u00272.0.3\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "if (JavaVersion.current() \u003d\u003d JavaVersion.VERSION_1_10"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0026\u0026 System.getProperty(\u0027os.name\u0027).startsWith(\u0027Windows\u0027)) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    logger.warn(\u0027\u0027\u0027\\"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        *********************************** WARNING **********************************"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        You seem to be running Gradle with JDK 10 on Windows."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        JDK 10 on Windows will fail to run tests in headless mode due to a JavaFX bug."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        You are highly recommended to use JDK 9!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027\u0027\u0027.stripIndent())"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_9"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination file(\"${buildDir}/jacocoHtml\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    useJUnitPlatform()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        events \"failed\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        exceptionFormat \"full\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.12-alpha\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    String jUnitVersion \u003d \u00275.1.0\u0027"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.2.8\u0027"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-core\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    implementation group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027org.testfx\u0027, module: \u0027testfx-internal-java8\u0027"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027testfx-internal-java9\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u0027jdk-9+181\u0027"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group:\u0027org.junit.vintage\u0027, name:\u0027junit-vintage-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: jUnitVersion"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \u0027addressbook.jar\u0027"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00274.8.1\u0027"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(sourceSets.main.output)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d sourceSets.main.allSource.srcDirs.absolutePath"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    testLogging {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        events TestLogEvent.FAILED, TestLogEvent.SKIPPED"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // stalling the build."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            events \u003c\u003c TestLogEvent.STARTED"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "task headless {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    doLast {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        println \u0027Setting headless mode properties.\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        test {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            systemProperties \u003d ["
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.robot\u0027: \u0027glass\u0027,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027testfx.headless\u0027: \u0027true\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.order\u0027: \u0027sw\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0027prism.text\u0027: \u0027t2k\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            ]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    options \u003d ["
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        template_dirs: [file(\"${sourceDir}/templates\")],"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes \u003d ["
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        linkcss: true,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        experimental: true,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        sectlinks: true,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        idseparator: \u0027-\u0027,"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        \u0027site-root\u0027: \"${sourceDir}\",  // must be the same as sourceDir, do not modify"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        \u0027site-name\u0027: \u0027Expense Tracker\u0027,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        \u0027site-githuburl\u0027: \u0027https://github.com/CS2103-AY1819S1-T12-1/main\u0027,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        \u0027site-seedu\u0027: false,  // delete this line if your project is not a fork (not a SE-EDU project)"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    ]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    options[\u0027template_dirs\u0027].each {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        inputs.files fileTree(it)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "// Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "// Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "// This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027HelpWindow.html\u0027"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "checkstyleMain.exclude \u0027**/pullFromOrg\u0027"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 7,
      "winsonhys": 1,
      "-": 244
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Expense Tracker was developed by the https://github.com/CS2103-AY1819S1-T12-1[T12-1] team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Winson Heng Yong Seng"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "image::winsonhys.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "{empty}[https://github.com/winsonhys[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Team Lead +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Responsibilities: Model and Logic"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Jonathan Tan Jit Ming"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "image::jonathantjm.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "{empty}[https://github.com/jonathantjm[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Responsibilities: Documentation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Jamie Chow Wen Juan"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "image::snookerballs.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "{empty}[https://github.com/Snookerballs[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Jiang Chen"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "image::jcjxwy.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "{empty}[https://github.com/jcjxwy[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Responsibilities: Integration"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Jason Chong Yi Sheng"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "image::jasonchong96.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "{empty}[https://github.com/JasonChong96[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Responsibilities: Deliverables and Deadlines"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 5,
      "winsonhys": 16,
      "-": 36
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d Expense Tracker- Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team SE-EDU`      Since: `Jun 2016`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Follow the guide in this section below to start development on ExpenseTracker"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ". *https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase9-3934878.html[JDK `9`]* or later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "*To set up the project:*"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ". Fork this repo and clone the fork to your computer"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ". Open IntelliJ (if you are not in the https://i.stack.imgur.com/cQnLl.png[welcome screen], click `File` \u003e `Close"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Project` to close"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " the"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "existing project dialog first)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ". Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ". Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "*To verify that you have successfully set up the project:*"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e and ensure that they all pass."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Configurations to apply before writing code"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "*The following lists configurations that should be applied before writing code:*"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "standards]. IntelliJ\u0027s default style is mostly compliant but it uses a different import order from ours. To rectify:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding, referencing the"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "`se-edu/addressbook-level4`"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "repo."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "If you plan to develop this fork as a separate product (instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team\u0027s fork (see \u003c\u003cUsingCoveralls#,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Before coding"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "*Before you start coding,*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Expense Tracker data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `ExpenseListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a expense) and/or raise events."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "image::UpdatedModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "The `ModelManager` which implements the interface `Model` (Figure 8):"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "* stores the a list of expenses."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cExpense\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "To better adhere to the paradigms of OOP, we can store a `Tag` list in `Expense Tracker`, which `Expense` can"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "reference. This"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "would allow `Expense"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Tracker` to only require one `Tag` object per unique `Tag`, instead of each `Expense` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "image:BetterOopModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "The *_Structure of the Storage Component_* given above shows the relationships between classes in the storage component."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* can save the Expense Tracker data in xml format and read it back."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* can read multiple xml format files with separate Expense Tracker data from a folder."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* XmlAdaptedPassword is stored as a SHA-256 hash of the original password."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current expense tracker state in its history."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous expense tracker state from its history."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone expense tracker state from its history."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Step 1. The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the initial expense tracker state, and the `currentStatePointer` pointing to that single expense tracker state."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Step 2. The user executes `delete 5` command to delete the 5th expense in the expense tracker. The `delete` command calls `Model#commitAddressBook()`, causing the modified state of the expense tracker after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted expense tracker state."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Step 3. The user executes `add n/David ...` to add a new expense. The `add` command also calls `Model#commitAddressBook()`, causing another modified expense tracker state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the expense tracker state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Step 4. The user now decides that adding the expense was a mistake, and decides to undo that action by executing the `undo` command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous expense tracker state, and restores the expense tracker to that state."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial expense tracker state, then there are no previous expense tracker states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the expense tracker to that state."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest expense tracker state, then there are no undone expense tracker states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Step 5. The user then decides to execute the command `list`. Commands that do not modify the expense tracker, such as `list`, will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Step 6. The user executes `clear`, which calls `Model#commitAddressBook()`. Since the `currentStatePointer` is not pointing at the end of the `addressBookStateList`, all expense tracker states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire expense tracker."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the expense being deleted)."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of expense tracker states."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "// tag::login[]"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d User Accounts System"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "The user accounts system allows multiple users to use the Expense Tracker on the same computer without interfering with each other\u0027s data. It also includes an optional password system that allows users to protect their expense tracker information from being viewed or altered by others."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "On initialization, the `MainApp` class loads all xml files within the data folder according to the path in `UserPrefs`. The data is loaded by `MainApp#initModelManager(Storage, UserPref)`."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "An xml data file not be loaded if the username value is not the same as the filename (ignoring file extension)."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "This system is facilitated by methods in the Model interface which now supports the following operations:"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `Model#loadUserData(Username, Password)` -- Logs in to the user with the input Username and Password and loads the associated data. Returns true if the password matches the user\u0027s password, else the user is not logged into and false is returned"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `Model#unloadUserData()` -- Unselects the user in the Model"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `Model#isUserExists(Username)` -- Checks if a user with the input Username exists in the model"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `Model#addUser(Username)` -- Adds a new user with the given Username to the model"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `Model#hasSelectedUser()` -- Checks if a user is currently logged in in the model"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "The classes `Username` and `Password` have also been implemented and have the following noteworthy characteristics:"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* Two `Username` classes are equivalent if and only if the internal username String are equivalent (case-insensitive)."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `Username` cannot be constructed with a String containing any of the following characters: _\" \u003e \u003c : \\ / | ? *_"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* When a `Password` class is constructed with plain text, the password is hashed before being stored as an internal String in the `Password` object"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* `Password` is only valid if the plain text form is at least 6 characters long"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Given below is an example usage scenario and how the User Account System behaves at each step when the application is launched."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The user launches the application and the directory path in the UserPref points at the _data_ folder"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The method `Storage#readAllExpenses(Path)` is called by the MainApp and the method loads all the xml data files in the _data_ folder and returns the loaded data as a `Map\u003cUsername, ReadOnlyAddressBook\u003e` with the `Username` of the user data as the key and the user data as a `ReadOnlyAddressBook` as the value to the MainApp class"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". A `Model` instance will then be initialized using the previously mentioned `Map` of user data."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Given below is an example usage scenario and how the Sign Up and Login system behaves at each step after the application is launched."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The user executes the command `signup john` to create a user with the `Username` john"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The `signup` command calls `Model#addUser(Username)` which adds the user `john` to the `Model`. The operation is successful as `john` does not break any of the `Username` constraints and does not already exist in the Model."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The user then executes the command `login u/john` to log in to his user account"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The `login` command calls `loadUserData(Username, Password)` with a null password as a password was not provided. The method is executed successfully as the user `john` has no password set."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The selected data in the `Model` is switched to `john`\u0027s and an `UserLoggedInEvent` is raised for the `UI` to show `john`\u0027s Expense Tracker data"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Given below is an example usage scenario and how the Password system behaves at each step after the he/she is logged in."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The user is already logged in to the account `john` with an existing password `password1` and executes the command `setpassword o/password1 n/password2` to change his password to `password2`"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The `setpassword` command calls the `Model#setPassword(Password)` method since the given old password matches his existing password and `password2` does not violate any password constraints"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". The `Model#setPassword(Password)` changes `john`\u0027s account password to `password2`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Storage of Separate User Data"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* **Alternative 1 (current choice):**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Pros: More work needed to implement as the data loading has to be changed to read from multiple xml files"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Cons: Users can transfer their own data between computers easily by just copying their own account\u0027s xml file"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* **Alternative 2:** Save all the separated user data in a single xml data file"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Pros: Relatively easier to implement. Addressbook-level4 already loads data from a single xml data file so less work has to be done to change the storage structure"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Cons: Users will be unable to easily transfer their individual data to another computer"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Loading of User Data"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* **Alternative 1 (current choice):** Loading of User data is only done on initialization of the Expense Tracker"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Pros: Ability to switch user accounts quickly after the Expense Tracker is loaded as all users are already loaded into memory"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Cons: External changes to the data files after initialization will not be reflected may be overwritten"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* **Alternative 2:** User data is loaded only when the user attempts to log in"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Pros: Unnecessary data is not kept in memory so memory space is not wasted"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Cons: Increase degree of coupling between the Logic, Model and Storage components as the login command will require the Storage to load and return the user\u0027s data."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "// end::login[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d Statistics"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Given below is an example usage scenario and of how the statistics mechanism behaves at each step."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ". User enters command `stats n/7 m/d`. The command is received by `AddressBookParser`, which calls `StatsCommandParser#parse()`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "to create a `StatsCommand` object with the two extracted parameters. The `StatsCommand` object is returned to `LogicManager`."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ". `LogicManager` then calls `StatsCommand#execute()`, which updates the `Predicate` and `StatsMode` in `ModelManager`, which"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "are used as filters for the expense list. The `Predicate` is used to filter out expenses which have dates within the last 7 days."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`StatsMode` is set to DAY, representing the day mode."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`StatsCommand#execute()` also posts a `ShowStatsRequestEvent` event to the `EventsCenter`."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". The `ShowStatsRequestEvent` event is handled by `MainWindow#handleShowStatsEvent()`, which updates the \u0027StatisticsPanel\u0027 object after getting the"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "expense data and mode by calling `Logic#getExpenseStats()` and `Logic#getStatsMode()`."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ". `Logic#getExpenseStats()` gets the filtered expense list by calling `ModelManager#getExpenseStats()`, which returns"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "an unmodifiable `ObservableList`, only containing only expenses in the last 7 days, as per the `Predicate`, and sorted by date."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`Logic#getExpenseStats()` then puts the data into a `LinkedHashMap\u003cString, Double\u003e`, where the key represents the days and the value represents"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "the total cost for that day"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ". `Logic#getStatsMode()` gets the current StatsMode by calling `Model#getStatsMode()`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". `StatisticsPanel` UI element updates the bar chart in `chartArea` to show the expenses over the last 7 days."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d Find"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Given below is an example usage scenario and of how the find mechanism behaves at each step."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". User enters command `find n/Have Lunch f/Food d/01-01-2018:03-01-2018`. The command is received by `AddressBookParser`,"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "which then creates a `FindCommandParser` Object and call `FindCommandParser#parse()` method."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". `FindCommandParser#parse()` method calls `ArgumentTokenizer#tokenize()` to tokenize the input String into keywords and store them in"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "an ArgumentMultimap Object."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". `FindCommandParser#parse()` method then calls `FindCommandParser#ensureKeywordsAreValid()` method. If any"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "of the keywords doesn\u0027t conform to the correct format, `ParseException` will be thrown. If no exception is thrown, a"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "`ExpenseContainsKeywordsPredicate` Object is created. It implements Predicate\u003cExpense\u003e interface and is used to filter"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "out all the expenses which matches the keywords entered by the user."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". A `FindCommand` Object with the `ExpenseContainsKeywordsPredicate` Object as parameter is created and returned to"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "`LogicManager`."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". `LogicManager` then calls `StatsCommand#execute()`,which calls `ModelManager#updateFilteredExpenseList()`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "method to update the predicate of FilterList\u003cExpense\u003e. FilterList now contains new set of expenses which filtered by the"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "new predicate."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Then the expense list panel will show a new set of expenses according to the keywords."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "// tag::UserInterfaceRedesign[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003d\u003d\u003d User Interface Redesign"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "The UI has been redesigned to implement the following UI elements required for the Expense Tracker:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* Budget Panel"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* Statistics Panel"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* Notifications Panel"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* Categories Panel"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "Animations will also be incorporated into the UI elements for a better user experience."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003d\u003d\u003d\u003d Budget Panel"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "The budget panel consists of 3 UI elements:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "*\t`BudgetPanel#expenseDisplay` – A `Text` element that displays the user’s current expenses."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "*\t`BudgetPanel#budgetDisplay` – A `Text` element that displays the user’s monthly budget cap."
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "*\t`BudgetPanel#budgetBar` – A `progressBar` element that visually presents the percentage of the current budget cap that has been used."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "Given below is an example scenario of how `BudgetPanel` is updated:"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". The user launches the application and signs up for a new account. The `MainWindow` creates a new `BudgetPanel`, which elements are initialized as follows:"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* `BudgetPanel#expenseDisplay` is green and set to \"$0.00\"."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* `BudgetPanel#budgetDisplay` is set to \"/ $28.00\", with $28.00 being the default budget."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* `BudgetPanel#budgetBar` is green and at 0% progress."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". The user executes the command `add n/Lunch $/30.00 c/Food`. As the `\u0027add` command modifies the budget and expenses, `AddCommand#execute()` will post a `UpdateBudgetPanelEvent` event to the EventsCenter."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "If a command fails its execution, the `UpdateBudgetPanelEvent` will not be posted."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". The `UpdateBudgetPanelEvent` event is handled by `BudgetPanel#handleBudgetPanelEvent()`, which calls `BudgetPanel#update()`."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". `BudgetPanel#update()` calls `BudgetPanel#animateBudgetPanel()`, which creates a new `Timeline` object."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". Two `KeyFrame` objects are added to the Timeline that smooths the transition of the `BudgetPanel#budgetBar` progress percentage from 0% to the updated percentage."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "If the updated percentage is more than 1.0, `BudgetPanel#budgetBar` progress percentage will be set to 1.0. Barring oversights, the progress percentage should never fall below 0.0."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". A call to \u0027BudgetPanel#incrementKeyFrames()` is made to create the incrementing animation for `BudgetPanel#expenseDisplay`. The total time for this animation is 0.5 seconds, and consists of 10 `KeyFrame` objects. With this information, the amount to increment `BudgetPanel#expenseDisplay` by each `KeyFrame` can be calculated."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " `BudgetPanel#updateExpenseDisplay()` is called to increment the `BudgetPanel#expenseDisplay`."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "`BudgetPanel#incrementKeyFrames()` handles the animation for both the `BudgetPanel#budgetDisplay` and `BudgetPanel#expenseDisplay` at the same time."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". `Timeline#playFromStart()` is called to execute the animation."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ". `BudgetPanel#update()` also calls `BudgetPanel#setBudgetUiColors()``. The method detects that the user has gone over budget, and changes the color of `BudgetPanel#expenseDisplay` and `BudgetPanel#budgetBar` from green to red."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "Similarly, if the user has gone from over budget to under budget, the color of \u0027BudgetPanel#expenseDisplay` and `BudgetPanel#budgetBar` should change from red to green."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Aspect: Which library to implement animation"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* **Alternative 1 (current choice):** Use the `Timeline` and `KeyFrame` class"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "** Pros: More flexible; Able to create the animation frame by frame."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "** Cons: Animations tricks and effects will require manual tweaking for the intented effect."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "* **Alternative 2:** Use the `Transition` class"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "** Pros: The class is specialized, and thus has built-in methods to create better animations For example, `EASE-BOTH` can be used to cause the transition to accelerate at different points for a better effect)"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "** Cons: Does not work for certain desired effects, such as the \u0027incrementing\u0027 effect required for the `Text` elements of the `BudgetPanel`."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "// end::userInterfaceRedesign[]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "// tag::budget[]"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Budget"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "The current implementation for budget tracking is described as below."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Keeping spendings within budget"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "The budget mechanism is facilitated by `VersionedAddressBook` and `AddCommand`. Whenever a user adds an expense via"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "`AddCommand` if they do not have a budget set, the application will prompt them to do so. After they do so,"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "application proceeds normally. If adding another expense will result in them exceeding the budget, they can still do"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "so, but a warning will be given to the user."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Recurring budget"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Every time a user logs in, `Model#loadUserData()` is called and  the application will check if the user has set a time"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "where the"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "budget will reset (recurrence time). If it is not set, the expense tracker will issue a notification. Else, the"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "expense tracker will track the set recurrence time against the time now. If it exceeds, budget will be reset. Else,"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "nothing will be done."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "* Recurrence time is set by `setReccurenceFrequency()`. If it has not been set before, the next recurrence time will"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "be set to `currentTime` + `recurrenceFrequency`."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "* If it has already been set, the timing will be updated on the next occurence time"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Notification center (Proposed)"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "There is an area for the app to display notifications and additional information to the users beside the usual"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "area below the command box. This is particularly useful to the *Budget* feature as budgets should not obstruct the"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "usage of the expense tracker, but rather provide helpful information. For example, if a user exceeds his budget after"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " adding an expense, a warning would be displayed in the *Notification center* instead of the area below the command"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " box, replacing the success message of adding an expense and confusing the user."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Budget by Category (Proposed)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Users can now allocate their budgets by categories. This means that within a fixed budget, they can decide how big of"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " a proportion a certain category of expense takes. Every `Category` will now have a `Budget` and the total budget in"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " `ModelManager` will never exceed the sum of all budgets in `Category`."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d Alternatives considered"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Recurrence check was initially implemented via events. Every time `ModelManager#loadUserData()` is called, an event"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "will be sent to the `EventBus` to be dispatched to an event handler implemented in `Budget`. However, after heavy"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "consideration, the recurrence check should only be called whenever `loadUserData()` is called, and never anywhere"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "else. Therefore, it should be more closely coupled with `loadUserData()` instead of being an event that can be posted"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " from anywhere inside the application."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "// end::budget[]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide Documentation Settings"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Per-file Documentation Settings"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site Template"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* To run all tests, carry out the following steps:"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Right-click on the `src/test/java` folder"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Click on `Run \u0027All Tests\u0027` on the menu that appears"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* To run a subset of tests, carry out the following steps:"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Right-click on a test package, test class, or a test"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Click on `Run \u0027TEST\u0027`, where TEST is the name of the test package, class or method you are intending to test"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* To use Gradle to run tests, carry out the following steps:"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Open a console"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". If you are on windows, enter the command `gradlew clean allTests`, otherwise enter `./gradlew clean allTests` instead"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Using the https://github.com/TestFX/TestFX[TestFX] library, our GUI tests can be run in the _headless_ mode."
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* To run tests in headless mode, carry out the following steps:"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Open a console"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". If you are on windows, enter the command `gradlew clean headless allTests`, otherwise enter `./gradlew clean headless allTests` instead"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "We have two main types of tests:"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "**  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "**  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "**  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "This section includes common issues that arise during testing."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* Problem: `HelpWindowTest` fails with a `NullPointerException`."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "A project often depends on third-party libraries. For example, Expense Tracker depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all expenses in the list."
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the expense tracker, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the expense tracker."
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a expense, and link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`] allows you to update the tags."
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each expense, and remove the `tag` from each expense."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your expense tracker application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last expense in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Use different colors for different tags inside expense cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[the `ExpenseCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** You can modify the existing test methods for `ExpenseCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the expense tracker."
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the expense tracker is updated."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of expenses when the application just started."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of expenses whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of expenses status bar."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the expense tracker to the cloud. However, the current implementation of the application constantly saves the expense tracker after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the expense tracker storage."
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the expense tracker can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Edits the remark for a expense specified in the `INDEX`. +"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Edits the remark for the first expense to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Removes the remark for the first expense."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `ExpenseCard`"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`] s to display a remark for each expense later."
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/ExpenseListCard.fxml[`ExpenseListCard.fxml`]."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/ExpenseCardHandle.java[`ExpenseCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/expense/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Expense` to support a `Remark` field"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`]."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`]."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the expense will be created without a remark)."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedExpense` class"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "We now have `Remark` s for `Expense` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedExpense.java[`XmlAdaptedExpense`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Fix `invalidAndValidExpenseAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `ExpenseBuilder`"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Since `Expense` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/ExpenseBuilder.java[`ExpenseBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/expense/Expense.java[`Expense`]."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/ExpenseBuilder.java[`ExpenseBuilder`]. This method will create a new `Remark` for the expense that it is currently building."
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Try and use the method on any sample `Expense` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalExpenses.java[`TypicalExpenses`]."
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `ExpenseCard`"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/ExpenseCard.java[`ExpenseCard`]\u0027s constructor to bind the `Remark` field to the `Expense` \u0027s remark."
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysExpense(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a expense."
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "* has a need to manage a significant number of contacts"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage contacts faster than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |user who wants to track their spending |add a new expense |have the app keep track of my expenses"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |clumsy user |delete inaccurately added expenditure |have an accurate recording of my expenditures and budget"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |clumsy user |edit inaccurately added expenditure |have an accurate recording of my expenditures and budget"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |user |have my expenditures saved after closing the app |keep track of my expenditures without having to key in my information again"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |forgetful user |receive a notification about my budget when the application boots up |be reminded of how much I have spent and can spend."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |user |exit the application with a keyboard command | exit the application conveniently without reaching for my mouse/touchpad"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |impulsive spender |set my maximum budget over a certain period of time |know when I am or about to spend over my budget"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |user who has a limited budget |view my expenses over a certain period of time |learn from my past endeavours and better manage my budget"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* * *` |user who wants to save money |separate my expenses into different categories| ee where am I spending more money on and where my expenses go and cut them accordingly"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* *`| user who shares a computer |add new account/log in to own account |use the application on the same computer as someone else"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* *` |user who has a monthly allowance |set my budget based on my monthly allowance |"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "|`* *` |user who spends on the same things frequently |add recurring expenses |do not need to key in the same type of expenditure every month"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "(For all use cases below, the *System* is the `Expense Tracker` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Add expenditure"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User adds expenditure record"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Once validated, ExpenseTracker shows success message and details of the expenditure"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. If expenditure causes budget to be below a certain threshold, show a warning message to the user"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Exceptions*"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* 2a. Invalid data given"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** 2a1.Error message shown"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Delete expenditure"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User keys in command to delete a given expenditure."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Once deleted successfully, expense tracker shows a success message."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. The deleted expenditure is deleted from the UI"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "4. The delete expenditure is deleted from the text file database."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Exceptions*"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* 2a. Expenditure does not exist."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** 2a1. Error message shown to the user."
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Set budget"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User requests to set budget"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Expense tracker prompts user to key in budget"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. User keys in budget value"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "4. Expense tracker prompts and updates budgets"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* 2a. Budget is already set"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** 2a1. Expense tracker prompts user the previously set budget and asks if user wants to continue"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** 2a2. User confirmed that he/she wants to continue"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case resumes step 2"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: View monthly expenditure"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User requests to view monthly expenditure"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Expense tracker prompts user to key in month"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. User keys in month"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "4. Expense tracker prompts and shows the expenditure for the month"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Log in"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User requests to log in to expense tracker"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Expense tracker prompts user to enter username"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. User enters username"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "4. Expense tracker prompts user to enter password"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "5. User enters password"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "6. User is successfully logged in"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Exceptions*"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* 4a. The username keyed in by the user does not exist"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** 4a1. Expense tracker prompts the user that the username does not exist"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* 6a. The password keyed in by the user is incorrect"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** 6a1. Expense tracker prompts the user that the password is incorrect."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Logout"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User requests to logout of the expense tracker"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Expense trackers shows success message and logs user out of account"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. Use case ends"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* 2a. User is not logged in"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "** 2a1. Expense tracker prompts user that they are not yet logged in"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Clear"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User requests to clear his recorded expenses and budget"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Expense trackers shows a confirmation message"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. Expense tracker deletes all information about the current user’s budget and expenses"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use Case: Filter"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. Expense tracker has already shown the lists of expenditures"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. User requests to filter by some predefined field"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. Expense tracker filters out expenditures not applicable to the filter"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Notification On"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User keys in the command to turn on notifications"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Expense tracker already has a budget set."
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. Add expenses until the budget has been exceeded"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "4. Expense tracker will detect that the budget has been exceeded"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "5. Expense tracker will show a visible notification to alert the user that the budget has been exceeded"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Notification Off"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User keys in command to turn off notifications"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Notifications no longer show whenever the set budget has been exceeded."
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. Any notification that is currently showing will be hidden from the user."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: Set recurring expenditure"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User key in command to set recurring expenses for an expense that was already keyed in"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "2. Expense tracker prompts the user to key in which expense and the frequency of recurrence."
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "3. User keys in the index of the expenditure to set as recurring expense and the frequency"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "4. Expense tracker adds the expense automatically every time the set amount of time passes."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "+"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Use case: View statistics"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "1. User keys in command to view the information and statistics of his weekly/monthly/yearly budget"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "2. Programs loads a window consisting of visual information displaying the relevant information"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Use case ends"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ".  Should be able to hold up to 1000 expenses without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d Deleting a expense"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ". Deleting a expense while all expenses are listed"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ".. Prerequisites: List all expenses using the `list` command. Multiple expenses in the list."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "   Expected: No expense is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving data"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 61,
      "JasonChong96": 310,
      "jonathantjm": 25,
      "winsonhys": 82,
      "-": 844,
      "jcjxwy": 72
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: LearningOutcomes"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `ExpenseListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "-": 265,
      "jcjxwy": 1
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d Expense Tracker - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "By: `Team T12-1`      Since: `Sept 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The Expense Tracker application is a desktop application which enables users to track their expenses. The application features both a Command Line Interface (CLI) and a Graphical User Interface (GUI) which provides users with the efficency of the CLI while still having the benefits of a GUI."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started!"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Follow these steps to start using the Expense Tracker:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Install Java version `9` (or later) on your computer."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Download the latest `expensetracker.jar` file from https://github.com/CS2103-AY1819S1-T12-1/main[here]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Copy the file to the folder which you want to use as the home folder for your Expense Tracker."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Double-click the `expensetracker.jar` file to start the app. The GUI should appear in a few seconds and look like this:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "image::UI.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Type the command `singup USERNAME` in the command box (the box where it says \"Enter command here...\") and press kbd:[Enter] to execute it, where USERNAME is the username of your choice. E.g. `signup username123`"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Type the command `login USERNAME` in the command box and press kbd:[Enter] to execute it, where USERNAME is the username you signed up with in the previous step. e.g. `login username123` +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "You are now able to use all the commands of the app. +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Type commands in the command box, as highlighted in the figure below, and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of all available commands."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* All commands begin with the command word. The command word may be followed by parameters."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* According to the format of each command, words in `UPPER_CASE` are the parameters which can be specified by the user"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "** E.g. the `login` command has the format of `login USERNAME` where `USERNAME` is a parameter which can be replaced by a user specified value. In order to log in to an account with the username \"username123\", the user will enter the command `login username123`."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* Parameters in square brackets are optional"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "** E.g if a command has a parameter format of `n/EXPENSE_NAME [t/TAG]`, the parameters can be used as `n/Birthday Present t/Girlfriend`, which includes the \"Girlfriend\" tag, or as `n/Birthday Present`, which does not include a tag."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* Parameters with `…`​ after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "** E.g. if a command format contains the parameter `[t/TAG]...`, the parameter can be replaced with `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* Parameters can be in any order e.g. if the command format specifies `n/NAME p/CATEGORY`, using the parameters `p/CATEGORY n/NAME` is also acceptable."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* Before a user is logged in, only `login`, `signup` and `help` commands are useable."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* After a user is logged in, the rest of the commands will become useable."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "These are the features and respective commands available to use in the Expense Tracker:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Signing up a User : `signup`"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Signs up a new user to the Expense Tracker."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Format: `signup USERNAME`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "****"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*  `signup username123` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Signs up a user with the username \"username123\"."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "****"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* USERNAME must not contain any of the following characters :  \u003e \u003c : \\ / | ?"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Logging in as an existing User : `login`"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Logs in to the Expense Tracker as an existing user and expands the UI to show the existing expenses if it is not already expanded."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Format: `login u/USERNAME [p/PASSWORD]`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "****"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*  `login u/username123` +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Logs in a user with the username \"username123\"."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*  `login u/username1234 p/password1` +"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " Logs in a user with the username \"username1234\" with password \"password1\"."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "****"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* USERNAME is case insensitive"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* PASSWORD is case sensitive"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* PASSWORD cannot contain any spaces and must be at least 6 characters long"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* The expense tracker contains a sample user with USERNAME `sample`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d Setting a password for the current user : `setpassword`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Sets a new password for the currently logged in user."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "Format: `setpassword n/NEW_PASSWORD [o/OLD_PASSWORD]`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*  `setpassword n/pass123` +"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " Sets the current user\u0027s password as \"pass123\", provided that there is no previously set password"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*  `setpassword n/pass123 o/password1` +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " Sets the current user\u0027s password as \"pass123\", provided that the current password is \"password1\""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* OLD_PASSWORD is needed if a password has been previously set for the current user and they have to match."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Opens up a new window with the User Guide."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d Adding an expense: `add`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Adds an expense to the tracker."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Format: `add n/EXPENSE_NAME $/COST c/CATEGORY [d/DATE] [t/TAG]...`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*  `add n/Lunch $/4.00 c/Food` +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Adds an expense with its name as \"Lunch\", cost as \"4.00\" and category as \"Food\"."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*  `add n/Stationery $/1.80 c/School t/bookhaven` +"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Adds an expense with its name as \"Stationery\", cost as \"1.80\", category as \"School\" and Tag as \"bookhaven\"."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*  `add n/Project $/2.08 c/School d/01-01-2018` +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Adds an expense with its name as \"Project\", cost as \"2.08\", category as \"School\" and date as \"01-01-2018\"."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "****"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* COST should be a non-zero positive number with two decimal places"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* If the user does not in put a DATE parameter, the expense  date will default to the current day."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* DATE should be in the format of \"dd-mm-yyyy\"."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d Editing an expense : `edit`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Edits the expense at the specified `INDEX`. The `INDEX` refers to the index number shown in the displayed expense list"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "next to the name of the expense. +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Existing values of the expense will be edited according to the value of the parameters +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Format: `edit INDEX [n/EXPENSE_NAME] [$/COST] [c/CATEGORY] [d/DATE] [t/TAG...]`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `edit 1 n/Stationery $/1.80 c/School` +"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Edits the name and category of the 1st expense in the expense list to be `Stationery` and `school` respectively."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `edit 2 d/01-01-2018` +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Edits the date of the 2nd expense in the expense list to be the 1st of October, 2018."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* The index *must be a non-zero positive integer* and must correspond to an expense in the expense list."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* COST should be a non-zero positive number with two decimal places"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* DATE should be in the format of \"dd-mm-yyyy\"."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d Deleting a expense : `delete`"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Deletes the expense at the specified `INDEX`. The `INDEX` refers to the index number shown in the displayed expense list"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "next to the name of the expense. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Deletes the 1st expense in the expense list from the expense tracker."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* The index *must be a non-zero positive integer* and must correspond to an expense in the expense list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003d\u003d\u003d Locating expenses by name: `find`"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Finds expense whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Format: `find [n/NAME] [c/CATEGORY] [$/COST:COST] [t/TAG] [d/DATE:DATE]`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "* find c/School"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Find all the expenses under `School` category."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "* find c/Food  t/Lunch"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Find all the expenses with tag `Lunch` plus the expenses under `Food` category."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "* find d/1-10-2018:7-10-2018"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Find all the expenses from 1-10-2018 to 7-10-2018."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "* find $/10.00:20.00"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Find all the expenses with cost which is larger than or equals to 10.00 and smaller or equal to 20."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* The search is case insensitive, i.e. the KEYWORD `hans` is equivalent to the KEYWORD `Hans`"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* The order of the keywords does not matter, i.e. the KEYWORD `hans bo` is equivalent to the KEYWORD `bo hans`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* Only the expense name will be searched."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* Only full words will be matched, i.e. the KEYWORD `Han` will not match the expense name `Hans`"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d Listing all expenses : `list`"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Updates the expense list to show all expenses in the expense tracker."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "For example, this command can be used after the `find` command is used, as the `find` command will apply a filter to the expense list."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//\u003d\u003d\u003d Selecting a expense : `select`"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//Selects the expense identified by the index number used in the displayed expense list. +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//Format: `select INDEX`"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//****"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//* Selects the expense and loads the Google search page the expense at the specified `INDEX`."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//* The index refers to the index number shown in the displayed expense list."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//****"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//Examples:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//* `list` +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//`select 2` +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//Selects the 2nd expense in the expense tracker."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//* `find Betsy` +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//`select 1` +"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//Selects the 1st expense in the results of the `find` command."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d Setting a budget: `setBudget`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Sets the budget for the expense tracker. +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The Expense Tracker will warn you when your total expenditure exceeds the budget that is set."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Format: `setBudget MONEY_WITH_TWO_DECIMAL_PLACES`"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `setBudget 2.00` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Sets a budget of $2.00."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `setBudget 20.00` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " Sets a budget of $20.00."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* The `setBudget` command is case sensitive."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* MONEY_WITH_TWO_DECIMAL_PLACES must be a positive number with two decimal places."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d Sets recurring frequency for budget: `setRecurringFrequency`"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Sets the recurrence frequency for the budget of the expense tracker."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "The expense tracker will reset your budget after every `FREQUENCY`"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "Format: `setRecurringFrequency [hrs/HOURS] [min/MINUTES] [sec/SECONDS]`"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "****"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "* `setRecurringFrequency hrs/1` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    Sets the budget to reset every 1 hour"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "* `setRecurringFrequency hrs/1 min/30` +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    Sets the budget reset every 1 hour and 30 minutes"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "****"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "* The `setRecurringFrequency` command is case sensitive."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "* HOURS/MINUTES/SECONDS must be a positive number."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Lists all the commands that you have previously entered in reverse chronological order. +"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Press the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows to display the previous and next commands respectively in the command box."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "Restores the expense tracker to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "_Undoable_ commands are commands that modify expenses in the expense tracker (`add`, `delete`, `edit` and `clear`). +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "****"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Reverses the `delete 1` command."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The first `undo` reverses the `clear` command. The second `undo` reverses the `delete 1` command."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "****"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Restores the expense tracker to the state before the most recent `undo` command. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "****"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The `undo` command reverses the `delete 1` command. +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The `redo` command reverses the `undo` command."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The `redo` command fails as there was no `undo` command executed previously."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "`undo`"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The first `undo` reverses the `clear` command. +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The second `undo` reverses the `delete 1` command. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The first `redo` reverses the second `undo` command, reapplying `delete 1`."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The second`redo` reverses the first `undo` command, reapplying `clear`."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "****"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d Show expense statistics: `stats`"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "Shows the user the bar chart of the expenditure over a specified time period, in a given `MODE`. +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "The available modes are `d` and `m`, which represents day and month respectively. E.g. if NUMBER_OF_DAYS_OR_MONTHS is 7"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "and MODE is \u0027d\u0027, the statistics will include data from the past 7 days, current day included."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Format: `stats n/NUMBER_OF_DAYS_OR_MONTHS m/MODE`"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "****"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Examples:*"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `stats n/14 m/d` +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Shows the expense statistics for the past 14 days, current day included +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* `stats n/3 m/m` +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Shows the expense statistics for the past 3 months, current day included +"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "****"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* NUMBER_OF_DAYS_OR_MONTHS must be a positive number greater than 0"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* MODE can only be \u0027d\u0027 or \u0027m\u0027."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* If no parameters are provided, the command defaults to show statistics for the past 7 days, current day included."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Deletes all expense entries from the expense tracker. +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*Q*: Do I need to manually save my data? +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "*A*: There is no need to save your manually. All the data in the Expense Tracker is automatically saved in the hard disk after any command that changes the data. +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "*A*:  Install the app in the other computer and copy the `data` folder in your previous Expense Tracker folder over to the new Expense Tracker folder on your other Computer."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "This is a summary of the commands available in the Expense Tracker:"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* *SignUp* : `signup USERNAME` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "e.g. `signup username123`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* *Login* : `login u/USERNAME [p/PASSWORD]` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "e.g. `login u/username123 p/password1`"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "* *Set Password* : `setpassword n/NEW_PASSWORD [o/OLD_PASSWORD]` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "e.g. `setpassword n/pass1 o/passold`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "* *Add* `add n/EXPENSE_NAME e/EXPENSE [c/CATEGORY]` +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "e.g. `add n/Lunch e/4 c/Food`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "* *Edit* : `edit INDEX n/EXPENSE_NAME e/EXPENSE [c/CATEGORY]` +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "e.g. `edit 2 n/Lunch e/4 c/Food`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "e.g. `find school`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//e.g.`select 2`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* *Set Budget* : `setBudget` +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "e.g. `setBudget 20.00`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* *Statistics* : `stats n/NUMBER_OF_DAYS_OR_MONTHS m/MODE`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "* *Exit* : `exit`"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "jonathantjm": 207,
      "JasonChong96": 37,
      "winsonhys": 25,
      "-": 152,
      "jcjxwy": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.storage.ExpensesStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.storage.XmlExpensesStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        ExpensesStorage expensesStorage \u003d new XmlExpensesStorage(userPrefs.getAddressBookDirPath());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        storage \u003d new StorageManager(expensesStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * A user \"sample\" with a sample AddressBook will be added if the username does not exist."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * or no users will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Map\u003cUsername, ReadOnlyAddressBook\u003e addressBooks;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            addressBooks \u003d storage.readAllExpenses(userPrefs.getAddressBookDirPath());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            ReadOnlyAddressBook sampleAddressBook \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            if (!addressBooks.containsKey(sampleAddressBook.getUsername())) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                addressBooks.put(sampleAddressBook.getUsername(), sampleAddressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            logger.warning(\"Data files are not in the correct format. Will be starting with no accounts.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            addressBooks \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            logger.warning(\"Problem while reading from the files. Will be starting with no accounts\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            addressBooks \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new ModelManager(addressBooks, userPrefs);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected void initLogging(Config config) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected void initEventsCenter() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping AddressBook ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (model.hasSelectedUser()) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IOException e) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 25,
      "winsonhys": 1,
      "-": 186
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX \u003d \"The expense index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_EXPENSES_LISTED_OVERVIEW \u003d \"%1$d expenses listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 11,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AddressBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/** Indicates the AddressBook in the model has changed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyAddressBook data;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookChangedEvent(ReadOnlyAddressBook data) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return \"number of expenses \" + data.getExpenseList().size();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 18,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/UserLoggedInEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/** Indicates the a user has logged in */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class UserLoggedInEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public UserLoggedInEvent(Username username) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return \"Logged in to user: \" + username.toString();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExpensePanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Represents a selection change in the Expense List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpensePanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Expense newSelection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpensePanelSelectionChangedEvent(Expense newSelection) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Expense getNewSelection() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjxwy": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Indicates a request to jump to the list of expenses"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class JumpToListRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public JumpToListRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 21,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowStatsRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * An event requesting to view the help page."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class ShowStatsRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/SwapLeftPanelEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * An event requesting a panel swap."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class SwapLeftPanelEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Stores the two types of panels to swap to."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public enum PanelType {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        LIST, STATISTIC"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private PanelType panelType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public SwapLeftPanelEvent(PanelType type) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        panelType \u003d type;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public PanelType getPanelType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return panelType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/UpdateBudgetPanelEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * An event requesting an update in budget display."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class UpdateBudgetPanelEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public final Budget budget;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public UpdateBudgetPanelEvent(Budget budget) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException, NoUserSelectedException,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            UserAlreadyExistsException, NonExistentUserException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    Budget getMaximumBudget();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @return an unmodifiable view of the filtered list of expenses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @throws NoUserSelectedException"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns a LinkedHashMap of expenses for the bar chart where the key is a String which represents the x-axis data"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * and the value is a double which represents the total amount"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @return a LinkedHashMap of expenses for the bar chart"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @throws NoUserSelectedException"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    LinkedHashMap\u003cString, Double\u003e getExpenseStats() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @return a StatsMode representing the current mode of statistics"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @throws NoUserSelectedException"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    StatsMode getStatsMode() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "jonathantjm": 21,
      "JasonChong96": 5,
      "winsonhys": 3,
      "-": 24,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException, NoUserSelectedException,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            UserAlreadyExistsException, NonExistentUserException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    //@@author winsonhys"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return model.getMaximumBudget();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author jonathantjm"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns a LinkedHashMap containing data for the bar chart, where the key is the x-axis and the value is the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * y-axis."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @return LinkedHashMap of String key and Double value"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @throws NoUserSelectedException"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public LinkedHashMap\u003cString, Double\u003e getExpenseStats() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        ObservableList\u003cExpense\u003e expenseList \u003d model.getExpenseStats();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        StatsMode statsMode \u003d model.getStatsMode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        LinkedHashMap\u003cString, Double\u003e stats \u003d new LinkedHashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        for (Expense e : expenseList) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            String period;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            if (statsMode \u003d\u003d statsMode.DAY) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                period \u003d e.getDate().toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                period \u003d new SimpleDateFormat(\"MMM-YYYY\").format(e.getDate().fullDate.getTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            if (stats.containsKey(period)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                stats.put("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                        period,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                        stats.get(period) + e.getCost().getCostValue()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                );"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                stats.put(period, e.getCost().getCostValue());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return stats;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public StatsMode getStatsMode() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return model.getStatsMode();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 4,
      "jonathantjm": 38,
      "JasonChong96": 5,
      "winsonhys": 7,
      "-": 47,
      "jcjxwy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.UpdateBudgetPanelEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Adds a expense to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds an expense to the expense tracker. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + PREFIX_COST + \"ADDRESS \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE]\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + PREFIX_NAME + \"Stationery \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + PREFIX_CATEGORY + \"School \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + PREFIX_COST + \"1.00 \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + PREFIX_TAG + \"bookhaven \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + PREFIX_TAG + \"nus\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New expense added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    //TODO: Redirect this to notification center"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_BUDGET_EXCEED_WARNING \u003d \"WARNING: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"Adding this expense will cause your budget to exceed.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Expense toAdd;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Expense}"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public AddCommand(Expense expense) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        toAdd \u003d expense;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, NoUserSelectedException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.LIST));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (model.hasExpense(toAdd)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        boolean withinBudget \u003d model.addExpense(toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateBudgetPanelEvent(model.getMaximumBudget()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (withinBudget) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return new CommandResult(MESSAGE_BUDGET_EXCEED_WARNING);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 5,
      "JasonChong96": 11,
      "jonathantjm": 1,
      "winsonhys": 5,
      "-": 42,
      "jcjxwy": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.UpdateBudgetPanelEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        AddressBook newAddressBook \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new AddressBook(model.getAddressBook().getUsername(), model.getAddressBook().getPassword());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Budget clearedSpendingBudget \u003d model.getMaximumBudget();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model.resetData(newAddressBook);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        clearedSpendingBudget.clearSpending();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model.modifyMaximumBudget(clearedSpendingBudget);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateBudgetPanelEvent(model.getMaximumBudget()));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 3,
      "JasonChong96": 4,
      "jonathantjm": 1,
      "winsonhys": 5,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/Command.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a command with hidden internal logic and the ability to be executed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result message."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param model {@code Model} which the command should operate on."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param history {@code CommandHistory} which the command should operate on."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return feedback message of the operation result for display"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public abstract CommandResult execute(Model model, CommandHistory history) throws CommandException,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NoUserSelectedException, NonExistentUserException, UserAlreadyExistsException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 5,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.UpdateBudgetPanelEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Deletes a expense identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + \": Deletes the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_DELETE_EXPENSE_SUCCESS \u003d \"Deleted Expense: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, NoUserSelectedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.LIST));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateBudgetPanelEvent(model.getMaximumBudget()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((DeleteCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 6,
      "JasonChong96": 2,
      "jonathantjm": 1,
      "-": 45,
      "jcjxwy": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.UpdateBudgetPanelEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Edits the details of an existing expense in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends Command {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the expense identified \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"by the index number used in the displayed expense list. \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + \"[\" + PREFIX_CATEGORY + \"CATEGORY] \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"[\" + PREFIX_COST + \"ADDRESS] \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"[\" + PREFIX_DATE + \"DATE] \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + PREFIX_CATEGORY + \"91234567 \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_EDIT_EXPENSE_SUCCESS \u003d \"Edited Expense: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"This expense already exists in the address book.\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final EditExpenseDescriptor editExpenseDescriptor;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @param index of the expense in the filtered expense list to edit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @param editExpenseDescriptor details to edit the expense with"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditCommand(Index index, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(editExpenseDescriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.editExpenseDescriptor \u003d new EditExpenseDescriptor(editExpenseDescriptor);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, NoUserSelectedException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.LIST));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e lastShownList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d createEditedExpense(expenseToEdit, editExpenseDescriptor);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!expenseToEdit.isSameExpense(editedExpense) \u0026\u0026 model.hasExpense(editedExpense)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateBudgetPanelEvent(model.getMaximumBudget()));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Creates and returns a {@code Expense} with the details of {@code expenseToEdit}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * edited with {@code editExpenseDescriptor}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static Expense createEditedExpense(Expense expenseToEdit, EditExpenseDescriptor editExpenseDescriptor) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assert expenseToEdit !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Name updatedName \u003d editExpenseDescriptor.getName().orElse(expenseToEdit.getName());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Category updatedCategory \u003d editExpenseDescriptor.getCategory().orElse(expenseToEdit.getCategory());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Cost updatedCost \u003d editExpenseDescriptor.getCost().orElse(expenseToEdit.getCost());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editExpenseDescriptor.getTags().orElse(expenseToEdit.getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Date updatedDate \u003d editExpenseDescriptor.getDate().orElse(expenseToEdit.getDate());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new Expense(updatedName, updatedCategory, updatedCost, updatedDate, updatedTags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 editExpenseDescriptor.equals(e.editExpenseDescriptor);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Stores the details to edit the expense with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * corresponding field value of the expense."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static class EditExpenseDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        private Category category;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        private Cost cost;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        private Date date;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public EditExpenseDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public EditExpenseDescriptor(EditExpenseDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            setCategory(toCopy.category);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            setCost(toCopy.cost);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            setDate(toCopy.date);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, category, cost, tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public void setDate(Date date) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            this.date \u003d date;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public Optional\u003cDate\u003e getDate() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return Optional.ofNullable(date);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public void setCategory(Category category) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            this.category \u003d category;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public Optional\u003cCategory\u003e getCategory() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return Optional.ofNullable(category);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public void setCost(Cost cost) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            this.cost \u003d cost;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public Optional\u003cCost\u003e getCost() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return Optional.ofNullable(cost);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (!(other instanceof EditExpenseDescriptor)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            EditExpenseDescriptor e \u003d (EditExpenseDescriptor) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    \u0026\u0026 getCategory().equals(e.getCategory())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                    \u0026\u0026 getCost().equals(e.getCost())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    \u0026\u0026 getDate().equals(e.getDate());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 5,
      "JasonChong96": 17,
      "jonathantjm": 1,
      "winsonhys": 9,
      "-": 151,
      "jcjxwy": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Finds and lists all expenses in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all expenses contain \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            + \"the specified keywords (case-in\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + \"sensitive) and displays them as a list with index numbers. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + \"The keywords do not need to be in order.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + \"Parameters: [n/NAME] [c/CATEGORY] [$/COST] [t/TAG] [d/DATE:DATE]...\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/Have KFC c/Food t/lunch $/2.00:10.00 d/01-01-2018:10-01-2018\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_INVALID_RANGE \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            \"The lower bound should not be larger than higher bound.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_INVALID_DATE_KEYWORDS_FORMAT \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            \"The correct format is d/DATE:DATE or d/DATE. Example: d/01-01-2018:10-01-2018\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_INVALID_COST_KEYWORDS_FORMAT \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            \"The correct format is $/COST:COST or $/COST. Example: $/1.00:10.00\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final ExpenseContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public FindCommand(ExpenseContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.LIST));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW, model.getFilteredExpenseList().size()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 4,
      "JasonChong96": 2,
      "jonathantjm": 1,
      "-": 33,
      "jcjxwy": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 1,
      "-": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Lists all expenses in the address book to the user."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all expenses\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.LIST));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 3,
      "JasonChong96": 2,
      "jonathantjm": 1,
      "-": 20,
      "jcjxwy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LoginCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Logs in a user in the model"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"login\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"li\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \": Logs in to the user with the given USERNAME and PASSWORD. The password\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Parameters: u/USERNAME [p/PASSWORD]\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" u/examplename\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + COMMAND_WORD + \"u/john p/password123\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_LOGIN_SUCCESS \u003d \"Logged in as %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_INCORRECT_PASSWORD \u003d \"Incorrect password\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Password password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public LoginCommand(Username username, Password password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NonExistentUserException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (model.loadUserData(this.username, this.password)) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_LOGIN_SUCCESS, this.username.toString()));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_PASSWORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof LoginCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 username.equals(((LoginCommand) other).username)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, NoUserSelectedException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canRedoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.redoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 2,
      "jonathantjm": 1,
      "-": 28,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Selects a expense identified using it\u0027s displayed index from the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            + \": Selects the expense identified by the index number used in the displayed expense list.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_SELECT_EXPENSE_SUCCESS \u003d \"Selected Expense: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, NoUserSelectedException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.LIST));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e filteredExpenseList \u003d model.getFilteredExpenseList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d filteredExpenseList.size()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_EXPENSE_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 2,
      "JasonChong96": 2,
      "jonathantjm": 1,
      "-": 47,
      "jcjxwy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@author winsonhys"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.UpdateBudgetPanelEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Sets the budget cap for the expense tracker."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class SetBudgetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setBudget\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sb\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a budget cap for the expense tracker \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"Parameters: MONEY (Must be a positive float with 2 decimal places)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"Example \" + COMMAND_WORD + \" 130.00\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Budget set to %1$s\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private final Budget toSet;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Budget}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public SetBudgetCommand(Budget budget) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.toSet \u003d budget;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model.modifyMaximumBudget(this.toSet);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        EventsCenter.getInstance().post(new UpdateBudgetPanelEvent(model.getMaximumBudget()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.toSet));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 3,
      "winsonhys": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetPasswordCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Sets the password of the current user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SetPasswordCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setpassword\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"sp\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \": Sets the password of the currently logged in user.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Parameters: [o/OLD_PASSWORD] n/NEW_PASSWORD\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + Password.MESSAGE_PASSWORD_CONSTRAINTS + \"\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"If password has not been previously set, the OLD_PASSWORD field may be omitted\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" n/password123\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + COMMAND_WORD + \" o/oldpass123 n/newpass123\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_SET_PASSWORD_SUCCESS \u003d \"Your password has been changed.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_INCORRECT_PASSWORD \u003d \"The old password is incorrect.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Password oldPassword;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Password newPassword;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public SetPasswordCommand(Password oldPassword, Password newPassword) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(newPassword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.oldPassword \u003d oldPassword;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.newPassword \u003d newPassword;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!model.getAddressBook().isMatchPassword(oldPassword)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new CommandResult(MESSAGE_INCORRECT_PASSWORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.setPassword(newPassword);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new CommandResult(MESSAGE_SET_PASSWORD_SUCCESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof SetPasswordCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 oldPassword.equals(((SetPasswordCommand) other).oldPassword)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 newPassword.equals(((SetPasswordCommand) other).newPassword)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SetRecurringBudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@@author winsonhys"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MINUTES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECONDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Command that sets the recurrence time for the current {@code Budget}"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class SetRecurringBudgetCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"setRecurringFrequency\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"srf\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sets a frequency for budget to reset \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"[\" + PREFIX_HOURS + \"HOURS] \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"[\" + PREFIX_MINUTES + \"MINUTES]\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"[\" + PREFIX_SECONDS + \"SECONDS]\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"Example \" + COMMAND_WORD + \" \" + PREFIX_HOURS + \"3\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Budget recurrence is set at %s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private long toSet;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Budget}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public SetRecurringBudgetCommand(long recurrenceFrequency) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        requireNonNull(recurrenceFrequency);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.toSet \u003d recurrenceFrequency;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model.setRecurrenceFrequency(this.toSet);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, this.toSet));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        SetRecurringBudgetCommand otherCommand \u003d (SetRecurringBudgetCommand) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return otherCommand.toSet \u003d\u003d this.toSet;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SignUpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Adds a user to the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"signup\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"su\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \": Creates a user with the given USERNAME.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Parameters: USERNAME\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"USERNAME cannot contain any of these characters: \\\" \u003e \u003c : \\\\ / | ? *\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" examplename\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_SIGN_UP_SUCCESS \u003d \"User \\\"%1$s\\\" has successfully been created.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Username username;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public SignUpCommand(Username username) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws UserAlreadyExistsException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.addUser(this.username);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SIGN_UP_SUCCESS, this.username.toString()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof SignUpCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 username.equals(((SignUpCommand) other).username)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/StatsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_DAYS_OR_MONTHS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.ShowStatsRequestEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Opens up the stats window for the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatsCommand extends Command {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"stats\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"st\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"swapped to stats window\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Opens stats window. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_NUMBER_OF_DAYS_OR_MONTHS + \"NUMBER_OF_DAYS_OR_MONTHS \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_MODE + \"FORMAT (either \u0027m\u0027 or \u0027d\u0027)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_NUMBER_OF_DAYS_OR_MONTHS + \"7 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_MODE + \"d\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String MESSAGE_PARAMETERS_FORMAT \u003d \"Command should be in format: \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_NUMBER_OF_DAYS_OR_MONTHS + \"NUMBER_OF_DAYS_OR_MONTHS \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_MODE + \"FORMAT (either \u0027m\u0027 or \u0027d\u0027)\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_NUMBER_OF_DAYS_OR_MONTHS + \"7 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            + PREFIX_MODE + \"d\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *  Enum for StatsMode. StatsMode can either be MONTH or DAY"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public enum StatsMode {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        MONTH, DAY"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private int numberOfDaysOrMonths;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private StatsMode mode;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public StatsCommand(int numberOfDaysOrMonths, String mode) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        requireNonNull(numberOfDaysOrMonths, mode);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        checkArgument(isValidMode(mode), MESSAGE_PARAMETERS_FORMAT);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        checkArgument(isValidNumber(numberOfDaysOrMonths), MESSAGE_PARAMETERS_FORMAT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        this.numberOfDaysOrMonths \u003d numberOfDaysOrMonths;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (\"d\".equals(mode)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            this.mode \u003d StatsMode.DAY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            this.mode \u003d StatsMode.MONTH;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public StatsCommand() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        this(7, \"d\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        EventsCenter.getInstance().post(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.STATISTIC));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        EventsCenter.getInstance().post(new ShowStatsRequestEvent());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.updateExpenseStats(getStatsPredicate());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.updateStatsMode(this.mode);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns Predicate used for FilteredList based on the current statsMode"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @return Predicate"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private Predicate\u003cExpense\u003e getStatsPredicate() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (this.mode \u003d\u003d StatsMode.DAY) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            now.add(Calendar.DAY_OF_MONTH, this.numberOfDaysOrMonths * -1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            now.add(Calendar.MONTH, this.numberOfDaysOrMonths * -1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return e -\u003e e.getDate().fullDate.after(now);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private boolean isValidMode(String mode) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return \"d\".equals(mode) || \"m\".equals(mode);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private boolean isValidNumber(int num) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return num \u003e 0;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Checks equality of current object to another object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @param other Object to compare"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @return true if equal"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                || (other instanceof StatsCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                \u0026\u0026 numberOfDaysOrMonths \u003d\u003d (((StatsCommand) other).numberOfDaysOrMonths)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                \u0026\u0026 mode.equals(((StatsCommand) other).mode));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 2,
      "jonathantjm": 114,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Reverts the {@code model}\u0027s address book to its previous state."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException, NoUserSelectedException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!model.canUndoAddressBook()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 2,
      "jonathantjm": 1,
      "-": 28,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CATEGORY, PREFIX_COST, PREFIX_TAG, PREFIX_DATE);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_COST, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Cost cost \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_COST).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Optional\u003cString\u003e dateString \u003d argMultimap.getValue(PREFIX_DATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expense;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!dateString.isPresent()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expense \u003d new Expense(name, category, cost, tagList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expense \u003d new Expense(name, category, cost, ParserUtil.parseDate(dateString.get()), tagList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new AddCommand(expense);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 11,
      "winsonhys": 2,
      "-": 34,
      "jcjxwy": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.commands.SetRecurringBudgetCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        case LoginCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        case LoginCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new LoginCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        case SignUpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        case SignUpCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new SignUpCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        case SetBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        case SetBudgetCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return new SetBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case StatsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        case StatsCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            return new StatsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        case SetRecurringBudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        case SetRecurringBudgetCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return new SetRecurringBudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        case SetPasswordCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        case SetPasswordCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new SetPasswordCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 14,
      "jonathantjm": 16,
      "winsonhys": 10,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentMultimap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores mapping of prefixes to their respective arguments."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Each key may be associated with multiple argument values."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Values for a given key are stored in a list, and the insertion ordering is maintained."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keys are unique, but the list of argument values may contain duplicate argument values, i.e. the same argument value"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * can be inserted multiple times for the same prefix."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentMultimap {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Prefixes mapped to their respective arguments**/"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Map\u003cPrefix, List\u003cString\u003e\u003e argMultimap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Associates the specified argument value with {@code prefix} key in this map."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the map previously contained a mapping for the key, the new value is appended to the list of existing values."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefix   Prefix key with which the specified argument value is to be associated"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argValue Argument value to be associated with the specified prefix key"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void put(Prefix prefix, String argValue) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e argValues \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        argValues.add(argValue);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        argMultimap.put(prefix, argValues);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the last value of {@code prefix}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cString\u003e getValue(Prefix prefix) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e values \u003d getAllValues(prefix);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return values.isEmpty() ? Optional.empty() : Optional.of(values.get(values.size() - 1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all values of {@code prefix}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * If the prefix does not exist or has no values, this will return an empty list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Modifying the returned list will not affect the underlying data structure of the ArgumentMultimap."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getAllValues(Prefix prefix) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!argMultimap.containsKey(prefix)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(argMultimap.get(prefix));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the preamble (text before the first valid prefix). Trims any leading/trailing spaces."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPreamble() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return getValue(new Prefix(\"\")).orElse(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     *  Return true if the two ArgumentMultimap refers to the same Object or they have the same {@code argMultimap}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                || (other instanceof ArgumentMultimap // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 argMultimap.equals((((ArgumentMultimap) other).argMultimap))); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 60,
      "jcjxwy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Prefix PREFIX_COST \u003d new Prefix(\"$/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"d/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Prefix PREFIX_USERNAME \u003d new Prefix(\"u/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Prefix PREFIX_PASSWORD \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Prefix PREFIX_OLD_PASSWORD \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Prefix PREFIX_NEW_PASSWORD \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final Prefix PREFIX_NUMBER_OF_DAYS_OR_MONTHS \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final Prefix PREFIX_MODE \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final Prefix PREFIX_HOURS \u003d new Prefix(\"hrs/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final Prefix PREFIX_MINUTES \u003d new Prefix(\"min/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final Prefix PREFIX_SECONDS \u003d new Prefix(\"sec/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 7,
      "jonathantjm": 2,
      "winsonhys": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CATEGORY, PREFIX_COST, PREFIX_DATE, PREFIX_TAG);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE), pe);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditExpenseDescriptor editExpenseDescriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            editExpenseDescriptor.setName(ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (argMultimap.getValue(PREFIX_CATEGORY).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            editExpenseDescriptor.setCategory(ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_COST).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            editExpenseDescriptor.setCost(ParserUtil.parseAddress(argMultimap.getValue(PREFIX_COST).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (argMultimap.getValue(PREFIX_DATE).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            editExpenseDescriptor.setDate(ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editExpenseDescriptor::setTags);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!editExpenseDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new EditCommand(index, editExpenseDescriptor);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 5,
      "-": 66,
      "jcjxwy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_COST_KEYWORDS_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_DATE_KEYWORDS_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_RANGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "//@@Author Jiang Chen"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String[] splitTrimmedArgs \u003d trimmedArgs.split(\"/\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (splitTrimmedArgs.length \u003d\u003d 1 || splitTrimmedArgs[0].equals(\"\")) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            //Ensure args contains at least one prefix or keyword"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_CATEGORY, PREFIX_COST, PREFIX_TAG, PREFIX_DATE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ensureKeywordsAreValid(keywordsMap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new FindCommand(new ExpenseContainsKeywordsPredicate(keywordsMap));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     *  Check whether all the keywords are valid."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @throws ParseException if any keyword entered by user does not conform the expected format."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void ensureKeywordsAreValid(ArgumentMultimap keywordsMap) throws ParseException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String nameKeywords \u003d keywordsMap.getValue(PREFIX_NAME).orElse(null);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String categoryKeywords \u003d keywordsMap.getValue(PREFIX_CATEGORY).orElse(null);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d keywordsMap.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String dateKeywords \u003d keywordsMap.getValue(PREFIX_DATE).orElse(null);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String costKeywords \u003d keywordsMap.getValue(PREFIX_COST).orElse(null);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (nameKeywords !\u003d null \u0026\u0026 !Name.isValidName(nameKeywords)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, Name.MESSAGE_NAME_CONSTRAINTS));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (categoryKeywords !\u003d null \u0026\u0026 !Category.isValidCategory(categoryKeywords)) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    Category.MESSAGE_CATEGORY_CONSTRAINTS));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            for (String tag : tagKeywords) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                if (!Tag.isValidTagName(tag)) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                            Tag.MESSAGE_TAG_CONSTRAINTS));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (dateKeywords !\u003d null) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            String[] dates \u003d dateKeywords.split(\":\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (dates.length \u003d\u003d 1 \u0026\u0026 !Date.isValidDate(dates[0])) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        Date.DATE_FORMAT_CONSTRAINTS));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (dates.length \u003d\u003d 2 \u0026\u0026 (!Date.isValidDate(dates[0]) || !Date.isValidDate(dates[1]))) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        Date.DATE_FORMAT_CONSTRAINTS));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (dates.length \u003d\u003d 2 \u0026\u0026 new Date(dates[1]).isEalierThan(new Date(dates[0]))) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        MESSAGE_INVALID_RANGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (dates.length \u003e 2) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        MESSAGE_INVALID_DATE_KEYWORDS_FORMAT));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (costKeywords !\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            String[] costs \u003d costKeywords.split(\":\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (costs.length \u003d\u003d 1 \u0026\u0026 !Cost.isValidCost(costs[0])) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        Cost.MESSAGE_COST_CONSTRAINTS));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (costs.length \u003d\u003d 2 \u0026\u0026 (!Cost.isValidCost(costs[0]) || !Cost.isValidCost(costs[1]))) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        Cost.MESSAGE_COST_CONSTRAINTS));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (costs.length \u003d\u003d 2 \u0026\u0026 Double.parseDouble(costs[1]) \u003c Double.parseDouble(costs[0])) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        MESSAGE_INVALID_RANGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (costs.length \u003e 2) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        MESSAGE_INVALID_COST_KEYWORDS_FORMAT));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 31,
      "jcjxwy": 104
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LoginCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_USERNAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Parses input arguments and creates a new LoginCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommandParser implements Parser\u003cLoginCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public LoginCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_USERNAME, PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_USERNAME)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Username username \u003d ParserUtil.parseUsername(argMultimap.getValue(PREFIX_USERNAME).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Optional\u003cString\u003e plainPassword \u003d argMultimap.getValue(PREFIX_PASSWORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (plainPassword.isPresent()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new LoginCommand(username, ParserUtil.parsePassword(plainPassword.get()));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new LoginCommand(username, null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Parses a {@code String category} into a {@code Category}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @throws ParseException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static Category parseCategory(String category) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new ParseException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Parses a {@code String address} into an {@code Cost}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static Cost parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (!Cost.isValidCost(trimmedAddress)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new ParseException(Cost.MESSAGE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return new Cost(trimmedAddress);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Parses a {@code String date} into a {@code Date}."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws ParseException if the given {@code Date} is invalid."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static Date parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!Date.isValidDate(trimmedDate)) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(Date.DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new Date(trimmedDate);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Parses a {@code String Username} into a {@code Username}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws ParseException if the given {@code Username} is invalid."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static Username parseUsername(String username) throws ParseException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(username);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        String trimmedUsername \u003d username.trim();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!Username.isValidName(trimmedUsername)) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(Username.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new Username(trimmedUsername);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Parses a {@code String password} into a {@code Password}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws ParseException if the given {@code Password} is invalid."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static Password parsePassword(String password) throws ParseException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        String trimmedPassword \u003d password.trim();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!Password.isValidPassword(trimmedPassword)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new Password(trimmedPassword, true);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Parses a {@code String hours} into seconds"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param hours Number of hours"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return Number of hours in seconds in long type"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static long parseHours(String hours) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (hours \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        long returnHours \u003d Long.parseLong(hours) * 60 * 60;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (returnHours \u003c 0) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new IllegalArgumentException(\"Number of hours must be more than 0\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return returnHours;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Parses a {@code String minutes} into seconds"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param minutes Number of minutes"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return Number of minutes in seconds in long type"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @throws IllegalArgumentException"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static long parseMinutes(String minutes) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (minutes \u003d\u003d null) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        long returnMinutes \u003d Long.parseLong(minutes) * 60;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (returnMinutes \u003c 0) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new IllegalArgumentException(\"Number of minutes must be more than 0\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return returnMinutes;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Parses a {@code String seconds} into seconds"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param seconds Number of seconds"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return Number of seconds in long type"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static long parseSeconds(String seconds) throws IllegalArgumentException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (seconds \u003d\u003d null) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        long returnSeconds \u003d Long.parseLong(seconds);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (returnSeconds \u003c 0) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new IllegalArgumentException(\"Number of minutes must be more than 0\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return returnSeconds;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 57,
      "winsonhys": 58,
      "-": 93,
      "jcjxwy": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.commands.SetBudgetCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@author winsonhys"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Parses input arguments and creates a new SetBudgetCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class SetBudgetCommandParser implements Parser\u003cSetBudgetCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public SetBudgetCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            Budget budget \u003d new Budget(userInput.trim());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return new SetBudgetCommand(budget);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetPasswordCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_PASSWORD;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_PASSWORD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.arePrefixesPresent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Parses input arguments and creates a new SetPasswordCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SetPasswordCommandParser implements Parser\u003cSetPasswordCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public SetPasswordCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                ArgumentTokenizer.tokenize(userInput, PREFIX_OLD_PASSWORD, PREFIX_NEW_PASSWORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NEW_PASSWORD)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Password newPassword \u003d ParserUtil.parsePassword(argMultimap.getValue(PREFIX_NEW_PASSWORD).get());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Optional\u003cString\u003e oldPassword \u003d argMultimap.getValue(PREFIX_OLD_PASSWORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (oldPassword.isPresent()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new SetPasswordCommand(ParserUtil.parsePassword(oldPassword.get()), newPassword);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new SetPasswordCommand(null, newPassword);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SetRecurringBudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@@author winsonhys"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MINUTES;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECONDS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.commands.SetRecurringBudgetCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Parses input arguments and creates a new SetRecurringBudgetCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class SetRecurringBudgetCommandParser implements Parser\u003cSetRecurringBudgetCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * and returns a SetRecurringBudgetCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param args Arguments to parse"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return A new SetRecurringBudgetCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public SetRecurringBudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_HOURS, PREFIX_MINUTES, PREFIX_SECONDS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (!areAnyPrefixesPresent(argMultimap, PREFIX_HOURS, PREFIX_MINUTES, PREFIX_SECONDS)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                SetRecurringBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            long hours \u003d ParserUtil.parseHours(argMultimap.getValue(PREFIX_HOURS).orElse(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            long minutes \u003d ParserUtil.parseMinutes(argMultimap.getValue(PREFIX_MINUTES).orElse(\"0\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            long seconds \u003d ParserUtil.parseSeconds(argMultimap.getValue(PREFIX_SECONDS).orElse(\"0\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            long totalSecondsToNextRecurrence \u003d hours + minutes + seconds;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return new SetRecurringBudgetCommand(totalSecondsToNextRecurrence);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        } catch (IllegalArgumentException ce) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                SetRecurringBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private static boolean areAnyPrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SignUpCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Parses input arguments and creates a new SignUpCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommandParser implements Parser\u003cSignUpCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public SignUpCommand parse(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Username username \u003d new Username(userInput.trim());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new SignUpCommand(username);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/StatsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MODE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NUMBER_OF_DAYS_OR_MONTHS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@author jonathantjm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Parses input arguments and creates a new StatsCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatsCommandParser implements Parser\u003cStatsCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the LoginCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * and returns an LoginCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public StatsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (args.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            return new StatsCommand();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                    ArgumentTokenizer.tokenize(args, PREFIX_NUMBER_OF_DAYS_OR_MONTHS, PREFIX_MODE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            int numberOfDaysOrMonths \u003d Integer.parseInt(argMultimap.getValue(PREFIX_NUMBER_OF_DAYS_OR_MONTHS).get());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            String mode \u003d argMultimap.getValue(PREFIX_MODE).get();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            return new StatsCommand(numberOfDaysOrMonths, mode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.UniqueExpenseList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Duplicates are not allowed (by .isSameExpense comparison)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected Username username;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected Optional\u003cPassword\u003e password;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final UniqueExpenseList expenses;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private Budget maximumBudget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Creates an empty AddressBook with the given username."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param username the username of the AddressBook"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public AddressBook(Username username, Optional\u003cPassword\u003e password) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.password \u003d password;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.expenses \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.maximumBudget \u003d new Budget(\"28.00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Creates an AddressBook using the Expenses in the {@code toBeCopied}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this(toBeCopied.getUsername(), toBeCopied.getPassword());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.maximumBudget \u003d toBeCopied.getMaximumBudget();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    //// budget operations"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Modifies the maximum budget for the current expense tracker"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget a valid double"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void modifyMaximumBudget(double budget) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.maximumBudget.modifyBudget(budget);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Modifies the maximum budget for the current expense tracker"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget a valid Budget"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void modifyMaximumBudget(Budget budget) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.maximumBudget \u003d budget;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void setRecurrenceFrequency(long seconds) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.maximumBudget.setRecurrenceFrequency(seconds);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    //// list overwrite operaticons"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Replaces the contents of the expense list with {@code expenses}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.expenses.setExpenses(expenses);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenses.forEach(expense -\u003e this.maximumBudget.addExpense(expense.getCost().getCostValue()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.setExpenses(newData.getExpenseList());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.maximumBudget \u003d newData.getMaximumBudget();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    //// expense-level operations"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the address book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return this.expenses.contains(expense);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Adds a expense into the address book"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return true if expense is successfully added withouot exceeding budget, else false"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean addExpense(Expense p) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.expenses.add(p);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.maximumBudget.addExpense(p.getCost().getCostValue());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Replaces the given expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * The expense identity of {@code editedExpense}"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * must not be the same as another existing expense in the address book."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void updateExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(editedExpense);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.expenses.setExpense(target, editedExpense);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.maximumBudget.alterSpending(target, editedExpense);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void removeExpense(Expense key) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenses.remove(key);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.maximumBudget.removeExpense(key);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return new Budget(this.maximumBudget.getBudgetCap(), this.maximumBudget.getCurrentExpenses(),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            this.maximumBudget.getNextRecurrence(), this.maximumBudget.getNumberOfSecondsToRecurAgain());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Username getUsername() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return username;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Optional\u003cPassword\u003e getPassword() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return password;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean isMatchPassword(Password toCheck) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return this.password"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .map(userPassword -\u003e userPassword.equals(toCheck))"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .orElse(true); // If the current user has no password, then anyone is allowed"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void setUsername(Username newUsername) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d newUsername;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return expenses.asUnmodifiableObservableList().size() + \" expenses\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return expenses.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 expenses.equals(((AddressBook) other).expenses))"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                \u0026\u0026 this.maximumBudget.equals(((AddressBook) other).maximumBudget);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return expenses.hashCode();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 33,
      "winsonhys": 36,
      "-": 79,
      "jcjxwy": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    Predicate\u003cExpense\u003e PREDICATE_SHOW_ALL_EXPENSES \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    ReadOnlyAddressBook getAddressBook() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns true if a expense with the same identity as {@code expense} exists in the address book."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    boolean hasExpense(Expense expense) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Deletes the given expense."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * The expense must exist in the address book."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    void deleteExpense(Expense target) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Adds the given expense."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code expense} must not already exist in the address book."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @return true if expense is added without warning, else false."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    boolean addExpense(Expense expense) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Replaces the given expense {@code target} with {@code editedExpense}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * The expense identity of {@code editedExpense}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * must not be the same as another existing expense in the address book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    void updateExpense(Expense target, Expense editedExpense) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /** Returns an unmodifiable view of the filtered expense list */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    ObservableList\u003cExpense\u003e getFilteredExpenseList() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Updates the filter of the filtered expense list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Updates statsMode to the given {@code mode}."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    void updateStatsMode(StatsMode mode);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns statsMode."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    StatsMode getStatsMode();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    boolean canUndoAddressBook() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    boolean canRedoAddressBook() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void undoAddressBook() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void redoAddressBook() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void commitAddressBook() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Selects the AddressBook of the user with the input username to be used. Returns true if successful, false if the"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * input password is incorrect."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    boolean loadUserData(Username username, Password password) throws NonExistentUserException;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Logs out the user in the model."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void unloadUserData();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns true if there is a user with the input username in memory."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    boolean isUserExists(Username username);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Adds a user with the given username and gives him/her an empty AddressBook."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws UserAlreadyExistsException if a user with the given username already exists"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void addUser(Username username) throws UserAlreadyExistsException;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns true if a user has been selected to be used. i.e Already logged in"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    boolean hasSelectedUser();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /** Returns an unmodifiable view of the expense stats*/"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseStats() throws NoUserSelectedException;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Updates the expense stats"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    void updateExpenseStats(Predicate\u003cExpense\u003e predicate) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Modifies the existing maximum budget for the current user"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    void modifyMaximumBudget(Budget budget) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Returns the existing maximum budget for the current user"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    Budget getMaximumBudget();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Sets the budget to reset and store spending data after a certain amount of time"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param seconds The recurrence frequency"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    void setRecurrenceFrequency(long seconds) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns a copy of this model."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Model copy(UserPrefs userPrefs) throws NonExistentUserException, NoUserSelectedException;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void setPassword(Password password) throws NoUserSelectedException;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 3,
      "jonathantjm": 16,
      "JasonChong96": 46,
      "winsonhys": 14,
      "-": 56,
      "jcjxwy": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import javafx.collections.transformation.SortedList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.commons.events.model.UserLoggedInEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private FilteredList\u003cExpense\u003e filteredExpenses;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Username username;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private StatsMode statsMode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private Predicate\u003cExpense\u003e expenseStatPredicate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final Map\u003cUsername, ReadOnlyAddressBook\u003e addressBooks;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Initializes a ModelManager with the given addressBooks and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ModelManager(Map\u003cUsername, ReadOnlyAddressBook\u003e addressBooks, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireAllNonNull(addressBooks, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.addressBooks \u003d addressBooks;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBooks + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d null;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.versionedAddressBook \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.filteredExpenses \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Map\u003cUsername, ReadOnlyAddressBook\u003e addressBooks \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBooks + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.addressBooks \u003d addressBooks;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.addressBooks.put(addressBook.getUsername(), addressBook);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d addressBook.getUsername();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.versionedAddressBook \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.filteredExpenses \u003d null;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            loadUserData(addressBook.getUsername(), addressBook.getPassword().orElse(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (NonExistentUserException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new IllegalStateException();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this(new HashMap\u003c\u003e(), new UserPrefs());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        addressBooks.replace(this.username, this.versionedAddressBook);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.versionedAddressBook;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected void indicateAddressBookChanged() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean hasExpense(Expense expense) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(expense);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return versionedAddressBook.hasExpense(expense);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void deleteExpense(Expense target) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        versionedAddressBook.removeExpense(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean addExpense(Expense expense) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        boolean budgetNotExceeded \u003d versionedAddressBook.addExpense(expense);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return budgetNotExceeded;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void updateExpense(Expense target, Expense editedExpense) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        versionedAddressBook.updateExpense(target, editedExpense);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Expense List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ObservableList\u003cExpense\u003e getFilteredExpenseList() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (filteredExpenses \u003d\u003d null) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredExpenses);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (filteredExpenses \u003d\u003d null) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        filteredExpenses.setPredicate(predicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean canUndoAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void undoAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void redoAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void commitAddressBook() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    //@author winsonhys"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Budget \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void modifyMaximumBudget(Budget budget) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.versionedAddressBook.modifyMaximumBudget(budget);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void setRecurrenceFrequency(long seconds) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.versionedAddressBook.setRecurrenceFrequency(seconds);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.versionedAddressBook.getMaximumBudget();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author jonathantjm"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Stats \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Expense} backed by the internal list of"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * {@code versionedAddressBook}, filtered by {@code expenseStatPredicate} and sorted by expense date."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public ObservableList\u003cExpense\u003e getExpenseStats() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (this.filteredExpenses \u003d\u003d null) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        FilteredList\u003cExpense\u003e filteredList \u003d new FilteredList\u003c\u003e(versionedAddressBook.getExpenseList());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        filteredList.setPredicate(expenseStatPredicate);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        SortedList\u003cExpense\u003e sortedList \u003d new SortedList\u003c\u003e(filteredList);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Comparator\u003cExpense\u003e byDate \u003d (Expense a, Expense b) -\u003e (-1 * Date.compare(a.getDate(), b.getDate()));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        sortedList.setComparator(byDate);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return FXCollections.unmodifiableObservableList(sortedList);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void updateExpenseStats(Predicate\u003cExpense\u003e predicate) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (filteredExpenses \u003d\u003d null) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        expenseStatPredicate \u003d predicate;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void updateStatsMode(StatsMode mode) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        this.statsMode \u003d mode;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public StatsMode getStatsMode() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return this.statsMode;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    //@@author JasonChong96"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Login \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean loadUserData(Username username, Password password) throws NonExistentUserException {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!isUserExists(username)) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NonExistentUserException(username, addressBooks.size());"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!addressBooks.get(username).isMatchPassword(password)) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (hasSelectedUser()) {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            addressBooks.replace(this.username, this.versionedAddressBook);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.versionedAddressBook \u003d new VersionedAddressBook(addressBooks.get(username));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.filteredExpenses \u003d new FilteredList\u003c\u003e(versionedAddressBook.getExpenseList());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d username;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            indicateUserLoggedIn();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            indicateAddressBookChanged();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            checkBudgetRestart();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (NoUserSelectedException nuse) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new IllegalStateException(nuse.getMessage());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void unloadUserData() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.versionedAddressBook \u003d null;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.filteredExpenses \u003d null;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d null;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean isUserExists(Username toCheck) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return addressBooks.containsKey(toCheck);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /** Raises an event to indicate the user has logged in and has been processed by the model*/"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected void indicateUserLoggedIn() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (this.username \u003d\u003d null) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        raise(new UserLoggedInEvent(this.username));"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Checks if budget is required to restart due to recurrence"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected void checkBudgetRestart() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.versionedAddressBook.getMaximumBudget().checkBudgetRestart();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Model copy(UserPrefs userPrefs) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        ModelManager copy \u003d new ModelManager(addressBooks, userPrefs);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        copy.versionedAddressBook \u003d new VersionedAddressBook(this.getAddressBook());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        copy.filteredExpenses \u003d new FilteredList\u003c\u003e(copy.versionedAddressBook.getExpenseList());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        copy.username \u003d this.username;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void addUser(Username newUsername) throws UserAlreadyExistsException {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (addressBooks.putIfAbsent(newUsername, new AddressBook(newUsername, Optional.empty())) !\u003d null) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new UserAlreadyExistsException(newUsername);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean hasSelectedUser() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return versionedAddressBook !\u003d null \u0026\u0026 filteredExpenses !\u003d null \u0026\u0026 username !\u003d null;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void setPassword(Password password) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (this.versionedAddressBook \u003d\u003d null) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new NoUserSelectedException();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        versionedAddressBook.password \u003d Optional.ofNullable(password);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        addressBooks.replace(this.username, this.versionedAddressBook);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 filteredExpenses.equals(other.filteredExpenses);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 47,
      "JasonChong96": 148,
      "winsonhys": 24,
      "-": 115,
      "jcjxwy": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an unmodifiable view of the expenses list."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * This list will not contain any duplicate expenses."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    ObservableList\u003cExpense\u003e getExpenseList();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    Budget getMaximumBudget();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    Username getUsername();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Optional\u003cPassword\u003e getPassword();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Checks if the input password matches the password of the current user. If the user has no password, then true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * is returned."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param password the password to check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @return true if the user has no password or if the input password matches his/her password, or else false"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    boolean isMatchPassword(Password password);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 13,
      "winsonhys": 3,
      "-": 13,
      "jcjxwy": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Path addressBookDirPath \u003d Paths.get(\"data\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        setGuiSettings(900, 800, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Path getAddressBookDirPath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return addressBookDirPath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void setAddressBookDirPath(Path addressBookDirPath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.addressBookDirPath \u003d addressBookDirPath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookDirPath, o.addressBookDirPath);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return Objects.hash(guiSettings, addressBookDirPath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookDirPath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code AddressBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBook extends AddressBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cReadOnlyAddressBook\u003e addressBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public VersionedAddressBook(ReadOnlyAddressBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves a copy of the current {@code AddressBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.add(new AddressBook(this));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStateList.subList(currentStatePointer + 1, addressBookStateList.size()).clear();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previous state."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the address book to its previously undone state."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(addressBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code undo()} has address book states to undo."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code redo()} has address book states to redo."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return currentStatePointer \u003c addressBookStateList.size() - 1;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof VersionedAddressBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook otherVersionedAddressBook \u003d (VersionedAddressBook) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return super.equals(otherVersionedAddressBook)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 addressBookStateList.equals(otherVersionedAddressBook.addressBookStateList)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedAddressBook.currentStatePointer;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at start of addressBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Current state pointer at end of addressBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 1,
      "-": 109
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Budget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@@author winsonhys"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Represents maximum budget of an expense tracker"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, mutable."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_BUDGET_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \"Cost should only take values in the following format: {int}.{digit}{digit}\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String MESSAGE_NEXT_MONTH \u003d String.format(\"It is the end of the month. Please set a new \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        + \"budget\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String BUDGET_VALIDATION_REGEX \u003d \"(\\\\d+).(\\\\d)(\\\\d)\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private double budgetCap;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private double currentExpenses;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private LocalDateTime nextRecurrence;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private long numberOfSecondsToRecurAgain;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Constructs a {@code Budget}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget a valid double"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget(String budget) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        checkArgument(isValidBudget(budget), BUDGET_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d Double.parseDouble(budget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.nextRecurrence \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.numberOfSecondsToRecurAgain \u003d 50000;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d 0.0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Constructs a {@code Budget} with modified current expenses and recurrence"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param currentExpenses"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param nextRecurrence"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param numberOfSecondsToRecurAgain"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget(double budget, double currentExpenses, LocalDateTime nextRecurrence,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                  long numberOfSecondsToRecurAgain) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d budget;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d currentExpenses;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.nextRecurrence \u003d nextRecurrence;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.numberOfSecondsToRecurAgain \u003d numberOfSecondsToRecurAgain;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Constructs a {@code Budget} with modified current expenses"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param currentExpenses"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget(double budget, double currentExpenses) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d budget;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d currentExpenses;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.nextRecurrence \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.numberOfSecondsToRecurAgain \u003d 50000;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Returns true if a given string is a valid budget."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static boolean isValidBudget(String test) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return test.matches(BUDGET_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Modifies the current (@code Budget) to have a new value"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param budget a valid double"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void modifyBudget(double budget) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d budget;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Returns the current date in which the budget is created"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return a LocalDate object that consists of the most recent timestamp."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public LocalDateTime getNextRecurrence() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.nextRecurrence;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Attemps to add expense"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param expense a valid expense of type double"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @return true if expense is successfully added, false if adding expense will result in budget exceeding."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public boolean addExpense(double expense) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses +\u003d expense;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.currentExpenses \u003c\u003d this.budgetCap;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Sets the recurrence frequency"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param seconds Number of seconds to recur again"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void setRecurrenceFrequency(long seconds) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.numberOfSecondsToRecurAgain \u003d seconds;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (this.nextRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            this.nextRecurrence \u003d LocalDateTime.now().plusSeconds(seconds);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void removeExpense(Expense expense) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses -\u003d expense.getCost().getCostValue();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Resets the total expense to 0"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void clearSpending() {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d 0;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Alters the current total expense"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param target valid expense in spending to be removed"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param editedExpense new expense to be added"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void alterSpending(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses -\u003d target.getCost().getCostValue();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses +\u003d editedExpense.getCost().getCostValue();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public double getBudgetCap() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.budgetCap;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public double getCurrentExpenses() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.currentExpenses;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public long getNumberOfSecondsToRecurAgain() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.numberOfSecondsToRecurAgain;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public boolean equals(Object budget) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Budget anotherBudget \u003d (Budget) budget;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return this.currentExpenses \u003d\u003d anotherBudget.currentExpenses"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            \u0026\u0026 this.budgetCap \u003d\u003d anotherBudget.budgetCap"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            \u0026\u0026 this.numberOfSecondsToRecurAgain \u003d\u003d anotherBudget.numberOfSecondsToRecurAgain;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return String.format(\"$%f\", this.budgetCap);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Updates the current budget with the new budget if it is the start of a new month. Does nothing if not"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void checkBudgetRestart() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (this.nextRecurrence \u003d\u003d null) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            //TODO: Notifies user that budget recurrence has not been set"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            logger.info(\"Recurrence has not been set\");"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (LocalDateTime.now().isAfter(this.nextRecurrence)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            this.nextRecurrence \u003d LocalDateTime.now().plusSeconds(this.numberOfSecondsToRecurAgain);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            this.clearSpending();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            //TODO: Notifies user that budget has been restarted"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            logger.info(\"Budget has been restarted\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 193
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NoUserSelectedException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents an error where no user is logged in is encountered by the model."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class NoUserSelectedException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public NoUserSelectedException(String desc) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(desc);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public NoUserSelectedException() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(\"Not logged into any user.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/NonExistentUserException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents an error where a user with the given username does not exist in the model is encountered."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class NonExistentUserException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public NonExistentUserException(Username username, int numUsers) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(\"The user \\\"\" + username + \"\\\" does not exist. Num of users: \" + numUsers);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/exceptions/UserAlreadyExistsException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents an error where a user with the given username already exists in the model is encountered."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class UserAlreadyExistsException extends Exception {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public UserAlreadyExistsException(Username username) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        super(\"The user \\\"\" + username + \"\\\" already exists exist.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Represents a Expense\u0027s category in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCategory(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_CATEGORY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            \"Category name should not be blank. It should be alphanumeric.\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String CATEGORY_VALIDATION_REGEX \u003d \"[a-zA-Z0-9][a-zA-Z0-9 ]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public final String categoryName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Constructs a {@code Category}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @param category A valid category number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Category(String category) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        checkArgument(isValidCategory(category), MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        categoryName \u003d category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return test.matches(CATEGORY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return categoryName;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 categoryName.equals(((Category) other).categoryName)); // state check"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return categoryName.hashCode();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjxwy": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Cost.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Represents a Expense\u0027s cost in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCost(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class Cost {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_COST_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            \"Cost should only take values in the following format: {int}.{digit}{digit}\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String COST_VALIDATION_REGEX \u003d \"(\\\\d+).(\\\\d)(\\\\d)\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Constructs an {@code Cost}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param cost A valid cost."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Cost(String cost) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        requireNonNull(cost);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        checkArgument(isValidCost(cost), MESSAGE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        value \u003d cost;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Returns true if a given string is a valid cost."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static boolean isValidCost(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return test.matches(COST_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public double getCostValue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return Double.parseDouble(this.value);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                || (other instanceof Cost // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                \u0026\u0026 value.equals(((Cost) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 19,
      "-": 40,
      "jcjxwy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Date.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Represents the date the Expense was added into the Expense tracker."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidDate(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class Date {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String DATE_FORMAT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            \"Date should be valid. Format dd-MM-yyyy\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String DATE_VALIDATION_REGEX \u003d \"(\\\\d{1,2})(\\\\-)(\\\\d{1,2})(\\\\-)(\\\\d{4})\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public final Calendar fullDate \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Constructs a {@code Date}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @param date A valid date."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public Date(String date) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        checkArgument(isValidDate(date), DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        String [] parsedDate \u003d date.split(\"-\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        fullDate.set(Integer.parseInt(parsedDate[2]),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                Integer.parseInt(parsedDate[1]) - 1,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                Integer.parseInt(parsedDate[0]));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Constructs a {@code Date} with current date."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public Date() {}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * return true is the given date is in the valid format."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static boolean isValidDate(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (test.matches(DATE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            Calendar date \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            String [] parsedDate \u003d test.split(\"-\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            date.setLenient(false);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            date.set(Integer.parseInt(parsedDate[2]),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                    Integer.parseInt(parsedDate[1]) - 1,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                    Integer.parseInt(parsedDate[0]));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                date.getTime();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            } catch (Exception e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * return true if {@code this} is earlier than {@param other}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    //@@author Jiang Chen"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean isEalierThan(Date other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int thisYear \u003d this.fullDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int otherYear \u003d other.fullDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (thisYear \u003c otherYear) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (thisYear \u003e otherYear) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int thisMonth \u003d this.fullDate.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int otherMonth \u003d other.fullDate.get(Calendar.MONTH);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (thisMonth \u003c otherMonth) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (thisMonth \u003e otherMonth) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int thisDay \u003d this.fullDate.get(Calendar.DAY_OF_YEAR);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int otherDay \u003d other.fullDate.get(Calendar.DAY_OF_YEAR);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (thisDay \u003c otherDay) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (thisDay \u003e otherDay) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        SimpleDateFormat dateFormat \u003d new SimpleDateFormat(\"dd-MM-yyyy\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return dateFormat.format(fullDate.getTime());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns true if both Dates represent the same calendar date."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!(other instanceof Date)) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Date otherDate \u003d (Date) other;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return fullDate.get(Calendar.DAY_OF_YEAR) \u003d\u003d otherDate.fullDate.get(Calendar.DAY_OF_YEAR)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                \u0026\u0026 fullDate.get(Calendar.MONTH) \u003d\u003d otherDate.fullDate.get(Calendar.MONTH)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 fullDate.get(Calendar.YEAR) \u003d\u003d otherDate.fullDate.get(Calendar.YEAR);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @param a - First Date to compare"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @param b - Second Date to compare"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * @return 1 if b is after a, -1 if b is before a and 0 if they are equal"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static int compare(Date a, Date b) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (a.equals(b)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            return 0;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        } else if (b.fullDate.after(a.fullDate)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            return 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return -1;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 19,
      "jonathantjm": 83,
      "jcjxwy": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Expense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Represents a Expense in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class Expense {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Date date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Category category;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Cost cost;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Expense(Name name, Category category, Cost cost, Date date, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireAllNonNull(name, category, cost, date, tags);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Expense(Name name, Category category, Cost cost, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this(name, category, cost, new Date(), tags);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Category getCategory() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return category;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Cost getCost() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return cost;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Date getDate() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns true if both expenses of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * This defines a weaker notion of equality between two expenses."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean isSameExpense(Expense otherExpense) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (otherExpense \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return otherExpense !\u003d null"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 otherExpense.getName().equals(this.getName())"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 (otherExpense.getCategory().equals(this.getCategory())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                || otherExpense.getCost().equals(this.getCost()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns true if both expenses have the same identity and data fields."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * This defines a stronger notion of equality between two expenses."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!(other instanceof Expense)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense otherExpense \u003d (Expense) other;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return otherExpense.getName().equals(getName())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 otherExpense.getCategory().equals(getCategory())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 otherExpense.getCost().equals(getCost())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 otherExpense.getDate().equals(getDate())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 otherExpense.getTags().equals(getTags());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return Objects.hash(name, category, cost, tags);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .append(getCategory())"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .append(\" Cost: \")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .append(getCost())"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .append(\" Date: \")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .append(getDate())"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 9,
      "jcjxwy": 121
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/ExpenseContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Tests that a {@code Expense}\u0027s {@code Name, Category, Cost, Date, Tag} matches all of the keywords given."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "//@@Author Jiang Chen"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpenseContainsKeywordsPredicate implements Predicate\u003cExpense\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final ArgumentMultimap keywords;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseContainsKeywordsPredicate(ArgumentMultimap keywords) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean test(Expense expense) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String nameKeywords \u003d keywords.getValue(PREFIX_NAME).orElse(\"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String categoryKeywords \u003d keywords.getValue(PREFIX_CATEGORY).orElse(\"\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cString\u003e tagKeywords \u003d keywords.getAllValues(PREFIX_TAG);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String dateKeywords \u003d keywords.getValue(PREFIX_DATE).orElse(\"\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String costKeywords \u003d keywords.getValue(PREFIX_COST).orElse(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //if all keywords are absent, return false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (nameKeywords.equals(\"\") \u0026\u0026 categoryKeywords.equals(\"\") \u0026\u0026 tagKeywords.isEmpty()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 dateKeywords.equals(\"\") \u0026\u0026 costKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //if one or more keywords are present"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        boolean result \u003d true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!nameKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            List\u003cString\u003e splitNameKeywords \u003d Arrays.asList(nameKeywords.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            result \u003d result \u0026\u0026 splitNameKeywords.stream()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(expense.getName().expenseName, keyword));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!categoryKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            List\u003cString\u003e separatedCategoryKeywords \u003d Arrays.asList(categoryKeywords.trim().split(\"\\\\s+\"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            result \u003d result \u0026\u0026 separatedCategoryKeywords.stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                            expense.getCategory().categoryName, keyword));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!costKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            String[] splitCost \u003d costKeywords.split(\":\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (splitCost.length \u003d\u003d 1) { //if the user enters a particular cost"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                double chosenCost \u003d Double.parseDouble(splitCost[0]);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                result \u003d result \u0026\u0026 expense.getCost().getCostValue() \u003d\u003d chosenCost;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            } else { //if the user enters a range of dates"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                double lowerBound \u003d Double.parseDouble(splitCost[0]);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                double higherBound \u003d Double.parseDouble(splitCost[1]);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                result \u003d result \u0026\u0026 (lowerBound \u003c\u003d expense.getCost().getCostValue()"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        \u0026\u0026 expense.getCost().getCostValue() \u003c\u003d higherBound);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!dateKeywords.equals(\"\")) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            String[] splitDate \u003d dateKeywords.split(\":\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (splitDate.length \u003d\u003d 1) { //if the user only enter a particular date"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                Date chosenDate \u003d new Date(splitDate[0]);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                result \u003d result \u0026\u0026 expense.getDate().equals(chosenDate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            } else { //if the user enter a range of dates"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                Date start \u003d new Date(splitDate[0]);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                Date end \u003d new Date(splitDate[1]);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                result \u003d result \u0026\u0026 (start.equals(expense.getDate())"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        || end.equals(expense.getDate())"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        || (start.isEalierThan(expense.getDate()) \u0026\u0026 expense.getDate().isEalierThan(end)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!tagKeywords.isEmpty()) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            List\u003cString\u003e separatedTagKeywordsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            for (String tag : tagKeywords) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                separatedTagKeywordsList.addAll(Arrays.asList(tag.split(\"\\\\s+\")));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            result \u003d result"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    \u0026\u0026 tagKeywords.stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    .anyMatch(keyword -\u003e expense.getTags().stream()"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    .anyMatch(tag -\u003e StringUtil.containsWordIgnoreCase(tag.tagName, keyword)));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                || (other instanceof ExpenseContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 keywords.equals(((ExpenseContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjxwy": 112
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Represents a Expense\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            \"Names should not be blank. It should be alphanumeric.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[a-zA-Z0-9][a-zA-Z0-9 ]+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public final String expenseName;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        expenseName \u003d name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return expenseName;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                \u0026\u0026 expenseName.equals(((Name) other).expenseName)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return expenseName.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 5,
      "winsonhys": 1,
      "-": 50,
      "jcjxwy": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/UniqueExpenseList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * A list of expenses that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * A expense is considered unique by comparing using {@code Expense#isSameExpense(Expense)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * As such, adding and updating of expenses uses Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * for equality so as to ensure that the expense being added or updated is"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * unique in terms of identity in the UniqueExpenseList."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * However, the removal of a expense uses Expense#equals(Object) so as to ensure that the expense"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * with exactly the same fields will be removed."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * @see Expense#isSameExpense(Expense)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class UniqueExpenseList implements Iterable\u003cExpense\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final ObservableList\u003cExpense\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns true if the list contains an equivalent expense as the given argument."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean contains(Expense toCheck) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return internalList.stream().anyMatch(toCheck::isSameExpense);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Adds a expense to the list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * The expense must not already exist in the list."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void add(Expense toAdd) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Replaces the expense {@code target} in the list with {@code editedExpense}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code target} must exist in the list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * The expense identity of {@code editedExpense} must not be the same as another existing expense in the list."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireAllNonNull(target, editedExpense);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!target.isSameExpense(editedExpense) \u0026\u0026 contains(editedExpense)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        internalList.set(index, editedExpense);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Removes the equivalent expense from the list."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * The expense must exist in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void remove(Expense toRemove) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!internalList.remove(toRemove)) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new ExpenseNotFoundException();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses(UniqueExpenseList replacement) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Replaces the contents of this list with {@code expenses}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code expenses} must not contain duplicate expenses."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        requireAllNonNull(expenses);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!expensesAreUnique(expenses)) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new DuplicateExpenseException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        internalList.setAll(expenses);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ObservableList\u003cExpense\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Iterator\u003cExpense\u003e iterator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                || (other instanceof UniqueExpenseList // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        \u0026\u0026 internalList.equals(((UniqueExpenseList) other).internalList));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns true if {@code expenses} contains only unique expenses."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private boolean expensesAreUnique(List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.size() - 1; i++) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            for (int j \u003d i + 1; j \u003c expenses.size(); j++) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                if (expenses.get(i).isSameExpense(expenses.get(j))) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjxwy": 137
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/DuplicateExpenseException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Signals that the operation will result in duplicate"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Expenses (Expenses are considered duplicates if they have the same identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class DuplicateExpenseException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public DuplicateExpenseException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        super(\"Operation would result in duplicate expenses\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjxwy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/expense/exceptions/ExpenseNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.model.expense.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Signals that the operation is unable to find the specified expense."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpenseNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "jcjxwy": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Password.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.nio.charset.StandardCharsets;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import com.google.common.hash.Hashing;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents the Password of a user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPassword(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class Password {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_PASSWORD_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            \"Passwords cannot contain spaces and must be at least 6 characters long\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final String PASSWORD_VALIDATION_REGEX \u003d \"^\\\\w{5,}[^\\\\s]+$\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final String passwordHash;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs a {@code Password}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param password A valid password or password hash."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param isPlainText true if the input password is in plain text, false if it\u0027s already been hashed"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Password(String password, boolean isPlainText) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(password);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (isPlainText) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            checkArgument(isValidPassword(password), MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            this.passwordHash \u003d Hashing.sha256().hashString(password, StandardCharsets.UTF_8).toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            this.passwordHash \u003d password;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static boolean isValidPassword(String test) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return !test.isEmpty() \u0026\u0026 test.matches(PASSWORD_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return passwordHash;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof Password // instanceof handles nulls"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 passwordHash.equals(((Password) other).passwordHash)); // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return passwordHash.hashCode();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/user/Username.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Represents the Username of a user."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class Username implements Comparable\u003cUsername\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            \"Names cannot contain any of these characters: \\\" \u003e \u003c : \\\\ / | ? *\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Username cannot contain any of the following characters : \" \u003e \u003c : \\ / | ? *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final String USERNAME_VALIDATION_REGEX \u003d \".*[/\\\\\\\\:*?\\\"\u003c\u003e|].*\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs a {@code Username}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Username(String name) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return !test.isEmpty() \u0026\u0026 !test.matches(USERNAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                || (other instanceof Username // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \u0026\u0026 name.equalsIgnoreCase(((Username) other).name)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return name.toLowerCase().hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public int compareTo(Username o) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return String.CASE_INSENSITIVE_ORDER.compare(this.name, o.name);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static Expense[] getSampleExpenses() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new Expense[] {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            new Expense(new Name(\"Alex Yeoh\"), new Category(\"School\"),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                new Cost(\"1.00\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            new Expense(new Name(\"Bernice Yu\"), new Category(\"Food\"),"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                new Cost(\"2.00\"),"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            new Expense(new Name(\"Charlotte Oliveiro\"), new Category(\"Entertainment\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                new Cost(\"3.50\"), new Date(\"01-09-2018\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            new Expense(new Name(\"David Li\"), new Category(\"Shopping\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                new Cost(\"4.00\"), new Date(\"01-08-2018\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"family\")),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            new Expense(new Name(\"Irfan Ibrahim\"), new Category(\"Tax\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                new Cost(\"9.00\"), new Date(\"5-08-2018\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            new Expense(new Name(\"Roy Balakrishnan\"), new Category(\"Book\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "                new Cost(\"10.00\"), new Date(\"4-07-2018\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"colleagues\"))"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook(new Username(\"sample\"), Optional.empty());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (Expense sampleExpense : getSampleExpenses()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            sampleAb.addExpense(sampleExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Tag::new)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 3,
      "jonathantjm": 9,
      "winsonhys": 1,
      "-": 38,
      "jcjxwy": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/ExpensesStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public interface ExpensesStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Path getExpensesDirPath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readExpenses() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @see #getExpensesDirPath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readExpenses(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void saveExpenses(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @see #saveExpenses(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void saveExpenses(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Backup the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void backupExpenses(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @see #backupExpenses(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void backupExpenses(ReadOnlyAddressBook addressBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 20,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public interface Storage extends ExpensesStorage, UserPrefsStorage {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Path getExpensesDirPath();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readExpenses() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns all AddressBook data as a map with String keys and {@link ReadOnlyAddressBook} values. Data is read"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * from the input dirPath."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Creates the directory at the given path if does not exists."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param dirPath cannot be null"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    Map\u003cUsername, ReadOnlyAddressBook\u003e readAllExpenses(Path dirPath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    void saveExpenses(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Creates the data file if it is missing."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 15,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.TreeMap;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private ExpensesStorage expensesStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public StorageManager(ExpensesStorage expensesStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.expensesStorage \u003d expensesStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Path getExpensesDirPath() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return expensesStorage.getExpensesDirPath();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readExpenses() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return readExpenses(expensesStorage.getExpensesDirPath());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readExpenses(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return expensesStorage.readExpenses(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Map\u003cUsername, ReadOnlyAddressBook\u003e readAllExpenses(Path dirPath) throws DataConversionException,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        File dir \u003d new File(dirPath.toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        final Map\u003cUsername, ReadOnlyAddressBook\u003e books \u003d new TreeMap\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        File[] directoryListing \u003d dir.listFiles();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!dir.mkdir()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            if (directoryListing !\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                for (File child : directoryListing) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    readExpenses(Paths.get(child.getPath())).ifPresent("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        addressBook -\u003e books.put(new Username(child.getName().replace(\".xml\", \"\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                                addressBook));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return books;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void saveExpenses(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Path path \u003d Paths.get(expensesStorage.getExpensesDirPath().toString(),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                addressBook.getUsername().toString() + \".xml\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        saveExpenses(addressBook, path);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void saveExpenses(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        expensesStorage.saveExpenses(addressBook, filePath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void backupExpenses(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        backupExpenses(addressBook, expensesStorage.getExpensesDirPath());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void backupExpenses(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        logger.fine(\"Attempting to write backup of: \" + filePath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        expensesStorage.backupExpenses(addressBook, filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            saveExpenses(event.data);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 46,
      "-": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedBudget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.storage.storageutil.LocalDateTimeAdapter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@author winsonhys"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * JAXB-friendly adapted version of the Budget."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class XmlAdaptedBudget {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private double budgetCap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private double currentExpenses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @XmlJavaTypeAdapter(value \u003d LocalDateTimeAdapter.class)"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private LocalDateTime nextRecurrence;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private long numberOfSecondsToRecurAgain;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Constructs an XmlAdaptedBudget."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public XmlAdaptedBudget() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Converts a given Budget into this class for JAXB use."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * @param source source budget"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public XmlAdaptedBudget(Budget source) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budgetCap \u003d source.getBudgetCap();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.currentExpenses \u003d source.getCurrentExpenses();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.nextRecurrence \u003d source.getNextRecurrence();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.numberOfSecondsToRecurAgain \u003d source.getNumberOfSecondsToRecurAgain();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public Budget toModelType() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return new Budget(this.budgetCap, currentExpenses, this.nextRecurrence, this.numberOfSecondsToRecurAgain);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedExpense.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * JAXB-friendly version of the Expense."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class XmlAdaptedExpense {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Expense\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private String cost;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private String date;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Constructs an XmlAdaptedExpense."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public XmlAdaptedExpense() {}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Constructs an {@code XmlAdaptedExpense} with the given expense details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public XmlAdaptedExpense(String name, String category, String cost, String date, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.cost \u003d cost;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Converts a given Expense into this class for JAXB use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedExpense"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public XmlAdaptedExpense(Expense source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        name \u003d source.getName().expenseName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        category \u003d source.getCategory().categoryName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        cost \u003d source.getCost().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        date \u003d source.getDate().toString();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Converts this jaxb-friendly adapted expense object into the model\u0027s Expense object."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Expense toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final List\u003cTag\u003e expenseTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expenseTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (category \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!Category.isValidCategory(category)) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final Category modelCategory \u003d new Category(category);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (cost \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (!Cost.isValidCost(cost)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new IllegalValueException(Cost.MESSAGE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        final Cost modelCost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (date \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName()));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!Date.isValidDate(date)) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new IllegalValueException(Date.DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        final Date modelDate \u003d new Date(date);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(expenseTags);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new Expense(modelName, modelCategory, modelCost, modelDate, modelTags);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!(other instanceof XmlAdaptedExpense)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense otherExpense \u003d (XmlAdaptedExpense) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return Objects.equals(name, otherExpense.name)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 Objects.equals(category, otherExpense.category)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 Objects.equals(cost, otherExpense.cost)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 Objects.equals(date, otherExpense.date)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 tagged.equals(otherExpense.tagged);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "JasonChong96": 14,
      "winsonhys": 9,
      "-": 79,
      "jcjxwy": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPassword.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * JAXB-friendly adapted version of the Password."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlAdaptedPassword {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private String password;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs an XmlAdaptedPassword."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedPassword() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs a {@code XmlAdaptedPassword} with the given {@code passwordHash}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedPassword(String passwordHash) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.password \u003d passwordHash;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Converts a given Password into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedPassword(Password source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.password \u003d source.toString();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Password object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Password toModelType() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new Password(password, false);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!(other instanceof XmlAdaptedPassword)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return password.equals(((XmlAdaptedPassword) other).password);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Tag into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 61,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedUsername.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * JAXB-friendly adapted version of the Username."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlAdaptedUsername {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private String userName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs an XmlAdapterUsername."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedUsername() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Constructs a {@code XmlAdaptedUsername} with the given {@code userName}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedUsername(String userName) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.userName \u003d userName;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Converts a given Username into this class for JAXB use."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlAdaptedUsername(Username source) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        userName \u003d source.toString();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Converts this jaxb-friendly adapted Username object into the model\u0027s Username object."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted expense"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Username toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!Username.isValidName(userName)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new IllegalValueException(Username.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new Username(userName);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        if (!(other instanceof XmlAdaptedUsername)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return userName.equalsIgnoreCase(((XmlAdaptedUsername) other).userName);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlExpensesStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlExpensesStorage implements ExpensesStorage {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlExpensesStorage.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Path backupFilePath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public XmlExpensesStorage(Path filePath) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.backupFilePath \u003d Paths.get(filePath.toString() + \".backup\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Path getExpensesDirPath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readExpenses() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return readExpenses(filePath);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Similar to {@link #readExpenses()}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readExpenses(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveFile(filePath);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Optional\u003cAddressBook\u003e addressBookOptional \u003d Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Username fileName \u003d new Username(filePath.getFileName().toString().replace(\".xml\", \"\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            addressBookOptional.ifPresent(addressBook -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                if (!fileName.equals(addressBook.getUsername())) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    logger.info(\"File name does not match username. Changing username to \\\"\" + fileName + \"\\\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    addressBook.setUsername(fileName);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            });"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return addressBookOptional.map(addressBook -\u003e addressBook); // Typecast to Optional\u003cReadOnlyAddressBook\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void saveExpenses(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        saveExpenses(addressBook, filePath);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Similar to {@link #saveExpenses(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void saveExpenses(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void backupExpenses(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        backupExpenses(addressBook, backupFilePath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Similar to {@link #backupExpenses(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void backupExpenses(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlFileStorage.saveDataToFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 42,
      "winsonhys": 1,
      "-": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void saveDataToFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 1,
      "-": 39
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_EXPENSE \u003d \"Expenses list contains duplicate expense(s).\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private List\u003cXmlAdaptedExpense\u003e expenses;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private XmlAdaptedUsername username;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private XmlAdaptedBudget budget;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private XmlAdaptedPassword password;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenses \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.username \u003d new XmlAdaptedUsername(src.getUsername());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        this.password \u003d src.getPassword().map(XmlAdaptedPassword::new).orElse(null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenses.addAll(src.getExpenseList().stream().map(XmlAdaptedExpense::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.budget \u003d new XmlAdaptedBudget(src.getMaximumBudget());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this addressbook into the model\u0027s {@code AddressBook} object."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code XmlAdaptedExpense}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Optional\u003cPassword\u003e passwordOptional \u003d Optional.ofNullable(password).map(XmlAdaptedPassword::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        AddressBook addressBook \u003d new AddressBook(username.toModelType(), passwordOptional);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (XmlAdaptedExpense p : expenses) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            Expense expense \u003d p.toModelType();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (addressBook.hasExpense(expense)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            addressBook.addExpense(expense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        if (this.budget !\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            addressBook.modifyMaximumBudget(this.budget.toModelType());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlSerializableAddressBook)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return expenses.equals(((XmlSerializableAddressBook) other).expenses);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 10,
      "winsonhys": 5,
      "-": 59,
      "jcjxwy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/storageutil/LocalDateTimeAdapter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.storage.storageutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import javax.xml.bind.annotation.adapters.XmlAdapter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * XmlAdapter that adapts a string to LocalDateTime and back."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class LocalDateTimeAdapter extends XmlAdapter\u003cString, LocalDateTime\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public LocalDateTime unmarshal(String v) throws Exception {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return LocalDateTime.parse(v);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public String marshal (LocalDateTime v) throws Exception {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return v.toString();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "winsonhys": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.animation.KeyFrame;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.animation.KeyValue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.animation.Timeline;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.event.EventHandler;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.util.Duration;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.UpdateBudgetPanelEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Panel containing the budget information."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class BudgetPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"BudgetPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final double ANIMATION_TIME \u003d 0.5;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final double NUM_OF_FRAMES \u003d 10;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final double TIME_OF_KEY_FRAMES \u003d ANIMATION_TIME / NUM_OF_FRAMES;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private Timeline timeline;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(BudgetPanel.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private ProgressBar budgetBar;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private Text budgetDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private Text expenseDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private double currentExpenses;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private double currentBudgetCap;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public BudgetPanel (Budget budget) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        currentExpenses \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        currentBudgetCap \u003d 0;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        update(budget);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Update the budgetDisplay, expenseDisplay and budgetBar"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param budget to update from"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void update(Budget budget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        double budgetCap \u003d budget.getBudgetCap();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        double currentExpenses \u003d budget.getCurrentExpenses();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        updateBudgetBar(budgetCap, currentExpenses);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        setBudgetUiColors(budgetCap, currentExpenses);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Update the text to display the correct budget"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param budgetCap to display"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void updateBudgetCapTextDisplay(double budgetCap) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        this.budgetDisplay.setText(\"/ $\" + String.format(\"%.2f\", budgetCap));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Update the text to display the correct expenses"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param expense to display"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void updateExpenseTextDisplay(double expense) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        this.expenseDisplay.setText(\"$\" + String.format(\"%.2f\", expense));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Update the percentage of the progress bar"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param budgetCap at the current time"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param currentExpenses at the current time"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void updateBudgetBar(double budgetCap, double currentExpenses) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        double currentPercentage \u003d currentExpenses / budgetCap;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        if (currentPercentage \u003e\u003d 1.0) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            currentPercentage \u003d 1;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        if (budgetCap \u003d\u003d 0) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            currentPercentage \u003d 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        animateBudgetPanel(currentExpenses, budgetCap, currentPercentage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Triggers animation for the budget panel"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param newExpenses"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param newBudgetCap"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param newPercentage"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void animateBudgetPanel(double newExpenses, double newBudgetCap, double newPercentage) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        timeline \u003d new Timeline("
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                new KeyFrame("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        Duration.ZERO,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        new KeyValue(budgetBar.progressProperty(), budgetBar.getProgress())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                ),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                new KeyFrame("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        Duration.seconds(ANIMATION_TIME),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        new KeyValue(budgetBar.progressProperty(), newPercentage)"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                )"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        );"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        addIncrementKeyFrames(newExpenses, newBudgetCap);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        timeline.getKeyFrames().add(new KeyFrame(Duration.seconds(ANIMATION_TIME + 0.5),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                public void handle(ActionEvent event) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    timeline.stop();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            }));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        timeline.playFromStart();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Adds the key frames needed to increment the expense and budget cap text display"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param newExpenses to increment expenseDisplay to"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param newBudgetCap to increment budgetDisplay to"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void addIncrementKeyFrames(double newExpenses, double newBudgetCap) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        double amountToIncrementExpenses \u003d (newExpenses - currentExpenses) / NUM_OF_FRAMES;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        double amountToIncrementBudget \u003d (newBudgetCap - currentBudgetCap) / NUM_OF_FRAMES;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        for (double i \u003d TIME_OF_KEY_FRAMES; i \u003c\u003d ANIMATION_TIME; i +\u003d TIME_OF_KEY_FRAMES) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            KeyFrame frame \u003d new KeyFrame(Duration.seconds(i), new EventHandler\u003cActionEvent\u003e() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                public void handle(ActionEvent event) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    currentExpenses +\u003d amountToIncrementExpenses;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    currentBudgetCap +\u003d amountToIncrementBudget;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    if (currentExpenses \u003c\u003d 0) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        currentExpenses \u003d 0;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    if (currentBudgetCap \u003c\u003d 0) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        currentBudgetCap \u003d 0;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    updateExpenseTextDisplay(currentExpenses);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    updateBudgetCapTextDisplay(currentBudgetCap);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            });"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            timeline.getKeyFrames().add(frame);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Changes the colors of the expenseDisplay and budget bar to red if overbudget, and green in below budget."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void setBudgetUiColors(double budgetCap, double currentExpenses) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        if (budgetCap \u003c currentExpenses) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            expenseDisplay.setStyle(\"-fx-fill: #ae3b3b;\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            budgetBar.setStyle(\"-fx-accent: derive(#ae3b3b, 20%);\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            expenseDisplay.setStyle(\"-fx-fill: #61a15a;\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            budgetBar.setStyle(\"-fx-accent: derive(#61a15a, 20%);\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void handleUpdateBudgetPanelEvent(UpdateBudgetPanelEvent event) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        update(event.budget);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 187
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CategoriesPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Panel containing the budget information."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class CategoriesPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"CategoriesPanel.fxml\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public CategoriesPanel() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandEntered() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (NoUserSelectedException | UserAlreadyExistsException | NonExistentUserException nuse) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            logger.info(nuse.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            raise(new NewResultAvailableEvent(nuse.getMessage()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 8,
      "-": 150
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * An UI component that displays information of a {@code Expense}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class ExpenseCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String[] TAG_COLORS \u003d {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\","
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public final Expense expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private Label cost;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Label date;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseCard(Expense expense, int displayedIndex) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.expense \u003d expense;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        name.setText(expense.getName().expenseName);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        category.setText(expense.getCategory().categoryName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        cost.setText(expense.getCost().value);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        date.setText(expense.getDate().toString());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expense.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            Label tempLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            tempLabel.setStyle(\"-fx-background-color: \" + getColorStyleOfTag(tag.tagName));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            tags.getChildren().add(tempLabel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        if (!(other instanceof ExpenseCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        ExpenseCard card \u003d (ExpenseCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 expense.equals(card.expense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Returns color style for a specific tag"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static String getColorStyleOfTag(String tagName) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return TAG_COLORS[Math.abs(tagName.hashCode() % TAG_COLORS.length)];"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 18,
      "JasonChong96": 2,
      "winsonhys": 1,
      "-": 49,
      "jcjxwy": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ExpenseListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.commons.events.ui.ExpensePanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * Panel containing the list of expenses."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class ExpenseListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"ExpenseListPanel.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ExpenseListPanel.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private ListView\u003cExpense\u003e expenseListView;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseListPanel(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        setConnections(expenseList);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void setConnections(ObservableList\u003cExpense\u003e expenseList) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenseListView.setItems(expenseList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenseListView.setCellFactory(listView -\u003e new ExpenseListViewCell());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenseListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                        logger.fine(\"Selection in expense list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                        raise(new ExpensePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Scrolls to the {@code ExpenseCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expenseListView.scrollTo(index);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expenseListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 4,
      "winsonhys": 1,
      "-": 59,
      "jcjxwy": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import javafx.scene.control.SplitPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.commons.events.model.UserLoggedInEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.commons.events.ui.ShowStatsRequestEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final int MIN_WIDTH \u003d 900;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final int MIN_HEIGHT \u003d 800;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private ExpenseListPanel expenseListPanel;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private StatisticPanel statisticPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private SplitPane splitPane;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private StackPane titlePlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private StackPane budgetPanelPlaceholder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private StackPane notificationPanelPlaceholder;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private StackPane leftPanelPlaceholder;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private AnchorPane statisticsSplitPane;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        hideLoggedInUi();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    //@@author snookerballs"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Swaps the panel from statistics to list"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void swapToList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        leftPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        leftPanelPlaceholder.getChildren().add(expenseListPanel.getRoot());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    //@@author snookerballs"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Swaps the panel from list to statistics"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void swapToStat() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        leftPanelPlaceholder.getChildren().clear();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        leftPanelPlaceholder.getChildren().add(statisticsSplitPane);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    //@@author snookerballs"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Initialize UI after login"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void initializeAfterLogin() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            expenseListPanel \u003d new ExpenseListPanel(logic.getFilteredExpenseList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        } catch (NoUserSelectedException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            throw new IllegalStateException(e.getMessage());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookDirPath());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        Title title \u003d new Title();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        titlePlaceholder.getChildren().add(title.getRoot());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        BudgetPanel budgetpanel \u003d new BudgetPanel(logic.getMaximumBudget());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        budgetPanelPlaceholder.getChildren().add(budgetpanel.getRoot());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        NotificationPanel notificationPanel \u003d new NotificationPanel();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        notificationPanelPlaceholder.getChildren().add(notificationPanel.getRoot());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statisticPanel \u003d new StatisticPanel(logic.getExpenseStats(), logic.getStatsMode());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        CategoriesPanel categoriesPanel \u003d new CategoriesPanel();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statisticsSplitPane \u003d new AnchorPane();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statisticsSplitPane.setTopAnchor(statisticPanel.getRoot(), 0.0);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statisticsSplitPane.setTopAnchor(categoriesPanel.getRoot(), 350.00);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statisticsSplitPane.getChildren().addAll(statisticPanel.getRoot(), categoriesPanel.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        swapToStat();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Hides the bottom part of the UI which shows entries in the AddressBook and sync information."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void hideLoggedInUi() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        splitPane.setManaged(false);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        splitPane.setVisible(false);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        getPrimaryStage().setHeight(225);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        getPrimaryStage().setMaxHeight(225);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        getPrimaryStage().setMinHeight(225);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statusbarPlaceholder.setManaged(false);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Shows the bottom part of the UI which shows entries in the AddressBook and sync information."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void showLoggedInUi() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        splitPane.setManaged(true);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        splitPane.setVisible(true);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        getPrimaryStage().setMaxHeight(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        getPrimaryStage().setMinHeight(MIN_HEIGHT);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        getPrimaryStage().setMinWidth(MIN_WIDTH);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        statusbarPlaceholder.setManaged(true);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        primaryStage.setHeight(Math.max(MIN_HEIGHT, prefs.getGuiSettings().getWindowHeight()));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        primaryStage.setWidth(Math.max(MIN_WIDTH, prefs.getGuiSettings().getWindowWidth()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public ExpenseListPanel getExpenseListPanel() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void handleShowStatsEvent(ShowStatsRequestEvent event) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            statisticPanel.setData(logic.getExpenseStats(), logic.getStatsMode());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        } catch (NoUserSelectedException e) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            throw new IllegalStateException(e.getMessage());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void handleLoggedInEvent(UserLoggedInEvent event) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        initializeAfterLogin();"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showLoggedInUi();"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    //@@author snookerballs"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void handleSwapLeftPanelEvent(SwapLeftPanelEvent event) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        switch(event.getPanelType()) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        case LIST:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            swapToList();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        case STATISTIC:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            swapToStat();"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 188,
      "JasonChong96": 15,
      "jonathantjm": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/NotificationPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//import javafx.application.Platform;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Panel containing the notifications."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class NotificationPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"NotificationPanel.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    //private final Logger logger \u003d LogsCenter.getLogger(NotificationPanel.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private ListView\u003cObject\u003e notificationListView;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public NotificationPanel() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /*public NotificationPanel(ObservableList\u003cObject\u003e notificationList) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        //setConnections(notificationList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /*private void setConnections(ObservableList\u003cObject\u003e notificationList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        notificationListView.setItems(notificationList);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        //notificationListView.setCellFactory(listView -\u003e new ExpenseListPanel.ExpenseListViewCell());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        notificationListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        logger.fine(\"Selection in expense list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                        //raise(new ExpensePanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Scrolls to the {@code ExpenseCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /* private void scrollTo(int index) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            notificationListView.scrollTo(index);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            notificationListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Expense} using a {@code ExpenseCard}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /*class ExpenseListViewCell extends ListCell\u003cExpense\u003e {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        protected void updateItem(Expense expense, boolean empty) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            super.updateItem(expense, empty);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            if (empty || expense \u003d\u003d null) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                setGraphic(new ExpenseCard(expense, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatisticPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.chart.BarChart;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.chart.CategoryAxis;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.chart.NumberAxis;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.chart.XYChart;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * Panel containing the statistic information."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatisticPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private static final String FXML \u003d \"StatisticPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private StackPane chartArea;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public StatisticPanel (LinkedHashMap\u003cString, Double\u003e statsData, StatsMode statsMode) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        setData(statsData, statsMode);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void setData(LinkedHashMap\u003cString, Double\u003e statsData, StatsMode statsMode) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        chartArea.getChildren().clear();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        CategoryAxis xAxis \u003d new CategoryAxis();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        xAxis.setLabel(\"Date\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        NumberAxis yAxis \u003d new NumberAxis();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        yAxis.setLabel(\"Amount\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        BarChart stats \u003d new BarChart(xAxis, yAxis);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        if (statsMode \u003d\u003d StatsMode.DAY) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            stats.setTitle(\"Expenditure by Day\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            stats.setTitle(\"Expenditure by Month\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        XYChart.Series series \u003d new XYChart.Series();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        series.setName(\"Day Amounts\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Set\u003cString\u003e keySet \u003d statsData.keySet();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        for (String s : keySet) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "            series.getData().add(new XYChart.Data\u003c\u003e(s, statsData.get(s)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        stats.getData().add(series);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        chartArea.getChildren().add(stats);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 14,
      "jonathantjm": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/Title.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * The Title. Provides the basic application layout containing"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * the application header and title."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class Title extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String FXML \u003d \"Title.fxml\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public Title() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 17
    }
  },
  {
    "path": "src/main/resources/view/BudgetPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.control.ProgressBar?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.text.Text?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c!-- @@Snookerballs --\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003cStackPane fx:id\u003d\"budgetPanel\" alignment\u003d\"TOP_LEFT\" minHeight\u003d\"10\" minWidth\u003d\"10\" prefHeight\u003d\"149.0\" prefWidth\u003d\"338.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cLabel text\u003d\"Budget\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cProgressBar fx:id\u003d\"budgetBar\" prefWidth\u003d\"250.0\" prefHeight\u003d\"40\" progress\u003d\"0.0\" StackPane.alignment\u003d\"CENTER\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cGridPane fx:id \u003d \"textDisplay\" prefHeight\u003d\"96.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cRowConstraints minHeight\u003d\"10.0\" prefHeight\u003d\"30.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "         \u003cchildren\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            \u003cText fx:id\u003d\"expenseDisplay\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"0\" textAlignment\u003d\"CENTER\" GridPane.halignment\u003d\"RIGHT\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            \u003cText fx:id\u003d\"budgetDisplay\" strokeType\u003d\"OUTSIDE\" strokeWidth\u003d\"0.0\" text\u003d\"/0\" GridPane.columnIndex\u003d\"1\" GridPane.rowIndex\u003d\"2\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "         \u003c/children\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 33
    }
  },
  {
    "path": "src/main/resources/view/CategoriesPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c!-- @@Snookerballs --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003cStackPane alignment\u003d\"TOP_LEFT\" minHeight\u003d\"10\" minWidth\u003d\"10\" prefHeight\u003d\"150.0\" prefWidth\u003d\"472.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cLabel text\u003d\"Categories\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 11
    }
  },
  {
    "path": "src/main/resources/view/CommandBox.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextField?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane styleClass\u003d\"stack-pane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "  \u003cTextField fx:id\u003d\"commandTextField\" onAction\u003d\"#handleCommandEntered\" onKeyPressed\u003d\"#handleKeyPress\" prefWidth\u003d\"800\" promptText\u003d\"Enter command here...\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "-": 8
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#e6e6e6, 20%);"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    background-color: #383838; /* Used in the default.html file */"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-base: #FFF;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-control-inner-background: #FFF;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #FFF;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        derive(-fx-base, 80%)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#e6e6e6, 20%);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-border-color: transparent transparent transparent transparent;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#e6e6e6, 20%);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ".split-pane:vertical \u003e .split-pane-divider {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 0 1 0 1;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 10px 5px 10px 5px;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#e6e6e6, 20%);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 0 0 10px 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: transparent, -fx-background;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-insets: 0px, 5px ;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.3), 5, 0, 0, 5);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ".list-cell:empty {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 0 0 10px 0;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: transparent ;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-insets: 0 ;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 0 0 10px 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #9c7a5e;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #3e7b91;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-text-fill: #464646;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-text-fill: #464646;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ".stack-pane {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     -fx-background-color: derive(#FFF, 20%);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#FFF, 20%);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-text-alignment: center;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: -1px;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-translate-y: -3px;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#FFF, 30%);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-border-color: derive(#FFF, 25%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#FFF, 30%);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-border-color: derive(#FFF, 30%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .stack-pane {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#FFF, 30%);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#1b998b, 50%);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#1b998b, 20%);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14pt;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #FFF;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "  -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #FFF;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #FFF;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #FFF;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#FFF, 25%);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#f0d4b4, 20%);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-scale-x: 1.5;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-translate-x: 5px;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: derive(#e86200, 50%);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-scale-x: 1.5;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0;"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #95b4b5;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-border-color: #1b998b;"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-border-width: 5;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-text-fill: #FFF;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-prompt-text-fill: #FFF;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "#filterField, #expenseListPanel, #expenseWebpage {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #95b4b5;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-border-color: #1b998b;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-border-width: 5;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#title {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #1b998b;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-effect: dropshadow(three-pass-box, rgba(0,0,0,0.3), 5, 0, 0, 5);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#title .label {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-font-size: 30pt;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-text-fill: #fff;"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 10px;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#notificationPanel, #budgetPanel {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-color: #fff;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 5px;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#notificationPanel .label, #budgetPanel .label, #statisticLabel{"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-text-fill: #656565;"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-padding: 5px;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#budgetBar \u003e .track {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-control-inner-background: derive(#e9e5db, 20%);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#budgetBar {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-accent: derive(#61a15a, 20%);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#budgetPanel {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#budgetDisplay{"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-fill: #656565;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "#expenseDisplay {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    -fx-fill: #61a15a;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ".greenBar {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ".redBar {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 116,
      "-": 287,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "      \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "      \u003cLabel fx:id\u003d\"cost\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$cost\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "      \u003cLabel fx:id\u003d\"date\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$date\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "winsonhys": 1,
      "-": 33,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/main/resources/view/ExpenseListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "  \u003cListView fx:id\u003d\"expenseListView\" prefHeight\u003d\"350.0\" prefWidth\u003d\"472.0\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "-": 7
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "         minWidth\u003d\"800\" minHeight\u003d\"800\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"titlePlaceholder\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003cSplitPane fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.5\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cVBox fx:id\u003d\"leftPanel\" prefHeight\u003d\"500\" minWidth\u003d\"472\" prefWidth\u003d\"472\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            \u003cStackPane fx:id\u003d\"leftPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"rightSplitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\" orientation\u003d\"VERTICAL\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            \u003cVBox fx:id\u003d\"budgetPanel\" prefWidth\u003d\"338\" prefHeight\u003d\"149\"\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "              \u003cStackPane fx:id\u003d\"budgetPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            \u003cVBox fx:id\u003d\"notificationPanel\" prefWidth\u003d\"338\" prefHeight\u003d\"356\"\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "              \u003cStackPane fx:id\u003d\"notificationPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" prefWidth\u003d\"800\" prefHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                   prefWidth\u003d\"800\" prefHeight\u003d\"200\"\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 18,
      "-": 46
    }
  },
  {
    "path": "src/main/resources/view/NotificationCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003cHBox maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"105.0\" prefWidth\u003d\"150.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cVBox prefHeight\u003d\"105.0\" prefWidth\u003d\"58.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cGridPane alignment\u003d\"TOP_RIGHT\" prefHeight\u003d\"105.0\" prefWidth\u003d\"123.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"49.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"31.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "          \u003cRowConstraints maxHeight\u003d\"81.0\" minHeight\u003d\"10.0\" prefHeight\u003d\"74.0\" vgrow\u003d\"SOMETIMES\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 23
    }
  },
  {
    "path": "src/main/resources/view/NotificationPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c!-- @@Snookerballs --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003cVBox minHeight\u003d\"10\" minWidth\u003d\"10\" prefHeight\u003d\"356.0\" prefWidth\u003d\"338.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cLabel text\u003d\"Notifications\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cListView fx:id \u003d\"notificationListView\" prefHeight\u003d\"359.0\" prefWidth\u003d\"338.0\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 13
    }
  },
  {
    "path": "src/main/resources/view/StatisticPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c!-- @@Snookerballs --\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003cAnchorPane fx:id\u003d\"statisticPanel\" prefHeight\u003d\"350.0\" prefWidth\u003d\"473.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cLabel fx:id\u003d\"StatisticLabel\" text\u003d\"Spending\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cStackPane fx:id\u003d\"chartArea\" layoutY\u003d\"35.0\" prefHeight\u003d\"315.0\" prefWidth\u003d\"473.0\" /\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 14
    }
  },
  {
    "path": "src/main/resources/view/StatsWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003c?import javafx.scene.layout.Pane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003c!-- TODO: set a more appropriate initial size --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "         title\u003d\"Stats\" maximized\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "      \u003cPane fx:id\u003d\"chartArea\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 14
    }
  },
  {
    "path": "src/main/resources/view/Title.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c!-- @@Snookerballs --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003cStackPane id\u003d\"title\" alignment\u003d\"CENTER_LEFT\" minWidth\u003d\"10\" prefHeight\u003d\"67.0\" prefWidth\u003d\"800.0\" xmlns\u003d\"http://javafx.com/javafx/10.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "      \u003cLabel text\u003d\"Expense Tracker\" /\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 11
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/ExtraValuesUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"extra\" : \"some value \","
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100,"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      \"z\" : 99"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "  \"addressBookDirPath\" : \"\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 12
    }
  },
  {
    "path": "src/test/data/JsonUserPrefsStorageTest/TypicalUserPref.json",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "{"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "  \"guiSettings\" : {"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowWidth\" : 1000.0,"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowHeight\" : 500.0,"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \"windowCoordinates\" : {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "      \"x\" : 300,"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "      \"y\" : 100"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  },"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "  \"addressBookDirPath\" : \"\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlExpensesStorageTest/invalidAndValidExpenseAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c!-- Valid Expense --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c!-- Expense with invalid category field --\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003e \u003c/category\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cusername\u003einvalidAndValidExpenseAddressBook\u003c/username\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 2,
      "-": 5,
      "jcjxwy": 9
    }
  },
  {
    "path": "src/test/data/XmlExpensesStorageTest/invalidExpenseAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c!-- Expense with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cusername\u003einvalidExpenseAddressBook\u003c/username\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 1,
      "-": 4,
      "jcjxwy": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/duplicateExpenseAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003e94351253\u003c/category\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c!-- Expense with same identity as Alice Pauline --\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t    \u003cdate\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003e94351253\u003c/category\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cusername\u003eduplicateExpenseAddressBook\u003c/username\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 3,
      "winsonhys": 2,
      "-": 9,
      "jcjxwy": 8
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidExpenseAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c!-- Expense with invalid cost field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003ea\u003c/cost\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cusername\u003einvalidExpenseAddressBook\u003c/username\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "winsonhys": 1,
      "-": 4,
      "jcjxwy": 5
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalExpensesAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Expense values as in TypicalExpenses#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003cname\u003eSchool fee\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e3.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\t\t\u003cdate\u003e02-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003cname\u003eEat ice cream\u003c/name\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003eFood\u003c/category\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e2.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\t\t\u003cdate\u003e02-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003cname\u003eBuy toy\u003c/name\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003eEntertainment\u003c/category\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\t\t\u003cdate\u003e03-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003cname\u003eNew clothes\u003c/name\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003eShopping\u003c/category\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e2.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\t\t\u003cdate\u003e04-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003cname\u003ePay tax\u003c/name\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003eTax\u003c/category\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e5.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\t\t\u003cdate\u003e05-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003cname\u003eBuy books\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003eBook\u003c/category\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e6.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\t\t\u003cdate\u003e06-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003cname\u003eHave lunch\u003c/name\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory\u003eFood\u003c/category\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost\u003e7.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\t\t\u003cdate\u003e02-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cusername\u003etypicalExpensesAddressBook\u003c/username\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    \u003cbudget\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003cbudgetCap\u003e28.00\u003c/budgetCap\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccurrentExpenses\u003e26.00\u003c/currentExpenses\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003cnextRecurrence\u003e2017-08-04T10:11:30\u003c/nextRecurrence\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003cnumberOfSecondsToRecurAgain\u003e50000\u003c/numberOfSecondsToRecurAgain\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    \u003c/budget\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 13,
      "-": 7,
      "jcjxwy": 37
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidExpenseField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003c!-- Expense with an invalid category field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003cexpense\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003ccategory\u003e \u003c/category\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    \u003ccost\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\u003cdate\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003c/expense\u003e"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "winsonhys": 3,
      "-": 3,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingExpenseField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "\u003c!-- Expense with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003cexpense\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003ccategory\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    \u003ccost\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\u003cdate\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003c/expense\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "winsonhys": 5,
      "-": 2,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/tempAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cid\u003e1\u003c/id\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cfirstName\u003eJohn\u003c/firstName\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003clastName\u003eDoe\u003c/lastName\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cgithubUsername\u003e\u003c/githubUsername\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cstreet\u003e\u003c/street\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cpostalCode\u003e\u003c/postalCode\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccity\u003e\u003c/city\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003etempAddressBook\u003c/expenses\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 10,
      "jcjxwy": 3
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e200.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eGamble\u003c/category\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e1000.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eEntertainment\u003c/category\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e222.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eShopping\u003c/category\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e123.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eBook\u003c/category\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e12.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eCloth\u003c/category\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eFood\u003c/category\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e3.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e200.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003cexpenses\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        \u003ccategory isPrivate\u003d\"false\"\u003eTravel\u003c/category\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccost isPrivate\u003d\"false\"\u003e123.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\t\u003cdate isPrivate\u003d\"false\"\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003c/expenses\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    \u003cusername\u003evalidAddressBook\u003c/username\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    \u003cbudget\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003cbudgetCap\u003e28.00\u003c/budgetCap\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003ccurrentExpenses\u003e26.00\u003c/currentExpenses\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003cnextRecurrence\u003e2018-10-10T10:11:30\u003c/nextRecurrence\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        \u003cnumberOfSecondsToRecurAgain\u003e50000\u003c/numberOfSecondsToRecurAgain\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    \u003c/budget\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 10,
      "winsonhys": 15,
      "-": 12,
      "jcjxwy": 27
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validExpense.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003cexpense\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    \u003ccategory\u003eSchool\u003c/category\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    \u003ccost\u003e1.00\u003c/cost\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "\t\u003cdate\u003e01-10-2018\u003c/date\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "\u003c/expense\u003e"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "winsonhys": 3,
      "-": 3,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/BudgetPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.control.ProgressBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.paint.Color;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.text.Text;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author snookerballs"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * A handle to the {@code BudgetPanel} in the GUI."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class BudgetPanelHandle extends NodeHandle\u003cRegion\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static final String BUDGET_PANEL_ID \u003d \"#budgetPanel\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static final String BUDGET_BAR_ID \u003d \"#budgetBar\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String EXPENSE_DISPLAY_ID \u003d \"#expenseDisplay\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String BUDGET_DISPLAY_ID \u003d \"#budgetDisplay\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String BUDGET_DISPLAY_PREFIX \u003d \"/ $\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String EXPENSE_DISPLAY_PREFIX \u003d \"$\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String RED_HEXCODE \u003d \"#ae3b3b\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private static final String GREEN_HEXCODE \u003d \"#61a15a\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private final Text budgetDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private final Text expenseDisplay;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private final ProgressBar budgetBar;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public BudgetPanelHandle(Region budgetPanelNode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        super(budgetPanelNode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        budgetBar \u003d getChildNode(BUDGET_BAR_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        budgetDisplay \u003d getChildNode(BUDGET_DISPLAY_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        expenseDisplay \u003d getChildNode(EXPENSE_DISPLAY_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public Text getBudgetDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return budgetDisplay;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public Text getExpenseDisplay() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return expenseDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public ProgressBar getBudgetBar() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return budgetBar;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Checks if the expenseDisplay displays the correct text"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param expense to check against"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @return true if expenseDisplay portrays the correct text, false otherwise."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public boolean isExpenseCorrect(String expense) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return expenseDisplay.getText().equals(EXPENSE_DISPLAY_PREFIX + expense);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Check if the budgetDisplay displays the correct text"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param budget to check against"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @return true if budgetDisplay portrays the correct text, false otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public boolean isBudgetCorrect(String budget) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return budgetDisplay.getText().equals(BUDGET_DISPLAY_PREFIX + budget);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Check if the budgetBar is at the correct progress percentage"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param percentage to check against"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @return true if the progress percentage is correct, false otherwise."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public boolean isBudgetBarProgressAccurate(double percentage) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        if (percentage \u003e\u003d 1.0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            return budgetBar.getProgress() \u003d\u003d 1.0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return budgetBar.getProgress() \u003d\u003d percentage;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Checks if the expenseText and budgetBar turns red when over budget."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @return true if both UI elements are red, false otherwise."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public boolean isColorRed() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return expenseDisplay.getFill().equals(Color.web(RED_HEXCODE))"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                \u0026\u0026 budgetBar.getStyle().equals(\"-fx-accent: derive(#ae3b3b, 20%);\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Checks if the expenseText and budgetBar is green when under budget."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @return true if both UI elements are green, false otherwise."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public boolean isColorGreen() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return expenseDisplay.getFill().equals(Color.web(GREEN_HEXCODE))"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                \u0026\u0026 budgetBar.getStyle().equals(\"-fx-accent: derive(#61a15a, 20%);\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 95
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ExpenseCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": " * Provides a handle to a expense card in the expense list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class ExpenseCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#cost\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#category\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private final Label costLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public ExpenseCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        costLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public String getCost() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        return costLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Returns true if this handle contains {@code expense}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean equals(Expense expense) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return getName().equals(expense.getName().expenseName)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 getCost().equals(expense.getCost().value)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 getCategory().equals(expense.getCategory().categoryName)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(expense.getTags().stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 2,
      "winsonhys": 7,
      "-": 60,
      "jcjxwy": 11
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ExpenseListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * Provides a handle for {@code ExpenseListPanel} containing the list of {@code ExpenseCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpenseListPanelHandle extends NodeHandle\u003cListView\u003cExpense\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String EXPENSE_LIST_VIEW_ID \u003d \"#expenseListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String CARD_PANE_ID \u003d \"#cardPane\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private Optional\u003cExpense\u003e lastRememberedSelectedExpenseCard;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseListPanelHandle(ListView\u003cExpense\u003e expenseListPanelNode) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        super(expenseListPanelNode);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Returns a handle to the selected {@code ExpenseCardHandle}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public ExpenseCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e selectedExpenseList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (selectedExpenseList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new AssertionError(\"Expense list size expected 1.\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                .map(ExpenseCardHandle::new)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .filter(handle -\u003e handle.equals(selectedExpenseList.get(0)))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Navigates the listview to display {@code expense}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void navigateToCard(Expense expense) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        if (!getRootNode().getItems().contains(expense)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new IllegalArgumentException(\"Expense does not exist.\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            getRootNode().scrollTo(expense);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to {@code index}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(int index) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003c 0 || index \u003e\u003d getRootNode().getItems().size()) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Index is out of bounds.\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Selects the {@code ExpenseCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns the expense card handle of a expense associated with the {@code index} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException if the selected card is currently not in the scene graph."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseCardHandle getExpenseCardHandle(int index) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAllCardNodes().stream()"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                .map(ExpenseCardHandle::new)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .filter(handle -\u003e handle.equals(getExpense(index)))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .orElseThrow(IllegalStateException::new);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private Expense getExpense(int index) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().get(index);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all card nodes in the scene graph."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Card nodes that are visible in the listview are definitely in the scene graph, while some nodes that are not"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * visible in the listview may also be in the scene graph."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cNode\u003e getAllCardNodes() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiRobot.lookup(CARD_PANE_ID).queryAll();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Remembers the selected {@code ExpenseCard} in the list."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void rememberSelectedExpenseCard() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            lastRememberedSelectedExpenseCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            lastRememberedSelectedExpenseCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Returns true if the selected {@code ExpenseCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code rememberSelectedExpenseCard()} call."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public boolean isSelectedExpenseCardChanged() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return lastRememberedSelectedExpenseCard.isPresent();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return !lastRememberedSelectedExpenseCard.isPresent()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    || !lastRememberedSelectedExpenseCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 8,
      "-": 121,
      "jcjxwy": 30
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.SwapLeftPanelEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final ExpenseListPanelHandle expenseListPanel;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private final BudgetPanelHandle budgetPanel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    //private final StatisticPanelHandle statisticPanel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        budgetPanel \u003d new BudgetPanelHandle(getChildNode(BudgetPanelHandle.BUDGET_PANEL_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        //statisticPanel \u003d new StatisticPanelHandle(getChildNode(StatisticPanelHandle.STATISTIC_PANEL_ID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        postNow(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.LIST));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        expenseListPanel \u003d new ExpenseListPanelHandle(getChildNode(ExpenseListPanelHandle.EXPENSE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        postNow(new SwapLeftPanelEvent(SwapLeftPanelEvent.PanelType.STATISTIC));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseListPanelHandle getExpenseListPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return expenseListPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public BudgetPanelHandle getBudgetPanel() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return budgetPanel;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 15,
      "-": 42,
      "jcjxwy": 3
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatisticPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " * A handle to the {@code StatisticPanel} in the GUI."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class StatisticPanelHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static final String STATISTIC_PANEL_ID \u003d \"#statisticPanel\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public StatisticPanelHandle(Node statisticPanelHandle) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            super(statisticPanelHandle);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 16
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatsWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " * A handle to the {@code HelpWindow} of the application."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatsWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String STATS_WINDOW_TITLE \u003d \"Stats\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public StatsWindowHandle(Stage statsWindowStage) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        super(statsWindowStage);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     * Returns true if a help window is currently present in the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static boolean isWindowPresent() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return new GuiRobot().isWindowShown(STATS_WINDOW_TITLE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"data/sampleData.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        userPrefs.setAddressBookDirPath("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                TestUtil.getFilePathInSandboxFolder(userPrefs.getAddressBookDirPath().toString()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(800.0, 800.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new AddressBook(storage.readAllExpenses(userPrefs.getAddressBookDirPath()).get("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                    TypicalExpenses.SAMPLE_USERNAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return storage.getExpensesDirPath();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Model copy \u003d model.copy(userPrefs);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            ModelHelper.setFilteredList(copy, model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            return copy;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (NonExistentUserException | NoUserSelectedException e) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new AssertionError(e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns the model."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public Model getActualModel() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 19,
      "-": 112,
      "jcjxwy": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final Index fifthExpenseIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(fifthExpenseIndex.equals(fifthExpenseIndex));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(5.0f));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(fifthExpenseIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 85,
      "jcjxwy": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.storage.XmlAdaptedExpense;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlUtilTest\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path EMPTY_FILE \u003d TEST_DATA_FOLDER.resolve(\"empty.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path MISSING_FILE \u003d TEST_DATA_FOLDER.resolve(\"missing.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path VALID_FILE \u003d TEST_DATA_FOLDER.resolve(\"validAddressBook.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final Path MISSING_EXPENSE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"missingExpenseField.xml\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final Path INVALID_EXPENSE_FIELD_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseField.xml\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final Path VALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"validExpense.xml\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEMP_FILE \u003d TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \" \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String VALID_CATEGORY \u003d \"School\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"1.00\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final String VALID_DATE \u003d \"01-10-2018\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private static final String VALID_ADDRESS_BOOK_USERNAME \u003d \"validAddressBook\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(9, dataFromFile.getExpenseList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(dataFromFile.getUsername(), new Username(VALID_ADDRESS_BOOK_USERNAME));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void xmlAdaptedExpenseFromFile_fileWithMissingExpenseField_validResult() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense actualExpense \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                MISSING_EXPENSE_FIELD_FILE, XmlAdaptedExpenseWithRootElement.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expectedExpense \u003d new XmlAdaptedExpense("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                null, VALID_CATEGORY, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedExpense, actualExpense);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void xmlAdaptedExpenseFromFile_fileWithInvalidExpenseField_validResult() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense actualExpense \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                INVALID_EXPENSE_FIELD_FILE, XmlAdaptedExpenseWithRootElement.class);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expectedExpense \u003d new XmlAdaptedExpense("
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                VALID_NAME, INVALID_CATEGORY, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedExpense, actualExpense);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void xmlAdaptedExpenseFromFile_fileWithValidExpense_validResult() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense actualExpense \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                VALID_EXPENSE_FILE, XmlAdaptedExpenseWithRootElement.class);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expectedExpense \u003d new XmlAdaptedExpense("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                VALID_NAME, VALID_CATEGORY, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedExpense, actualExpense);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook(new Username(\"aaa\"), Optional.empty()));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook(new Username(\"aaa\"), Optional.empty()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createFile(TEMP_FILE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new XmlSerializableAddressBook(new AddressBook(new Username(\"AA\"), Optional.empty()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook(new Username(\"AAA\"), Optional.empty()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                builder.withExpense(new ExpenseBuilder().build()).build());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedExpense}"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @XmlRootElement(name \u003d \"expense\")"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static class XmlAdaptedExpenseWithRootElement extends XmlAdaptedExpense {}"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 11,
      "winsonhys": 4,
      "-": 110,
      "jcjxwy": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.LinkedHashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public LogicManagerTest() throws UserAlreadyExistsException, NonExistentUserException, NoUserSelectedException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void clearModel() throws UserAlreadyExistsException, NonExistentUserException, NoUserSelectedException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        logic.getFilteredExpenseList().remove(0);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void getExpenseStats_returnsEmptyMapWhenNoEntries() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(logic.getExpenseStats().size() \u003d\u003d 0);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void getExpenseStatsReturnsMapWithCorrectEntries() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.addExpense(validExpense);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.updateStatsMode(StatsMode.DAY);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        LinkedHashMap\u003cString, Double\u003e map \u003d logic.getExpenseStats();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(map.size() \u003e 0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(map.containsKey(validExpense.getDate().toString()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(map.get(validExpense.getDate().toString()) \u003d\u003d validExpense.getCost().getCostValue());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.updateStatsMode(StatsMode.MONTH);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        map \u003d logic.getExpenseStats();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        String month \u003d new SimpleDateFormat(\"MMM-YYYY\").format(validExpense.getDate().fullDate.getTime());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(map.size() \u003e 0);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(map.containsKey(month));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(map.get(month) \u003d\u003d validExpense.getCost().getCostValue());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void getExpenseStatsReturnsCorrectStatsMode() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.updateStatsMode(StatsMode.DAY);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(logic.getStatsMode() \u003d\u003d StatsMode.DAY);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        model.updateStatsMode(StatsMode.MONTH);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(logic.getStatsMode() \u003d\u003d StatsMode.MONTH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throws NoUserSelectedException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                                       String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            assertNull(expectedException);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (CommandException | ParseException | NoUserSelectedException | NonExistentUserException"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                | UserAlreadyExistsException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        System.out.println(expectedModel.equals(model));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (ParseException | CommandException | NoUserSelectedException | NonExistentUserException"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                | UserAlreadyExistsException e) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 44,
      "JasonChong96": 21,
      "winsonhys": 4,
      "-": 111,
      "jcjxwy": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_newExpense_withinBudget() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().withCost(\"1.00\").build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExpense), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validExpense), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_newExpense_budgetExceed() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().withCost(\"9999.99\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.addExpense(validExpense);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(new AddCommand(validExpense), model, commandHistory,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            AddCommand.MESSAGE_BUDGET_EXCEED_WARNING, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseInList \u003d model.getAddressBook().getExpenseList().get(0);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(new AddCommand(expenseInList), model, commandHistory,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "winsonhys": 1,
      "-": 43,
      "jcjxwy": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void constructor_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_expenseAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelStubAcceptingExpenseAdded modelStub \u003d new ModelStubAcceptingExpenseAdded();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExpense), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(validExpense), modelStub.expensesAdded);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_expenseAcceptedByModel_budgetExceed() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        ModelStubBudget modelStub \u003d new ModelStubBudget(false);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(AddCommand.MESSAGE_BUDGET_EXCEED_WARNING, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_expenseAcceptedByModel_withinBudget() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        ModelStubBudget modelStub \u003d new ModelStubBudget(true);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validExpense).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validExpense), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_duplicateExpense_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense validExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validExpense);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithExpense(validExpense);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense alice \u003d new ExpenseBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense bob \u003d new ExpenseBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public boolean addExpense(Expense expense) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new AssertionError(\"addExpense method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public void setRecurrenceFrequency(long seconds) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"setRecurrenceFrequency should not be called\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"resetData method should not be called.\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public void modifyMaximumBudget(Budget budget) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"modifyMaximumBudget method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"getAddressBook should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new AssertionError(\"hasExpense method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public void deleteExpense(Expense target) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new AssertionError(\"deleteExpense method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public void updateExpense(Expense target, Expense editedExpense) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new AssertionError(\"updateExpense method should not be called.\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public ObservableList\u003cExpense\u003e getFilteredExpenseList() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new AssertionError(\"getFilteredExpenseList method should not be called.\");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public void updateFilteredExpenseList(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            throw new AssertionError(\"updateFilteredExpenseList method should not be called.\");"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseStats() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public void updateExpenseStats(Predicate\u003cExpense\u003e predicate) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        public void updateStatsMode(StatsMode statsMode) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        public StatsMode getStatsMode() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"canUndoAddressBook method should not be called.\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"canRedoAddressBook method should not be called.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"undoAddressBook method should not be called.\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"redoAddressBook method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"commitAddressBook method should not be called.\");"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public boolean loadUserData(Username username, Password password) throws NonExistentUserException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"loadUserData method should not be called.\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public void unloadUserData() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"unloadUserData method should not be called.\");"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public boolean isUserExists(Username username) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"isUserExists method should not be called.\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public void addUser(Username username) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"addUser method should not be called.\");"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public boolean hasSelectedUser() {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"hasSelectedUser method should not be called.\");"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public Model copy(UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"copy method should not be called.\");"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public void setPassword(Password password) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            throw new AssertionError(\"copy method should not be called.\");"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            throw new AssertionError(\"getMaximumBudget method should not be called.\");"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * A Model stub that contains a single expense."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private class ModelStubWithExpense extends ModelStub {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        private final Expense expense;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelStubWithExpense(Expense expense) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            this.expense \u003d expense;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return this.expense.isSameExpense(expense);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            // called by {@param UpdateBudgetDisplayEvent}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            return new Budget(0, 0);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * A Model stub that always accept the expense being added."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private class ModelStubAcceptingExpenseAdded extends ModelStub {"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final ArrayList\u003cExpense\u003e expensesAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return expensesAdded.stream().anyMatch(expense::isSameExpense);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public boolean addExpense(Expense expense) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            requireNonNull(expense);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expensesAdded.add(expense);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new AddressBook(new Username(\"aa\"), Optional.empty());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            // called by {@param UpdateBudgetDisplayEvent}"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            return new Budget(0, 0);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * A Model stub that will always result in a successful add, but can be within or above the budget"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private class ModelStubBudget extends ModelStub {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        private final boolean withinBudget;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public ModelStubBudget(boolean withinBudget) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            this.withinBudget \u003d withinBudget;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public boolean hasExpense(Expense expense) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public boolean addExpense(Expense expense) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return this.withinBudget;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return new AddressBook(new Username(\"aa\"), Optional.empty());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            // called by {@param UpdateBudgetDisplayEvent}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            return new Budget(0, 0);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 16,
      "JasonChong96": 36,
      "jonathantjm": 3,
      "winsonhys": 62,
      "-": 174,
      "jcjxwy": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_emptyAddressBook_success() throws NoUserSelectedException, UserAlreadyExistsException,"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NonExistentUserException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Model model \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Model expectedModel \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        expectedModel.resetData(new AddressBook(new Username(\"typicalAddressBook\"), Optional.empty()));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Budget clearedBudget \u003d model.getMaximumBudget();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        clearedBudget.clearSpending();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        expectedModel.modifyMaximumBudget(clearedBudget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ClearCommand(), model, commandHistory, ClearCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 15,
      "winsonhys": 5,
      "-": 31,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HOURS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MINUTES;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECONDS;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_NAME_GAME \u003d \"Spend on video game\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_NAME_IPHONE \u003d \"IPone\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_NAME_KFC \u003d \"Have KFC\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_CATEGORY_GAME \u003d \"Game\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_CATEGORY_IPHONE \u003d \"Phone\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_CATEGORY_KFC \u003d \"Food\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_COST_GAME \u003d \"123.00\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_COST_IPHONE \u003d \"722.00\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_COST_KFC \u003d \"10.00\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_TAG_FOOD \u003d \"Lunch\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String VALID_DATE_1990 \u003d \"01-01-1990\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String VALID_DATE_2018 \u003d \"02-10-2018\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String VALID_TIME_ONE \u003d \"1\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String VALID_TIME_ONE_SECOND \u003d \" \" + PREFIX_SECONDS + VALID_TIME_ONE;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String VALID_TIME_ONE_MINUTE \u003d \" \" + PREFIX_MINUTES + VALID_TIME_ONE;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String VALID_TIME_ONE_HOUR \u003d \" \" + PREFIX_HOURS + VALID_TIME_ONE;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_GAME;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String NAME_DESC_KFC \u003d \" \" + PREFIX_NAME + VALID_NAME_KFC;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String CATEGORY_DESC_AMY \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_GAME;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String CATEGORY_DESC_BOB \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String CATEGORY_DESC_KFC \u003d \" \" + PREFIX_CATEGORY + VALID_CATEGORY_KFC;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String COST_DESC_AMY \u003d \" \" + PREFIX_COST + VALID_COST_GAME;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String COST_DESC_BOB \u003d \" \" + PREFIX_COST + VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String COST_DESC_KFC \u003d \" \" + PREFIX_COST + VALID_COST_KFC;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String DATE_DESC_1990 \u003d \" \" + PREFIX_DATE + VALID_DATE_1990;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String DATE_DESC_2018 \u003d \" \" + PREFIX_DATE + VALID_DATE_2018;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String TAG_DESC_FOOD \u003d \" \" + PREFIX_TAG + VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String INVALID_CATEGORY_DESC \u003d \" \" + PREFIX_CATEGORY + \" \"; // empty entry is not allowed"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_COST; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String INVALID_DATE_DESC \u003d \" \" + PREFIX_DATE + \"-01-1990\"; // no day"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final EditCommand.EditExpenseDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DESC_AMY \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_GAME)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCategory(VALID_CATEGORY_GAME).withCost(VALID_COST_GAME)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DESC_BOB \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_IPHONE)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCategory(VALID_CATEGORY_IPHONE).withCost(VALID_COST_IPHONE)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        System.out.println(\"Creating expectedCommandHistory\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        System.out.println(\"Created expectedCommandHistory\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            assertEquals(expectedModel.getMaximumBudget(), actualModel.getMaximumBudget());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (Exception ce) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * - the address book and the filtered expense list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            List\u003cExpense\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (CommandException e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                assertEquals(expectedFilteredList, actualModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (NoUserSelectedException | NonExistentUserException | UserAlreadyExistsException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Assert.fail(\"Command threw error : \" + e.getMessage());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the expense at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static void showExpenseAtIndex(Model model, Index targetIndex) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expense \u003d model.getFilteredExpenseList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String[] splitName \u003d expense.getName().expenseName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final ArgumentMultimap keywordsMap \u003d ArgumentTokenizer.tokenize(\" n/\""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + splitName[0], PREFIX_NAME);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(new ExpenseContainsKeywordsPredicate(keywordsMap));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(1, model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Deletes the first expense in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static void deleteFirstExpense(Model model) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(0);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.deleteExpense(firstExpense);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 16,
      "jonathantjm": 1,
      "winsonhys": 10,
      "-": 95,
      "jcjxwy": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS, expenseToDelete);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showNoExpense(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getExpenseList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // delete -\u003e first expense deleted"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all expenses"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // redo -\u003e same first expense deleted again"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * 1. Deletes a {@code Expense} from a filtered list."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted expense in the"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the expense object regardless of indexing."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameExpenseDeleted() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToDelete \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.deleteExpense(expenseToDelete);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // delete -\u003e deletes second expense in unfiltered expense list / first expense in filtered expense list"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all expenses"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(expenseToDelete, model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // redo -\u003e deletes same second expense in unfiltered expense list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void showNoExpense(Model model) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(p -\u003e false);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(model.getFilteredExpenseList().isEmpty());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 6,
      "-": 123,
      "jcjxwy": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index indexLastExpense \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense lastExpense \u003d model.getFilteredExpenseList().get(indexLastExpense.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseBuilder expenseInList \u003d new ExpenseBuilder(lastExpense);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d expenseInList.withName(VALID_NAME_IPHONE).withCategory(VALID_CATEGORY_IPHONE)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_IPHONE)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCategory(VALID_CATEGORY_IPHONE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastExpense, descriptor);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateExpense(lastExpense, editedExpense);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, new EditCommand.EditExpenseDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_filteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseInFilteredList \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(expenseInFilteredList).withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_IPHONE).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateExpense(model.getFilteredExpenseList().get(0), editedExpense);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_duplicateExpenseUnfilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense firstExpense \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(firstExpense).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_duplicateExpenseFilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // edit expense in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseInList \u003d model.getAddressBook().getExpenseList().get(INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new EditExpenseDescriptorBuilder(expenseInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_invalidExpenseIndexUnfilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_invalidExpenseIndexFilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getExpenseList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_IPHONE).build());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToEdit \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // edit -\u003e first expense edited"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all expenses"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // redo -\u003e same first expense edited again"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new EditExpenseDescriptorBuilder().withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * 1. Edits a {@code Expense} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited expense in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the expense object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_sameExpenseEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(editedExpense).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToEdit \u003d model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateExpense(expenseToEdit, editedExpense);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // edit -\u003e edits second expense in unfiltered expense list / first expense in filtered expense list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered expense list to show all expenses"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(model.getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased()), expenseToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // redo -\u003e edits same second expense in unfiltered expense list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_EXPENSE, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor copyDescriptor \u003d new EditCommand.EditExpenseDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_EXPENSE, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_EXPENSE, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_EXPENSE, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 6,
      "-": 154,
      "jcjxwy": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditExpenseDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class EditExpenseDescriptorTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditExpenseDescriptor descriptorWithSameValues \u003d new EditExpenseDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor editedAmy \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new EditExpenseDescriptorBuilder(DESC_AMY).withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_AMY).withCategory(VALID_CATEGORY_IPHONE).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_AMY).withCost(VALID_COST_IPHONE).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAmy \u003d new EditExpenseDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 41,
      "jcjxwy": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOOKS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ICECREAM;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.LUNCH;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SCHOOLFEE;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TAX;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TOY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.Prefix;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap firstMap \u003d ArgumentTokenizer.tokenize(\" n/first\", PREFIX_NAME);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap secondMap \u003d ArgumentTokenizer.tokenize(\" n/second\", PREFIX_NAME);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(firstMap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(secondMap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_zeroKeywords_noExpenseFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"n/ \", PREFIX_NAME);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_multipleNameKeywords_multipleExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"n/toy tax books\", PREFIX_NAME);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(TOY, TAX, BOOKS), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_oneCategoryKeyword_multipleExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"c/Food\", PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(ICECREAM, LUNCH), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_multipleTagKeyword_multipleExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"t/Friends\", PREFIX_TAG);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(SCHOOLFEE, ICECREAM, CLOTHES), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_oneDateKeyword_oneExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"d/03-10-2018\", PREFIX_DATE);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(TOY), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_multipleDateKeyword_multipleExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 5);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"d/02-10-2018:04-10-2018\", PREFIX_DATE);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(SCHOOLFEE, ICECREAM, TOY, CLOTHES, LUNCH), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_oneCostKeyword_oneExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"$/1.00\", PREFIX_COST);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(TOY), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_multipleCostKeyword_multipleExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 4);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d preparePredicate(\"$/1.00:3.00\", PREFIX_COST);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(SCHOOLFEE, ICECREAM, TOY, CLOTHES), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_multipleKeyword_oneExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                ArgumentTokenizer.tokenize(\" t/Friends c/School\", PREFIX_TAG, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(SCHOOLFEE), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void execute_multipleKeyword_multipleExpensesFound() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_EXPENSES_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                ArgumentTokenizer.tokenize(\" t/Friends $/2.00:3.00\", PREFIX_TAG, PREFIX_COST);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FindCommand command \u003d new FindCommand(predicate);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(predicate);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Arrays.asList(SCHOOLFEE, ICECREAM, CLOTHES), model.getFilteredExpenseList());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Parses {@code userInput} into a {@code ExpenseContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private ExpenseContainsKeywordsPredicate preparePredicate(String userInput, Prefix prefix) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d ArgumentTokenizer.tokenize(\" \" + userInput, prefix);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 63,
      "jcjxwy": 121
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HelpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.HelpCommand.SHOWING_HELP_MESSAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model expectedModel \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public HelpCommandTest() throws UserAlreadyExistsException, NonExistentUserException, NoUserSelectedException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_help_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HelpCommand(), model, commandHistory, SHOWING_HELP_MESSAGE, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowHelpRequestEvent);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(7, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 8,
      "winsonhys": 3,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model expectedModel \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public HistoryCommandTest() throws UserAlreadyExistsException, NonExistentUserException, NoUserSelectedException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, HistoryCommand.MESSAGE_NO_HISTORY, expectedModel);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(HistoryCommand.MESSAGE_SUCCESS, command1), expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new HistoryCommand(), model, history, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 6,
      "winsonhys": 2,
      "-": 33
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void setUp() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 3,
      "-": 35,
      "jcjxwy": 4
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LoginCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.PasswordTest;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullUsername_throwsNullPointerException() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new LoginCommand(null, new Password(\"aaaaaa\", true));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullPassword_assertNoNullPointerException() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new LoginCommand(TypicalExpenses.SAMPLE_USERNAME, null);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_userAcceptedByModel_loginSuccessful() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(TypicalExpenses.SAMPLE_USERNAME, null)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_LOGIN_SUCCESS, TypicalExpenses.SAMPLE_USERNAME.toString()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(model.hasSelectedUser());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_nonExistantUser_loginFailed() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertFalse(model.isUserExists(new Username(UsernameTest.VALID_USERNAME_STRING)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NonExistentUserException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new LoginCommand(new Username(UsernameTest.VALID_USERNAME_STRING), null).execute(model, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_incorrectPassword_loginFailed() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.setPassword(PasswordTest.VALID_PASSWORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(TypicalExpenses.SAMPLE_USERNAME, null).execute(model,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                commandHistory);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(LoginCommand.MESSAGE_INCORRECT_PASSWORD, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 66,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstExpense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void setUp() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of both models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model.undoAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple redoable states in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // single redoable state in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // no redoable state in model"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 3,
      "-": 41,
      "jcjxwy": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showExpenseAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index lastExpenseIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_EXPENSE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertExecutionSuccess(lastExpenseIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredExpenseList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(outOfBoundsIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(expectedModel, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(model, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpenseAtIndex(expectedModel, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getExpenseList().size());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(SelectCommand.MESSAGE_SELECT_EXPENSE_SUCCESS, index.getOneBased());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(selectCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(selectCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 6,
      "-": 87,
      "jcjxwy": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetBudgetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//author winsonhys"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class SetBudgetCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * Resets the command history and model before each test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void resetModelsAndCommandHistory() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void execute_setBudget_successful() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Budget toSet \u003d new Budget(\"2.00\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        expectedModel.modifyMaximumBudget(toSet);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        SetBudgetCommand setBudgetCommand \u003d new SetBudgetCommand(toSet);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        String expectedMessage \u003d String.format(SetBudgetCommand.MESSAGE_SUCCESS, toSet);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertCommandSuccess(setBudgetCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 43,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetPasswordCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.PasswordTest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SetPasswordCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullNewPassword_throwsNullPointerException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new SetPasswordCommand(null, null);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullOldPassword_assertNoNullPointerException() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new SetPasswordCommand(null, PasswordTest.VALID_PASSWORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_noOldPassword_assertSetPasswordSuccessful() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(TypicalExpenses.SAMPLE_USERNAME, null)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_LOGIN_SUCCESS, TypicalExpenses.SAMPLE_USERNAME.toString()),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(model.hasSelectedUser());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        commandResult \u003d new SetPasswordCommand(null, PasswordTest.VALID_PASSWORD)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(model.getAddressBook().getPassword().get(), PasswordTest.VALID_PASSWORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(SetPasswordCommand.MESSAGE_SET_PASSWORD_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_oldPasswordInvalid_assertSetPasswordFailure() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        CommandResult commandResult \u003d new LoginCommand(TypicalExpenses.SAMPLE_USERNAME, null)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(String.format(LoginCommand.MESSAGE_LOGIN_SUCCESS, TypicalExpenses.SAMPLE_USERNAME.toString()),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        commandResult \u003d new SetPasswordCommand(null, PasswordTest.VALID_PASSWORD)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(model.getAddressBook().getPassword().get(), PasswordTest.VALID_PASSWORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(SetPasswordCommand.MESSAGE_SET_PASSWORD_SUCCESS, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        commandResult \u003d new SetPasswordCommand(new Password(PasswordTest.INVALID_PASSWORD_STRING_SHORT, false),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                PasswordTest.VALID_PASSWORD).execute(model, commandHistory);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(model.getAddressBook().getPassword().get(), PasswordTest.VALID_PASSWORD);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(SetPasswordCommand.MESSAGE_INCORRECT_PASSWORD, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new SetPasswordCommand(PasswordTest.VALID_PASSWORD, PasswordTest.VALID_PASSWORD),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new SetPasswordCommand(PasswordTest.VALID_PASSWORD, PasswordTest.VALID_PASSWORD));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(new SetPasswordCommand(PasswordTest.VALID_PASSWORD, PasswordTest.VALID_PASSWORD),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new SetPasswordCommand(PasswordTest.VALID_PASSWORD,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        new Password(PasswordTest.VALID_PASSWORD_STRING.toUpperCase(), true)));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SetRecurringBudgetCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.jupiter.api.BeforeEach;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class SetRecurringBudgetCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private long newRecurrenceFrequency \u003d 123456;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @BeforeEach"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void execute_setRecurrence_successful() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        AddressBook emptyBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model \u003d new ModelManager(emptyBook, new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        expectedModel.setRecurrenceFrequency(this.newRecurrenceFrequency);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        SetRecurringBudgetCommand setRecurringBudgetCommand \u003d new SetRecurringBudgetCommand(newRecurrenceFrequency);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        String expectedMessage \u003d String.format(SetRecurringBudgetCommand.MESSAGE_SUCCESS, this.newRecurrenceFrequency);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertCommandSuccess(setRecurringBudgetCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertNotNull(expectedModel.getMaximumBudget().getNextRecurrence());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(this.newRecurrenceFrequency"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            \u003d\u003d expectedModel.getAddressBook().getMaximumBudget().getNumberOfSecondsToRecurAgain());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void execute_updateRecurrence_successful() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        long initialRecurrenceFrequency \u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            expectedModel.getAddressBook().getMaximumBudget().getNumberOfSecondsToRecurAgain();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        expectedModel.setRecurrenceFrequency(this.newRecurrenceFrequency);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        String expectedMessage \u003d String.format(SetRecurringBudgetCommand.MESSAGE_SUCCESS, this.newRecurrenceFrequency);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        SetRecurringBudgetCommand setRecurringBudgetCommand \u003d new SetRecurringBudgetCommand(newRecurrenceFrequency);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertCommandSuccess(setRecurringBudgetCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertFalse(initialRecurrenceFrequency"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            \u003d\u003d expectedModel.getAddressBook().getMaximumBudget().getNumberOfSecondsToRecurAgain());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(new SetRecurringBudgetCommand(1)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .equals(new SetRecurringBudgetCommand(1)));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 67
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SignUpCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.model.user.UsernameTest.VALID_USERNAME_STRING;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommandTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullUsername_throwsNullPointerException() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new SignUpCommand(null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_userAcceptedByModel_signUpSuccessful() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        CommandResult commandResult \u003d new SignUpCommand(new Username(VALID_USERNAME_STRING))"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .execute(model, commandHistory);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(String.format(SignUpCommand.MESSAGE_SIGN_UP_SUCCESS, VALID_USERNAME_STRING),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(model.isUserExists(new Username(VALID_USERNAME_STRING)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute_duplicateRejectedByModel_signUpFailed() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(model.isUserExists(TypicalExpenses.SAMPLE_USERNAME));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(UserAlreadyExistsException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new SignUpCommand(TypicalExpenses.SAMPLE_USERNAME).execute(model, commandHistory);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 51,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/StatsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.commands.StatsCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.ShowStatsRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatsCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private Model model \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private Model expectedModel \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public StatsCommandTest() throws UserAlreadyExistsException, NonExistentUserException, NoUserSelectedException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructorValidParameters() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        StatsCommand statsCommand \u003d new StatsCommand(6, \"d\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(statsCommand.equals(new StatsCommand(6, \"d\")));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        statsCommand \u003d new StatsCommand();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(statsCommand.equals(new StatsCommand(7, \"d\")));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        statsCommand \u003d new StatsCommand(8, \"m\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(statsCommand.equals(new StatsCommand(8, \"m\")));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructorInvalidParameters() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StatsCommand(1, null));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StatsCommand(1, \"asd\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new StatsCommand(0, \"d\"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void executeStatsSuccess() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        StatsCommand statsCommand \u003d new StatsCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        statsCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(model.getStatsMode() \u003d\u003d StatsMode.DAY);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertCommandSuccess(new StatsCommand(), model, commandHistory, MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowStatsRequestEvent);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertEquals(10, eventsCollectorRule.eventsCollector.getSize());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 4,
      "jonathantjm": 58,
      "winsonhys": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstExpense;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void setUp() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // set up of models\u0027 undo/redo history"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(model);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteFirstExpense(expectedModel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void execute() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple undoable states in model"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // single undoable state in model"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // no undoable states in model"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 3,
      "-": 37,
      "jcjxwy": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_KFC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_KFC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_1990;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_2018;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_DATE_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_KFC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FOOD;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_1990;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KFC;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expectedExpenseWithDate \u003d new ExpenseBuilder(BOB)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .withTags(VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .withDate(VALID_DATE_1990).build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + CATEGORY_DESC_BOB + DATE_DESC_2018"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + CATEGORY_DESC_BOB + DATE_DESC_2018"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // multiple category - last category accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + CATEGORY_DESC_AMY + CATEGORY_DESC_BOB + DATE_DESC_2018"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + CATEGORY_DESC_BOB + COST_DESC_AMY + DATE_DESC_2018"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        // add date"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + CATEGORY_DESC_BOB + COST_DESC_AMY"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND + DATE_DESC_1990, new AddCommand(expectedExpenseWithDate));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expectedExpenseMultipleTags \u003d new ExpenseBuilder(BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + CATEGORY_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND + DATE_DESC_2018, new AddCommand(expectedExpenseMultipleTags));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expectedExpense \u003d new ExpenseBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + CATEGORY_DESC_AMY + COST_DESC_AMY + DATE_DESC_1990,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new AddCommand(expectedExpense));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // no date"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expectedExpense2 \u003d new ExpenseBuilder(KFC).withDate(new Date().toString()).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_KFC + CATEGORY_DESC_KFC + COST_DESC_KFC + TAG_DESC_FOOD,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new AddCommand(expectedExpense2));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_IPHONE + CATEGORY_DESC_BOB + COST_DESC_BOB,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // missing category prefix"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_CATEGORY_IPHONE + COST_DESC_BOB,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + CATEGORY_DESC_BOB + VALID_COST_IPHONE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_IPHONE + VALID_CATEGORY_IPHONE + VALID_COST_IPHONE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + CATEGORY_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_CATEGORY_DESC + COST_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + CATEGORY_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Cost.MESSAGE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + CATEGORY_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        // invalid date"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + CATEGORY_DESC_BOB + COST_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + INVALID_DATE_DESC + VALID_TAG_FRIEND, Date.DATE_FORMAT_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + CATEGORY_DESC_BOB + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + CATEGORY_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        + COST_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 25,
      "winsonhys": 3,
      "-": 79,
      "jcjxwy": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(ExpenseUtil.getAddCommand(expense));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new AddCommand(expense), command);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d (AddCommand) parser.parseCommand(ExpenseUtil.getAddCommandAlias(expense));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new AddCommand(expense), command);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder(expense).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + INDEX_FIRST_EXPENSE.getOneBased() + \" \" + ExpenseUtil.getEditExpenseDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_EXPENSE, descriptor), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d ArgumentTokenizer.tokenize(\" n/foo bar baz\", PREFIX_NAME);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new FindCommand(new ExpenseContainsKeywordsPredicate(keywordsMap)), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + PREFIX_NAME + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new FindCommand(new ExpenseContainsKeywordsPredicate(keywordsMap)), command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_EXPENSE), command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS + \" 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS + \" 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parseCommand_login() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(parser.parseCommand(LoginCommand.COMMAND_WORD + \" u/userna p/assadd\") instanceof LoginCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(parser.parseCommand(LoginCommand.COMMAND_ALIAS + \" u/userna p/assadd\") instanceof LoginCommand);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parseCommand_signUpCommand() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(parser.parseCommand(SignUpCommand.COMMAND_WORD + \" ssssss\") instanceof SignUpCommand);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(parser.parseCommand(SignUpCommand.COMMAND_ALIAS + \" ssssss\") instanceof SignUpCommand);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parseCommand_setPassword() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(parser.parseCommand(SetPasswordCommand.COMMAND_WORD + \" o/dsdfsdf7 n/sdfsdf\")"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                instanceof SetPasswordCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(parser.parseCommand(SetPasswordCommand.COMMAND_ALIAS + \" o/dsdfsdf7 n/sdfsdf\")"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                instanceof SetPasswordCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void parseCommand_stats() throws Exception {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD) instanceof StatsCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_WORD + \" n/7 m/m\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_ALIAS) instanceof StatsCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(parser.parseCommand(StatsCommand.COMMAND_ALIAS + \" n/7 m/m\") instanceof StatsCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 23,
      "jonathantjm": 22,
      "-": 126,
      "jcjxwy": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/CommandParserTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing command parsers."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandParserTestUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String userInput, Command expectedCommand) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d parser.parse(userInput);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommand, command);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            pe.printStackTrace();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Invalid userInput.\", pe);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the parsing of {@code userInput} by {@code parser} is unsuccessful and the error message"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * equals to {@code expectedMessage}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertParseFailure(Parser parser, String userInput, String expectedMessage) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parse(userInput);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, pe.getMessage());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_GAME;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_GAME;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GAME;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.EditExpenseDescriptorBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_GAME, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CATEGORY_CONSTRAINTS); // invalid category"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Cost.MESSAGE_COST_CONSTRAINTS); // invalid address"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_CATEGORY_DESC, Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // valid category followed by invalid category."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // The test case for invalid category followed by valid category"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \"1\" + CATEGORY_DESC_BOB + INVALID_CATEGORY_DESC, Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Expense} being edited,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + VALID_COST_GAME + VALID_CATEGORY_GAME,"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_GAME)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCategory(VALID_CATEGORY_IPHONE).withCost(VALID_COST_GAME)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_BOB;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new EditExpenseDescriptorBuilder().withCategory(VALID_CATEGORY_IPHONE)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withName(VALID_NAME_GAME).build();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // category"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_AMY;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCategory(VALID_CATEGORY_GAME).build();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + COST_DESC_AMY;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCost(VALID_COST_GAME).build();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + CATEGORY_DESC_AMY + COST_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + TAG_DESC_FRIEND + CATEGORY_DESC_AMY + COST_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + CATEGORY_DESC_BOB + COST_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCategory(VALID_CATEGORY_IPHONE)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCost(VALID_COST_IPHONE).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_CATEGORY_DESC + CATEGORY_DESC_BOB;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditCommand.EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCategory(VALID_CATEGORY_IPHONE).build();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + INVALID_CATEGORY_DESC + COST_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + CATEGORY_DESC_BOB;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptorBuilder().withCategory(VALID_CATEGORY_IPHONE)"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCost(VALID_COST_IPHONE).build();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_EXPENSE;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        EditExpenseDescriptor descriptor \u003d new EditExpenseDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 8,
      "winsonhys": 3,
      "-": 139,
      "jcjxwy": 54
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_COST_KEYWORDS_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_DATE_KEYWORDS_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.FindCommand.MESSAGE_INVALID_RANGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "content": "//@@author Jiang Chen"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // one keyword"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"n/Have Lunch\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new FindCommand(new ExpenseContainsKeywordsPredicate(keywordsMap));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseSuccess(parser, \" n/Have Lunch\", expectedFindCommand);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseSuccess(parser, \" n/   Have Lunch\", expectedFindCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // multiple keywords"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"n/Buy books c/Book\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new ExpenseContainsKeywordsPredicate(keywordsMap));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseSuccess(parser, \" n/Buy books c/Book\", expectedFindCommand);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void parse_invalidArgs_parseFail() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //invalid name keywords"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" n/Have Lunch@KFC \","
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Name.MESSAGE_NAME_CONSTRAINTS));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //invalid category keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" c/Lunch@KFC  \","
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Category.MESSAGE_CATEGORY_CONSTRAINTS));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //invalid tag keywords"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" t/Lunch@KFC  \","
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Tag.MESSAGE_TAG_CONSTRAINTS));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //invalid cost keywords"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" $/2.320\","
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Cost.MESSAGE_COST_CONSTRAINTS));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" $/1.00:1.203\","
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Cost.MESSAGE_COST_CONSTRAINTS));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" $/5.00:1.00\","
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_INVALID_RANGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" $/1.00:2.00:3.00\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_INVALID_COST_KEYWORDS_FORMAT));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //invalid date keywords"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" d/60-02-2019\","
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Date.DATE_FORMAT_CONSTRAINTS));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" d/01-02-2019:99-02-2019\","
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, Date.DATE_FORMAT_CONSTRAINTS));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" d/10-01-2018:01-01-2018\","
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_INVALID_RANGE));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" d/01-01-2018:02-02-2018:02-03-2018\","
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, MESSAGE_INVALID_DATE_KEYWORDS_FORMAT));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //missing prefix or keywords"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" n/ \","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseFailure(parser, \" /School \","
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an {@code ArgumentMultiMap} which tokenize the {@code arg} based on prefixes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ArgumentMultimap prepareKeywords(String arg) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return ArgumentTokenizer.tokenize(\" \" + arg,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                PREFIX_NAME, PREFIX_CATEGORY, PREFIX_COST, PREFIX_TAG, PREFIX_DATE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "-": 27,
      "jcjxwy": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LoginCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.LoginCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.PasswordTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class LoginCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private LoginCommandParser parser \u003d new LoginCommandParser();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_validUsername() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, \" \" + CliSyntax.PREFIX_USERNAME + UsernameTest.VALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new LoginCommand(new Username(UsernameTest.VALID_USERNAME_STRING), null));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_validUsernamePassword() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, \" \" + CliSyntax.PREFIX_USERNAME + UsernameTest.VALID_USERNAME_STRING"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + \" \" + CliSyntax.PREFIX_PASSWORD + PasswordTest.VALID_PASSWORD_STRING,"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new LoginCommand(new Username(UsernameTest.VALID_USERNAME_STRING),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        new Password(PasswordTest.VALID_PASSWORD_STRING, true)));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidSyntax() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, UsernameTest.INVALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, LoginCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidUsername() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, \" \" + CliSyntax.PREFIX_USERNAME + UsernameTest.INVALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                Username.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidPassword() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                \" \" + CliSyntax.PREFIX_USERNAME + UsernameTest.VALID_USERNAME_STRING + \" \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        + CliSyntax.PREFIX_PASSWORD + PasswordTest.INVALID_PASSWORD_STRING_SHORT,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \" \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String VALID_CATEGORY \u003d \"School\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"12313123.00\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(INDEX_FIRST_EXPENSE, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void parseCategory_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseCategory((String) null));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void parseCategory_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseCategory(INVALID_CATEGORY));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void parseCategory_validValueWithoutWhitespace_returnsCategory() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(VALID_CATEGORY));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void parseCategory_validValueWithWhitespace_returnsTrimmedCategory() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String categoryWithWhitespace \u003d WHITESPACE + VALID_CATEGORY + WHITESPACE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Category expectedCategory \u003d new Category(VALID_CATEGORY);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedCategory, ParserUtil.parseCategory(categoryWithWhitespace));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Cost expectedCost \u003d new Cost(VALID_ADDRESS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(expectedCost, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Cost expectedCost \u003d new Cost(VALID_ADDRESS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(expectedCost, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 7,
      "-": 159,
      "jcjxwy": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Test scope: similar to {@code DeleteCommandParserTest}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * @see DeleteCommandParserTest"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommandParser parser \u003d new SelectCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_validArgs_returnsSelectCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_EXPENSE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "jcjxwy": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetPasswordCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SetPasswordCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.PasswordTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SetPasswordCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private SetPasswordCommandParser parser \u003d new SetPasswordCommandParser();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_validPassword() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, \" \" + CliSyntax.PREFIX_OLD_PASSWORD + PasswordTest.VALID_PASSWORD_STRING"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + \" \" + CliSyntax.PREFIX_NEW_PASSWORD + PasswordTest.VALID_PASSWORD_STRING,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new SetPasswordCommand(PasswordTest.VALID_PASSWORD, PasswordTest.VALID_PASSWORD));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidSyntax() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, PasswordTest.VALID_PASSWORD_STRING,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SetPasswordCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidOldPassword() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, \" \" + CliSyntax.PREFIX_OLD_PASSWORD"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        + PasswordTest.INVALID_PASSWORD_STRING_SHORT + \" \" + CliSyntax.PREFIX_NEW_PASSWORD"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        + PasswordTest.VALID_PASSWORD_STRING,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidNewPassword() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, \" \" + CliSyntax.PREFIX_OLD_PASSWORD"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        + PasswordTest.VALID_PASSWORD_STRING + \" \" + CliSyntax.PREFIX_NEW_PASSWORD"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                        + PasswordTest.INVALID_PASSWORD_STRING_SHORT,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                Password.MESSAGE_PASSWORD_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 44
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SetRecurringBudgetCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_ONE_HOUR;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_ONE_MINUTE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIME_ONE_SECOND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SECONDS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.logic.commands.SetRecurringBudgetCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class SetRecurringBudgetCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private SetRecurringBudgetCommandParser parser \u003d new SetRecurringBudgetCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void parse_validSecondsArgs_returnsSetRecurringBudgetCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertParseSuccess(parser, VALID_TIME_ONE_SECOND, new SetRecurringBudgetCommand(1));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void parse_validMinutesArgs_returnsSetRecurringBudgetCommand() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertParseSuccess(parser, VALID_TIME_ONE_MINUTE, new SetRecurringBudgetCommand(60));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void parse_validHoursArgs_returnsSetRecurringBudgetCommand() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertParseSuccess(parser, VALID_TIME_ONE_HOUR,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            new SetRecurringBudgetCommand(60 * 60));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void parse_validMultipleArgs_returnsSetRecurringBudgetCommand() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertParseSuccess(parser, VALID_TIME_ONE_MINUTE + VALID_TIME_ONE_SECOND,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            new SetRecurringBudgetCommand(61));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            SetRecurringBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void parse_negativeArgs_throwsParseException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertParseFailure(parser, \" \" + PREFIX_SECONDS + \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            SetRecurringBudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 52
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SignUpCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.logic.commands.SignUpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SignUpCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private SignUpCommandParser parser \u003d new SignUpCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_validUsername() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseSuccess(parser, UsernameTest.VALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new SignUpCommand(new Username(UsernameTest.VALID_USERNAME_STRING)));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void parse_invalidUsername() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertParseFailure(parser, UsernameTest.INVALID_USERNAME_STRING,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SignUpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/StatsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class StatsCommandParserTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private StatsCommandParser parser \u003d new StatsCommandParser();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void parseAllFieldsPresentSuccess() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseSuccess(parser, \" n/7 m/m\", new StatsCommand(7, \"m\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseSuccess(parser, \" n/6 m/d\", new StatsCommand(6, \"d\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void parseNoParamsSuccess() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseSuccess(parser, \"\", new StatsCommand(7, \"d\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void parseFieldMissingFailure() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // missing mode prefix"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseFailure(parser, \" n/7\", expectedMessage);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // missing number"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseFailure(parser, \" m/d\", expectedMessage);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void parseInvalidValueFailure() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, StatsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // number less than 0"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseFailure(parser, \" n/0 m/m\", expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // mode not d or m"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseFailure(parser, \" n/1 m/p\", expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // both params invalid"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertParseFailure(parser, \" n/0 m/p\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 49
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SCHOOLFEE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Password;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook(ModelUtil.TEST_USERNAME, Optional.empty());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getExpenseList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.addressBook.resetData(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(this.addressBook.getMaximumBudget().getBudgetCap() \u003d\u003d 0);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(newData.getMaximumBudget(), addressBook.getMaximumBudget());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void resetData_withDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Two expenses with the same identity fields"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCost(VALID_COST_IPHONE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e newExpenses \u003d Arrays.asList(SCHOOLFEE, editedAlice);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newExpenses);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expect(DuplicateExpenseException.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        addressBook.hasExpense(null);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_expenseNotInAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(addressBook.hasExpense(SCHOOLFEE));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_expenseInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        addressBook.addExpense(SCHOOLFEE);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(addressBook.hasExpense(SCHOOLFEE));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_expenseWithSameIdentityFieldsInAddressBook_returnsTrue() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        addressBook.addExpense(SCHOOLFEE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCost(VALID_COST_IPHONE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(addressBook.hasExpense(editedAlice));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void getExpenseList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        addressBook.getExpenseList().remove(0);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * A stub ReadOnlyAddressBook whose expenses list can violate interface constraints."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        private final ObservableList\u003cExpense\u003e expenses \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        AddressBookStub(Collection\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            this.expenses.setAll(expenses);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        public ObservableList\u003cExpense\u003e getExpenseList() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            return expenses;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        public Budget getMaximumBudget() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return new Budget(\"0.00\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public Username getUsername() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return ModelUtil.TEST_USERNAME;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public Optional\u003cPassword\u003e getPassword() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public boolean isMatchPassword(Password password) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 18,
      "winsonhys": 6,
      "-": 81,
      "jcjxwy": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/model/ModelManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ICECREAM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SCHOOLFEE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.logic.commands.StatsCommand.StatsMode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.ExpenseContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManagerTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private ModelManager modelManager \u003d (ModelManager) ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private ModelManager modelManagerLoggedOut \u003d new ModelManager();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public ModelManagerTest() throws UserAlreadyExistsException, NonExistentUserException, NoUserSelectedException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void checkBudgetRestart_noFrequency_doesNotResetSpending() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        double previousExpenses \u003d modelManager.getMaximumBudget().getCurrentExpenses();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        modelManager.checkBudgetRestart();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(modelManager.getAddressBook().getMaximumBudget().getCurrentExpenses() \u003d\u003d previousExpenses);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void checkBudgetRestart_frequency_doesNotResetSpendingIfNotNextRecurrence() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        double previousExpenses \u003d modelManager.getMaximumBudget().getCurrentExpenses();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        modelManager.setRecurrenceFrequency(Integer.MAX_VALUE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        modelManager.checkBudgetRestart();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(modelManager.getAddressBook().getMaximumBudget().getCurrentExpenses() \u003d\u003d previousExpenses);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void checkBudgetRestart_frequency_resetSpendingIfNextRecurrence() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        modelManager.setRecurrenceFrequency(0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            Thread.sleep(1000);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            System.out.println(\"Interrupted. Skipping test.\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        modelManager.checkBudgetRestart();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(modelManager.getAddressBook().getMaximumBudget().getCurrentExpenses() \u003d\u003d 0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_nullExpense_throwsNullPointerException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManager.hasExpense(null);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_expenseNotInAddressBook_returnsFalse() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(modelManager.hasExpense(SCHOOLFEE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_expenseInAddressBook_returnsTrue() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManager.addExpense(SCHOOLFEE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(modelManager.hasExpense(SCHOOLFEE));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void getFilteredExpenseList_modifyList_throwsUnsupportedOperationException() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManager.getFilteredExpenseList().remove(0);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void getAddressBook_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        modelManagerLoggedOut.getAddressBook();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void indicateAddressBookChanged_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        modelManagerLoggedOut.indicateAddressBookChanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void hasExpense_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManagerLoggedOut.hasExpense(SCHOOLFEE);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void getFilteredExpenseList_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManagerLoggedOut.getFilteredExpenseList();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void updateFilteredExpenseList_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManagerLoggedOut.updateFilteredExpenseList(unused -\u003e true);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void canUndoAddressBook_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        modelManagerLoggedOut.canUndoAddressBook();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void commitAddressBook_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        modelManagerLoggedOut.commitAddressBook();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void getExpenseStats_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        modelManagerLoggedOut.getExpenseStats();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void updateExpenseStats_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        modelManagerLoggedOut.updateExpenseStats(unused -\u003e true);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void getExpenseStatsReturnsCorrectStatsMode() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        modelManager.updateStatsMode(StatsMode.DAY);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(modelManager.getStatsMode() \u003d\u003d StatsMode.DAY);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        modelManager.updateStatsMode(StatsMode.MONTH);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(modelManager.getStatsMode() \u003d\u003d StatsMode.MONTH);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void indicateUserLoggedIn_noUserSelected_throwsNoUserSelectedException() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NoUserSelectedException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        modelManagerLoggedOut.indicateUserLoggedIn();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void equals() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        AddressBook addressBook \u003d new AddressBookBuilder().withExpense(SCHOOLFEE).withExpense(ICECREAM).build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        AddressBook differentAddressBook \u003d new AddressBook(ModelUtil.TEST_USERNAME, Optional.empty());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        modelManager \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager modelManagerCopy \u003d new ModelManager(addressBook, userPrefs);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManagerCopy));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(modelManager));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(null));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(5));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // different addressBook -\u003e returns false"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(differentAddressBook, userPrefs)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different filteredList -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d ArgumentTokenizer.tokenize(\" n/\""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + SCHOOLFEE.getName().expenseName, PREFIX_NAME);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManager.updateFilteredExpenseList(new ExpenseContainsKeywordsPredicate(keywordsMap));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(modelManager.equals(new ModelManager(addressBook, userPrefs)));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // resets modelManager to initial state for upcoming tests"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        modelManager.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // different userPrefs -\u003e returns true"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs differentUserPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        differentUserPrefs.setAddressBookDirPath(Paths.get(\"differentFilePath\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(modelManager.equals(new ModelManager(addressBook, differentUserPrefs)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 50,
      "jonathantjm": 23,
      "winsonhys": 29,
      "-": 68,
      "jcjxwy": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/SampleDataUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class SampleDataUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void testGetSampleExpenses() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertEquals(SampleDataUtil.getSampleExpenses().length, 6);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testGetSampleAddressBook() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        ReadOnlyAddressBook book \u003d SampleDataUtil.getSampleAddressBook();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense[] sampleExpenses \u003d SampleDataUtil.getSampleExpenses();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (Expense p : sampleExpenses) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            Assert.assertTrue(book.getExpenseList().contains(p));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertEquals(SampleDataUtil.getSampleExpenses().length, sampleExpenses.length);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 17,
      "jcjxwy": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/VersionedAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertThrows;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TOY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class VersionedAddressBookTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithAmy \u003d new AddressBookBuilder().withExpense(AMY).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithBob \u003d new AddressBookBuilder().withExpense(BOB).build();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final ReadOnlyAddressBook addressBookWithCarl \u003d new AddressBookBuilder().withExpense(TOY).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook emptyAddressBook \u003d new AddressBookBuilder().build();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_singleAddressBook_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerAtEndOfStateList_noStatesRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy, addressBookWithBob),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commit_multipleAddressBookPointerNotAtEndOfStateList_statesAfterPointerRemovedCurrentStateSaved() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canUndo_multipleAddressBookPointerAtStartOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canUndo());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerNotAtEndOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtStartOfStateList_returnsTrue() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_singleAddressBook_returnsFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void canRedo_multipleAddressBookPointerAtEndOfStateList_returnsFalse() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerNotAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(addressBookWithAmy, addressBookWithBob));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_singleAddressBook_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void undo_multipleAddressBookPointerAtStartOfStateList_throwsNoUndoableStateException() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoUndoableStateException.class, versionedAddressBook::undo);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerNotAtEndOfStateList_success() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(emptyAddressBook, addressBookWithAmy),"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithBob,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtStartOfStateList_success() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 2);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertAddressBookListStatus(versionedAddressBook,"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(emptyAddressBook),"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.singletonList(addressBookWithBob));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_singleAddressBook_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(emptyAddressBook);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void redo_multipleAddressBookPointerAtEndOfStateList_throwsNoRedoableStateException() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                emptyAddressBook, addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThrows(VersionedAddressBook.NoRedoableStateException.class, versionedAddressBook::redo);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook copy \u003d prepareAddressBookList(addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(copy));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(versionedAddressBook.equals(versionedAddressBook));"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(null));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(1));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // different state list -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentAddressBookList \u003d prepareAddressBookList(addressBookWithBob, addressBookWithCarl);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentAddressBookList));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        // different current pointer index -\u003e returns false"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook differentCurrentStatePointer \u003d prepareAddressBookList("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                addressBookWithAmy, addressBookWithBob);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        shiftCurrentStatePointerLeftwards(versionedAddressBook, 1);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.equals(differentCurrentStatePointer));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code versionedAddressBook} is currently pointing at {@code expectedCurrentState},"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * states before {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesBeforePointer},"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * and states after {@code versionedAddressBook#currentStatePointer} is equal to {@code expectedStatesAfterPointer}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertAddressBookListStatus(VersionedAddressBook versionedAddressBook,"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesBeforePointer,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "                                             ReadOnlyAddressBook expectedCurrentState,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                                             List\u003cReadOnlyAddressBook\u003e expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // check state currently pointing at is correct"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(versionedAddressBook), expectedCurrentState);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // shift pointer to start of state list"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        while (versionedAddressBook.canUndo()) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states before pointer are correct"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesBeforePointer) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // check states after pointer are correct"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyAddressBook expectedAddressBook : expectedStatesAfterPointer) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.redo();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, new AddressBook(versionedAddressBook));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // check that there are no more states after pointer"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(versionedAddressBook.canRedo());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        // revert pointer to original position"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedStatesAfterPointer.forEach(unused -\u003e versionedAddressBook.undo());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code VersionedAddressBook} with the {@code addressBookStates} added into it, and the"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code VersionedAddressBook#currentStatePointer} at the end of list."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private VersionedAddressBook prepareAddressBookList(ReadOnlyAddressBook... addressBookStates) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addressBookStates.length \u003d\u003d 0);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        VersionedAddressBook versionedAddressBook \u003d new VersionedAddressBook(addressBookStates[0]);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 1; i \u003c addressBookStates.length; i++) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.resetData(addressBookStates[i]);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.commit();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shifts the {@code versionedAddressBook#currentStatePointer} by {@code count} to the left of its list."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    private void shiftCurrentStatePointerLeftwards(VersionedAddressBook versionedAddressBook, int count) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c count; i++) {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            versionedAddressBook.undo();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 292,
      "jcjxwy": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/budget/BudgetTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class BudgetTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String VALID_BUDGET \u003d \"2.00\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String INVALID_BUDGET \u003d \"A\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Budget(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Budget(BudgetTest.INVALID_BUDGET));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void isValidBudget() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Budget.isValidBudget(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        // invalid costs"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertFalse(Budget.isValidBudget(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertFalse(Budget.isValidBudget(\"200\")); // number only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        // valid costs"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"255.00\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"1.00\")); // one dollar"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(Budget.isValidBudget(\"231231232131231.00\")); // high ses budget"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(new Budget(0, 0).equals(new Budget(\"0.00\")));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(new Budget(0, 0).equals(new Budget(0, 0, null, 50000)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Cost(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        String invalidCost \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Cost(invalidCost));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void isValidCost() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Cost.isValidCost(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        // invalid costs"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertFalse(Cost.isValidCost(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertFalse(Cost.isValidCost(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertFalse(Cost.isValidCost(\"200\")); // number only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        // valid costs"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(Cost.isValidCost(\"255.00\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(Cost.isValidCost(\"1.00\")); // one dollar"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertTrue(Cost.isValidCost(\"231231232131231.00\")); // long cost"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 14,
      "-": 24
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/CategoryTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class CategoryTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Category(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void constructor_invalidCategory_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String invalidCategory \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Category(invalidCategory));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void isValidCategory() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // null category"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Category.isValidCategory(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // invalid category"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(Category.isValidCategory(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(Category.isValidCategory(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // valid category"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(Category.isValidCategory(\"School\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(Category.isValidCategory(\"Oct1\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(Category.isValidCategory(\"124293842033123\")); // long numbers"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 1,
      "-": 20,
      "jcjxwy": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/DateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import java.util.Calendar;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "//@@author jonathantjm"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "public class DateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Date(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructor_invalidDate_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        String invalidDate \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Date(invalidDate));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void constructor_validDate() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date test \u003d new Date();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        test.fullDate.set(2018, 1, 15);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date testDate \u003d new Date(\"15-02-2018\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(testDate.equals(test));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Calendar now \u003d Calendar.getInstance();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        testDate \u003d new Date();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(now.get(Calendar.DATE) \u003d\u003d testDate.fullDate.get(Calendar.DATE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(now.get(Calendar.MONTH) \u003d\u003d testDate.fullDate.get(Calendar.MONTH));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(now.get(Calendar.YEAR) \u003d\u003d testDate.fullDate.get(Calendar.YEAR));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void isValidDate() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // null date"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Date.isValidDate(null));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // blank date"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"\")); // empty string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\" \")); // spaces only"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"09-2018\")); // missing day"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-2018\")); // missing month"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"15-09\")); // missing year"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"49-02-2018\")); // invalid day"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"15-13-2018\")); // invalid month"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"15-09-20192\")); // invalid year"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-02-2018\")); // invalid date"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"31-04-2018\")); // invalid date"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(Date.isValidDate(\"13/02/2018\")); // invalid separator"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        // valid Date"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"15-02-2018\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"15-02-2017\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-12-2017\"));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"1-12-2017\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.isValidDate(\"31-1-2017\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void validToString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date test \u003d new Date(\"15-02-2018\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(\"15-02-2018\".equals(\"\" + test));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date testDate \u003d new Date(\"02-10-2018\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(testDate.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertFalse(testDate.equals(\" \"));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(testDate.equals(testDate));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(testDate.equals(new Date(\"02-10-2018\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public void compare() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        Date date1 \u003d new Date (\"2-10-2018\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.compare(date1, new Date (\"3-10-2018\")) \u003d\u003d 1);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.compare(date1, new Date (\"2-10-2018\")) \u003d\u003d 0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        assertTrue(Date.compare(date1, new Date (\"1-10-2018\")) \u003d\u003d -1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentMultimap;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.parser.ArgumentTokenizer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "content": "//@@author Jiang Chen"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpenseContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap firstPredicateKeywordMap \u003d prepareKeywords(\"n/first\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap secondPredicateKeywordMap \u003d prepareKeywords(\"n/second\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(firstPredicateKeywordMap);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(secondPredicateKeywordMap);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(firstPredicateKeywordMap);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"n/Alice\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"n/Alice Bob\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Only one matching name keyword"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"n/Alice Carol\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"n/ALicE BOb\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"n/\");;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"n/Have Lunch\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Drink\").build()));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Name Keywords match category and address, but does not match name"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"n/12345 2.00\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Alice\").withCategory(\"12345\")"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCost(\"2.00\").build()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_tagContainKeywords_returnTrue() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One tag keyword, one tag"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"t/Lunch\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withTags(\"Lunch\").build()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One tag keywords, multiple tags"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withTags(\"Lunch\", \"Cheap\").build()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple tag keywords, multiple tags, all match"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"t/Lunch t/Cheap\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withTags(\"Cheap\", \"Lunch\").build()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple tag keywords, multiple tags, one match"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withTags(\"Nice\", \"Lunch\").build()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_tagDoesNotContainKeywords_returnFalse() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One tag keyword, one tag"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"t/Dinner\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withTags(\"Lunch\").build()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One tag keywords, multiple tags"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withTags(\"Lunch\", \"Cheap\").build()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple tag keywords, multiple tags, all don\u0027t match"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"t/Dinner t/Expensive\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withTags(\"Cheap\", \"Lunch\").build()));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_categoryContainKeywords_returnTrue() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"c/School\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"School\").build()));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"c/Have fun\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"Have fun\").build()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d ArgumentTokenizer.tokenize(\" c/Play with friends\", PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"Play with friends\").build()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Only one matching name keyword"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"c/Buy books\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"Buy lunch\").build()));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"c/FOod\");"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCategory(\"food\").build()));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_categoryDoesNotContainKeywords_returnFalse() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"c/Food\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"School\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"c/Have fun\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"Buy books\").build()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"c/Play with friends\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCategory(\"Buy books\").build()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_dateWithinRange_returnTrue() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"d/01-10-2018\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDate(\"01-10-2018\").build()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"d/01-10-2018:07-10-2018\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDate(\"05-10-2018\").build()));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withDate(\"07-10-2018\").build()));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_dateOutsideRange_returnTrue() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"d/02-10-2018\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDate(\"01-10-2018\").build()));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"d/01-10-2018:07-10-2018\");"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withDate(\"08-10-2018\").build()));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_costWithinRange_returnTrue() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"$/2.00\");"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCost(\"2.00\").build()));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"$/1.00:5.00\");"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCost(\"3.00\").build()));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withCost(\"5.00\").build()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_costOutsideRange_returnTrue() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"$/3.00\");"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCost(\"2.00\").build()));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        keywordsMap \u003d prepareKeywords(\"$/1.00:5.00\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        predicate \u003d new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCost(\"6.00\").build()));"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withCost(\"0.50\").build()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_expenseMatchesMultipleKeywords_returnTrue() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //Multiple keywords, all match"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"n/Have Lunch c/Food d/01-02-2018:28-02-2018\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Have Lunch\").withCategory(\"Food\")"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withDate(\"02-02-2018\").build()));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(predicate.test(new ExpenseBuilder().withName(\"Have Lunch\").withCategory(\"Food\")"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withDate(\"20-02-2018\").withCost(\"123.00\").build()));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void test_expenseDoesNotMatchAllKeywords_returnFalse() {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //Only one keyword matches"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ArgumentMultimap keywordsMap \u003d prepareKeywords(\"n/Have Lunch c/Food d/01-02-2018:28-02-2018\");"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseContainsKeywordsPredicate(keywordsMap);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Drink\").withCategory(\"Food\")"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withDate(\"02-01-2018\").build()));"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        //Some keywords match but not all"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(predicate.test(new ExpenseBuilder().withName(\"Drink\").withCategory(\"Food\")"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withDate(\"20-02-2018\").build()));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an {@code ArgumentMultiMap} which tokenize the {@code arg} based on prefixes."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ArgumentMultimap prepareKeywords(String arg) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return ArgumentTokenizer.tokenize(\" \" + arg,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                PREFIX_NAME, PREFIX_CATEGORY, PREFIX_COST, PREFIX_TAG, PREFIX_DATE);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "jcjxwy": 278
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/ExpenseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SCHOOLFEE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpenseTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expense.getTags().remove(0);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void expenseHashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // same expense -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new ExpenseBuilder(SCHOOLFEE).build().hashCode() \u003d\u003d new ExpenseBuilder(SCHOOLFEE).build().hashCode());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different expense -\u003e return false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(new ExpenseBuilder(BOB).build().hashCode() \u003d\u003d new ExpenseBuilder(SCHOOLFEE).build().hashCode());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void isSameExpense() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(SCHOOLFEE.isSameExpense(SCHOOLFEE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(SCHOOLFEE.isSameExpense(null));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different category and cost -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(SCHOOLFEE)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                .withCategory(VALID_CATEGORY_IPHONE).withCost(VALID_COST_IPHONE).build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(SCHOOLFEE.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(SCHOOLFEE.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // same name, same category, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCost(VALID_COST_IPHONE)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(SCHOOLFEE.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // same name, same category, different attributes -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCost(VALID_COST_IPHONE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(SCHOOLFEE.isSameExpense(editedAlice));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense aliceCopy \u003d new ExpenseBuilder(SCHOOLFEE).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(SCHOOLFEE, aliceCopy);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(SCHOOLFEE, SCHOOLFEE);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(null, SCHOOLFEE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different type -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(5, SCHOOLFEE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different expense -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(SCHOOLFEE, BOB);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(SCHOOLFEE, editedAlice);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // different category -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCategory(VALID_CATEGORY_IPHONE).build();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(SCHOOLFEE, editedAlice);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCost(VALID_COST_IPHONE).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(SCHOOLFEE, editedAlice);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(SCHOOLFEE, editedAlice);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "winsonhys": 6,
      "-": 49,
      "jcjxwy": 46
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/expense/UniqueExpenseListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.model.expense;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SCHOOLFEE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.exceptions.DuplicateExpenseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.exceptions.ExpenseNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class UniqueExpenseListTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private final UniqueExpenseList uniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void contains_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.contains(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void contains_expenseNotInList_returnsFalse() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(uniqueExpenseList.contains(SCHOOLFEE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void contains_expenseInList_returnsTrue() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(SCHOOLFEE));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void contains_expenseWithSameIdentityFieldsInList_returnsTrue() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCost(VALID_COST_IPHONE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(uniqueExpenseList.contains(editedAlice));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void add_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void add_duplicateExpense_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expect(DuplicateExpenseException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense_nullTargetExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpense(null, SCHOOLFEE);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense_nullEditedExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpense(SCHOOLFEE, null);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense_targetExpenseNotInList_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expect(ExpenseNotFoundException.class);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpense(SCHOOLFEE, SCHOOLFEE);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense_editedExpenseIsSameExpense_success() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpense(SCHOOLFEE, SCHOOLFEE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedUniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense_editedExpenseHasSameIdentity_success() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedAlice \u003d new ExpenseBuilder(SCHOOLFEE).withCost(VALID_COST_IPHONE).withTags(VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpense(SCHOOLFEE, editedAlice);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedUniqueExpenseList.add(editedAlice);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense_editedExpenseHasDifferentIdentity_success() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpense(SCHOOLFEE, BOB);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedUniqueExpenseList.add(BOB);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpense_editedExpenseHasNonUniqueIdentity_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(BOB);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expect(DuplicateExpenseException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpense(SCHOOLFEE, BOB);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void remove_nullExpense_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.remove(null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void remove_expenseDoesNotExist_throwsExpenseNotFoundException() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expect(ExpenseNotFoundException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.remove(SCHOOLFEE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void remove_existingExpense_removesExpense() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.remove(SCHOOLFEE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses_nullUniqueExpenseList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpenses((UniqueExpenseList) null);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses_uniqueExpenseList_replacesOwnListWithProvidedUniqueExpenseList() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedUniqueExpenseList.add(BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpenses(expectedUniqueExpenseList);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses_nullList_throwsNullPointerException() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpenses((List\u003cExpense\u003e) null);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses_list_replacesOwnListWithProvidedList() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.add(SCHOOLFEE);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e expenseList \u003d Collections.singletonList(BOB);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpenses(expenseList);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        UniqueExpenseList expectedUniqueExpenseList \u003d new UniqueExpenseList();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedUniqueExpenseList.add(BOB);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedUniqueExpenseList, uniqueExpenseList);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void setExpenses_listWithDuplicateExpenses_throwsDuplicateExpenseException() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cExpense\u003e listWithDuplicateExpenses \u003d Arrays.asList(SCHOOLFEE, SCHOOLFEE);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expect(DuplicateExpenseException.class);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.setExpenses(listWithDuplicateExpenses);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asUnmodifiableObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        uniqueExpenseList.asUnmodifiableObservableList().remove(0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 1,
      "-": 96,
      "jcjxwy": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/PasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class PasswordTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String INVALID_PASSWORD_STRING_SPACE \u003d \" ______\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String INVALID_PASSWORD_STRING_SHORT \u003d \"_____\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String VALID_PASSWORD_STRING \u003d \"aaaaaa\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Password VALID_PASSWORD \u003d new Password(VALID_PASSWORD_STRING, true);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullPlainString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new Password(null, true);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_nullHashString_throwsNullPointerException() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new Password(null, false);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_validPlainString_assertNoException() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new Password(VALID_PASSWORD_STRING, true);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_hashString_assertNoException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new Password(INVALID_PASSWORD_STRING_SHORT, false);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new Password(INVALID_PASSWORD_STRING_SPACE, false);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_hashString_assertNotRehashed() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new Password(INVALID_PASSWORD_STRING_SHORT, false).toString(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                INVALID_PASSWORD_STRING_SHORT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new Password(INVALID_PASSWORD_STRING_SPACE, false).toString(),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                INVALID_PASSWORD_STRING_SPACE);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new Password(VALID_PASSWORD_STRING, false).toString(),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                VALID_PASSWORD_STRING);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testIsValidPassword() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertFalse(Password.isValidPassword(\"\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertFalse(Password.isValidPassword(INVALID_PASSWORD_STRING_SHORT));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertFalse(Password.isValidPassword(INVALID_PASSWORD_STRING_SPACE));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void toString_noPlainTextPassword() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(VALID_PASSWORD.toString(), VALID_PASSWORD_STRING);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(new Object(), VALID_PASSWORD); // different class"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(VALID_PASSWORD, new Password(INVALID_PASSWORD_STRING_SPACE, false));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(VALID_PASSWORD, new Password(VALID_PASSWORD_STRING, true)); // Same hash"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(VALID_PASSWORD, new Password(VALID_PASSWORD_STRING.toUpperCase(), true));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        // Different case should be a different password"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testHashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(VALID_PASSWORD.hashCode(), new Password(VALID_PASSWORD_STRING, true).hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        // Same hash"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/model/user/UsernameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.model.user;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class UsernameTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String INVALID_USERNAME_STRING \u003d \"*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final String VALID_USERNAME_STRING \u003d \"AAA\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Username(null));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void constructor_invalidUsername_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Username(INVALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void isValidUsername() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        // null user name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Username.isValidName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new Username(VALID_USERNAME_STRING), new Username(VALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new Username(VALID_USERNAME_STRING.toUpperCase()), new Username(VALID_USERNAME_STRING.toLowerCase()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new Username(VALID_USERNAME_STRING), new Username(VALID_USERNAME_STRING + VALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class JsonUserPrefsStorageTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"JsonUserPrefsStorageTest\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(userPrefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new UserPrefs(), actual);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs expected \u003d getTypicalUserPrefs();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, actual);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs getTypicalUserPrefs() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setGuiSettings(1000, 500, 300, 100);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        userPrefs.setAddressBookDirPath(Paths.get(\"\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void savePrefs_nullPrefs_throwsNullPointerException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(null, \"SomeFile.json\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        saveUserPrefs(new UserPrefs(), null);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                    .saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(1200, 200, 0, 2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Path pefsFilePath \u003d testFolder.getRoot().toPath().resolve(\"TempPrefs.json\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try writing when the file doesn\u0027t exist"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        //Try saving when the file exists"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(5, 5, 5, 5);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        jsonUserPrefsStorage.saveUserPrefs(original);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, readBack);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 133
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlExpensesStorage addressBookStorage \u003d new XmlExpensesStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "         * {@link XmlExpensesStorage} class."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlExpensesStorageTest} class."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        storageManager.saveExpenses(original);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAllExpenses(storageManager.getExpensesDirPath())"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                .get(original.getUsername());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void getAddressBookDirPath() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotNull(storageManager.getExpensesDirPath());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlExpensesStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                                             new JsonUserPrefsStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        storage.handleAddressBookChangedEvent("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new AddressBookChangedEvent(new AddressBook(ModelUtil.TEST_USERNAME, Optional.empty())));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    class XmlExpensesStorageExceptionThrowingStub extends XmlExpensesStorage {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public XmlExpensesStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        public void saveExpenses(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 16,
      "-": 90,
      "jcjxwy": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedBudgetTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "//@author winsonhys"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.BudgetTest;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "public class XmlAdaptedBudgetTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        XmlAdaptedBudget validXmlAdaptedBudget \u003d new XmlAdaptedBudget(new Budget(BudgetTest.VALID_BUDGET));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        String anotherValidBudgetString \u003d \"3.00\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertNotEquals(validXmlAdaptedBudget,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            new XmlAdaptedBudget(new Budget(anotherValidBudgetString)));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(validXmlAdaptedBudget, validXmlAdaptedBudget);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertNotEquals(validXmlAdaptedBudget, new Object());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 32
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedExpenseTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.storage.XmlAdaptedExpense.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ICECREAM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class XmlAdaptedExpenseTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String INVALID_CATEGORY \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final String INVALID_DATE \u003d \"0-0-0\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final String VALID_DATE \u003d \"01-10-2018\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String VALID_NAME \u003d ICECREAM.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String VALID_CATEGORY \u003d ICECREAM.getCategory().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final String VALID_ADDRESS \u003d ICECREAM.getCost().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d ICECREAM.getTags().stream()"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void toModelType_validExpenseDetails_returnsExpense() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d new XmlAdaptedExpense(ICECREAM);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(ICECREAM, expense.toModelType());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new XmlAdaptedExpense(INVALID_NAME, VALID_CATEGORY, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d new XmlAdaptedExpense(null, VALID_CATEGORY, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void toModelType_invalidCategory_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new XmlAdaptedExpense(VALID_NAME, INVALID_CATEGORY, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        String expectedMessage \u003d Category.MESSAGE_CATEGORY_CONSTRAINTS;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d new XmlAdaptedExpense(VALID_NAME, null, VALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new XmlAdaptedExpense(VALID_NAME, VALID_CATEGORY, INVALID_ADDRESS, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedMessage \u003d Cost.MESSAGE_COST_CONSTRAINTS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d new XmlAdaptedExpense(VALID_NAME, VALID_CATEGORY, null, VALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Cost.class.getSimpleName());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new XmlAdaptedExpense(VALID_NAME, VALID_CATEGORY, VALID_ADDRESS, VALID_DATE, invalidTags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expense::toModelType);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void toModelType_invalidDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                new XmlAdaptedExpense(VALID_NAME, VALID_CATEGORY, VALID_ADDRESS, INVALID_DATE, VALID_TAGS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        String expectedMessage \u003d Date.DATE_FORMAT_CONSTRAINTS;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void toModelType_nullDate_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlAdaptedExpense expense \u003d new XmlAdaptedExpense(VALID_NAME, VALID_CATEGORY, VALID_ADDRESS, null, VALID_TAGS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, expense::toModelType);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 14,
      "winsonhys": 3,
      "-": 56,
      "jcjxwy": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPasswordTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.PasswordTest;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlAdaptedPasswordTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlAdaptedPassword validXmlAdaptedPassword \u003d new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD_STRING);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD_STRING.toLowerCase()),"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD_STRING.toUpperCase()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(validXmlAdaptedPassword, validXmlAdaptedPassword);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD_STRING),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD_STRING));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD_STRING), new Object());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testToModelType_noArguments() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new XmlAdaptedPassword().toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testToModelType() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD_STRING).toModelType().toString(),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                PasswordTest.VALID_PASSWORD_STRING);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testConstructor_withSource() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new XmlAdaptedPassword(PasswordTest.VALID_PASSWORD).toModelType(),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                PasswordTest.VALID_PASSWORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedUsernameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.UsernameTest;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlAdaptedUsernameTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testEquals() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlAdaptedUsername validXmlAdaptedUsername \u003d new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING.toLowerCase()),"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING.toUpperCase()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(validXmlAdaptedUsername,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING + UsernameTest.VALID_USERNAME_STRING));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(validXmlAdaptedUsername, validXmlAdaptedUsername);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertNotEquals(new XmlAdaptedUsername(UsernameTest.VALID_USERNAME_STRING), new Object());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void testToModelType() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        new XmlAdaptedUsername(UsernameTest.INVALID_USERNAME_STRING).toModelType();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 35
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlExpensesStorageTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.GAMBLE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SCHOOLFEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.STOCK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class XmlExpensesStorageTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlExpensesStorageTest\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAddressBook_nullFilePath_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private java.util.Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return new XmlExpensesStorage(Paths.get(filePath)).readExpenses(addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefsFileInTestDataFolder !\u003d null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                ? TEST_DATA_FOLDER.resolve(prefsFileInTestDataFolder)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                : null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_missingFile_emptyResult() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(readAddressBook(\"NonExistentFile.xml\").isPresent());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void read_notXmlFormat_exceptionThrown() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        readAddressBook(\"NotXmlFormatAddressBook.xml\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "         * That means you should not have more than one exception test in one method"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void readAddressBook_invalidExpenseAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        readAddressBook(\"invalidExpenseAddressBook.xml\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void readAddressBook_invalidAndValidExpenseAddressBook_throwDataConversionException() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(DataConversionException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        readAddressBook(\"invalidAndValidExpenseAddressBook.xml\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void readAndSaveAddressBook_allInOrder_success() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d testFolder.getRoot().toPath().resolve(\"TempAddressBook.xml\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        XmlExpensesStorage xmlAddressBookStorage \u003d new XmlExpensesStorage(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save in new file and read back"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        xmlAddressBookStorage.saveExpenses(original, filePath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        ReadOnlyAddressBook readBack \u003d xmlAddressBookStorage.readExpenses(filePath).get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        //Modify data, overwrite exiting file, and read back"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        original.addExpense(STOCK);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        original.removeExpense(SCHOOLFEE);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        xmlAddressBookStorage.saveExpenses(original, filePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readExpenses(filePath).get();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        //Save and read without specifying file path"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        original.addExpense(GAMBLE);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        xmlAddressBookStorage.saveExpenses(original); //file path not specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        readBack \u003d xmlAddressBookStorage.readExpenses().get(); //file path not specified"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(readBack));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullAddressBook_throwsNullPointerException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(null, \"SomeFile.xml\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves {@code addressBook} at the specified {@code filePath}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            new XmlExpensesStorage(Paths.get(filePath))"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    .saveExpenses(addressBook, addToTestDataPathIfNotNull(filePath));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook_nullFilePath_throwsNullPointerException() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        saveAddressBook(new AddressBook(ModelUtil.TEST_USERNAME, Optional.empty()), null);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 15,
      "-": 103,
      "jcjxwy": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"XmlSerializableAddressBookTest\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final Path TYPICAL_EXPENSES_FILE \u003d TEST_DATA_FOLDER.resolve(\"typicalExpensesAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final Path INVALID_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"invalidExpenseAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final Path DUPLICATE_EXPENSE_FILE \u003d TEST_DATA_FOLDER.resolve(\"duplicateExpenseAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void toModelType_typicalExpensesFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_EXPENSES_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        AddressBook typicalExpensesAddressBook \u003d TypicalExpenses.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        System.out.println(addressBookFromFile.getMaximumBudget().getNumberOfSecondsToRecurAgain() + \" \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            + typicalExpensesAddressBook.getMaximumBudget().getNumberOfSecondsToRecurAgain());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(addressBookFromFile, typicalExpensesAddressBook);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(addressBookFromFile.getMaximumBudget(), typicalExpensesAddressBook.getMaximumBudget());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void toModelType_invalidExpenseFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_EXPENSE_FILE,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public void toModelType_duplicateExpenses_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(DUPLICATE_EXPENSE_FILE,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        thrown.expectMessage(XmlSerializableAddressBook.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "winsonhys": 2,
      "-": 40,
      "jcjxwy": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/AddressBookBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Addressbook objects."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Example usage: \u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " *     {@code AddressBook ab \u003d new AddressBookBuilder().withExpense(\"John\", \"Doe\").build();}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBook addressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        addressBook \u003d new AddressBook(ModelUtil.TEST_USERNAME, Optional.empty());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBookBuilder(AddressBook addressBook) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Adds a new {@code Expense} to the {@code AddressBook} that we are building."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public AddressBookBuilder withExpense(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        addressBook.addExpense(expense);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook build() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 3,
      "-": 28,
      "jcjxwy": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditExpenseDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * A utility class to help with building EditExpenseDescriptor objects."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class EditExpenseDescriptorBuilder {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private EditCommand.EditExpenseDescriptor descriptor;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptorBuilder() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptorBuilder(EditCommand.EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.descriptor \u003d new EditCommand.EditExpenseDescriptor(descriptor);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an {@code EditExpenseDescriptor} with fields containing {@code expense}\u0027s details"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptorBuilder(Expense expense) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor \u003d new EditExpenseDescriptor();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setName(expense.getName());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setCategory(expense.getCategory());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setCost(expense.getCost());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setTags(expense.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setDate(expense.getDate());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Sets the {@code Name} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Sets the {@code Category} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptorBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setCategory(new Category(category));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Sets the {@code Cost} of the {@code EditExpenseDescriptor} that we are building."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptorBuilder withCost(String address) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setCost(new Cost(address));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditExpenseDescriptor}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public EditExpenseDescriptor build() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jcjxwy": 79
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "import seedu.address.model.expense.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * A utility class to help with building Expense objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpenseBuilder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"Default\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public static final String DEFAULT_COST \u003d \"321.00\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    public static final String DEFAULT_DATE \u003d \"01-10-2018\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    private Cost cost;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    private Date date;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseBuilder() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        cost \u003d new Cost(DEFAULT_COST);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        date \u003d new Date();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Initializes the ExpenseBuilder with the data of {@code expenseToCopy}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseBuilder(Expense expenseToCopy) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        name \u003d expenseToCopy.getName();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        category \u003d expenseToCopy.getCategory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        cost \u003d expenseToCopy.getCost();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        date \u003d expenseToCopy.getDate();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(expenseToCopy.getTags());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Sets the {@code Name} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseBuilder withName(String name) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Expense} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Sets the {@code Cost} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseBuilder withCost(String cost) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        this.cost \u003d new Cost(cost);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Sets the {@code Category} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Sets the {@code Date} of the {@code Expense} that we are building."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseBuilder withDate(String date) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        this.date \u003d new Date(date);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public Expense build() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new Expense(name, category, cost, date, tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonathantjm": 8,
      "JasonChong96": 1,
      "winsonhys": 6,
      "-": 50,
      "jcjxwy": 28
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ExpenseUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CATEGORY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_COST;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditExpenseDescriptor;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * A utility class for Expense."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class ExpenseUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an add command string for adding the {@code expense}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static String getAddCommand(Expense expense) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static String getAddCommandAlias(Expense expense) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return AddCommand.COMMAND_ALIAS + \" \" + getExpenseDetails(expense);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonathantjm"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns the part of command string for the given {@code expense}\u0027s details."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static String getExpenseDetails(Expense expense) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        sb.append(PREFIX_NAME + expense.getName().expenseName + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        sb.append(PREFIX_CATEGORY + expense.getCategory().categoryName + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        sb.append(PREFIX_COST + expense.getCost().value + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        sb.append(PREFIX_DATE + expense.getDate().toString() + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expense.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns the part of command string for the given {@code EditExpenseDescriptor}\u0027s details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static String getEditExpenseDescriptorDetails(EditExpenseDescriptor descriptor) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.expenseName).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        descriptor.getCategory().ifPresent(category -\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                sb.append(PREFIX_CATEGORY).append(category.categoryName).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        descriptor.getCost().ifPresent(address -\u003e sb.append(PREFIX_COST).append(address.value).append(\" \"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        descriptor.getDate().ifPresent(date -\u003e sb.append(PREFIX_DATE).append(date.toString()).append(\" \"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "JasonChong96": 4,
      "jonathantjm": 2,
      "-": 38,
      "jcjxwy": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ModelUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "//@@author JasonChong96"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " * Helper methods related to models."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "public class ModelUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Username TEST_USERNAME \u003d new Username(\"AAA\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * An extension of the {@code ModelManager} where developers can pass in the time instead of checking against"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * system clock. Class of a model with a test user that is already logged in with username TEST_USERNAME."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * The address book is empty. Budget cap is $28 with $10 current expenses"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Creates a model with a test user that is already logged in with username TEST_USERNAME. The address book is"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * empty. Budget cap is $28 with $0 current expenses"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * @return a model logged in with a test user"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static Model modelWithTestUser() throws NonExistentUserException, UserAlreadyExistsException,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        NoUserSelectedException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.addUser(TEST_USERNAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.loadUserData(TEST_USERNAME, null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.modifyMaximumBudget(new Budget(28.00, 0.00, LocalDateTime.parse(\"2018-10-10T10:11:30\"), 50000));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        return model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "}"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 38,
      "winsonhys": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path SANDBOX_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Path getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.createDirectories(SANDBOX_FOLDER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER.resolve(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns the middle index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static Index getMidIndex(Model model) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size() / 2);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns the last index of the expense in the {@code model}\u0027s expense list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static Index getLastIndex(Model model) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return Index.fromOneBased(model.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns the expense in the {@code model}\u0027s expense list at {@code index}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static Expense getExpense(Model model, Index index) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return model.getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 3,
      "-": 45,
      "jcjxwy": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalExpenses.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_GAME;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_KFC;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_GAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_KFC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_1990;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_DATE_2018;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_KFC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FOOD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.user.Username;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": " * A utility class containing a list of {@code Expense} objects to be used in tests."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "public class TypicalExpenses {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public static final Username SAMPLE_USERNAME \u003d new Username(\"sampleData\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static final double INTIIAL_EXPENSES \u003d 26.00;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static final double INTIIAL_BUDGET \u003d 28.00;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense SCHOOLFEE \u003d new ExpenseBuilder().withName(\"School fee\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"3.00\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withCategory(\"School\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense ICECREAM \u003d new ExpenseBuilder().withName(\"Eat ice cream\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"2.00\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withCategory(\"Food\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withDate(\"02-10-2018\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense TOY \u003d new ExpenseBuilder().withName(\"Buy toy\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withCategory(\"Entertainment\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withDate(\"03-10-2018\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"1.00\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense CLOTHES \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withName(\"New clothes\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withCategory(\"Shopping\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withCost(\"2.00\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withDate(\"04-10-2018\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withTags(\"friends\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense TAX \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withName(\"Pay tax\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withDate(\"05-10-2018\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withCategory(\"Tax\")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"5.00\").build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense BOOKS \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withName(\"Buy books\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withDate(\"06-10-2018\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withCategory(\"Book\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"6.00\").build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense LUNCH \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withName(\"Have lunch\")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withCategory(\"Food\")"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"7.00\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense STOCK \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withName(\"Buy stock\")"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withCategory(\"Stock\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"1.00\").build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense GAMBLE \u003d new ExpenseBuilder()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withName(\"Try my luck\")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withCategory(\"Gamble\")"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withCost(\"2.00\").build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    // Manually added - Expense\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense AMY \u003d new ExpenseBuilder().withName(VALID_NAME_GAME).withCategory(VALID_CATEGORY_GAME)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withCost(VALID_COST_GAME)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withDate(VALID_DATE_1990)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense BOB \u003d"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            new ExpenseBuilder().withName(VALID_NAME_IPHONE).withCategory(VALID_CATEGORY_IPHONE)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withCost(VALID_COST_IPHONE)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            .withDate(VALID_DATE_2018)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Expense KFC \u003d new ExpenseBuilder().withName(VALID_NAME_KFC).withCategory(VALID_CATEGORY_KFC)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withCost(VALID_COST_KFC)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withCategory(VALID_CATEGORY_KFC)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            .withTags(VALID_TAG_FOOD).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String KEYWORD_MATCHING_BUY \u003d \"n/Buy\"; // A keyword that matches Buy"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String KEYWORD_MATCHING_FOOD \u003d \"c/Food\"; //A keyword that matches Food category"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final String KEYWORD_MATCHING_LUNCH \u003d \"n/Lunch\"; //A keyword that matches Lunch"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private TypicalExpenses() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    } // prevents instantiation"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical expenses"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "     * and its maximmum budget equal to the sum of all expenses."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        double expense \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        AddressBook ab \u003d new AddressBook(SAMPLE_USERNAME, Optional.empty());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (Expense e : getTypicalExpenses()) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            ab.addExpense(e);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expense +\u003d e.getCost().getCostValue();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        ab.modifyMaximumBudget(new Budget(expense + 2, expense, LocalDateTime.parse(\"2017-08-04T10:11:30\"), 50000));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "winsonhys"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static List\u003cExpense\u003e getTypicalExpenses() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SCHOOLFEE, ICECREAM, TOY, CLOTHES, TAX, BOOKS, LUNCH));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 2,
      "JasonChong96": 21,
      "winsonhys": 16,
      "-": 32,
      "jcjxwy": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Index INDEX_FIRST_EXPENSE \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Index INDEX_SECOND_EXPENSE \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static final Index INDEX_THIRD_EXPENSE \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "jcjxwy": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BudgetPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.BudgetPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.commons.events.ui.UpdateBudgetPanelEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "//@@author Snookerballs"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class BudgetPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private BudgetPanelHandle budgetPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void setUp() throws InterruptedException {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        BudgetPanel budgetPanel \u003d new BudgetPanel(new Budget(0, 0));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        Thread.sleep(1000);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        uiPartRule.setUiPart(budgetPanel);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        budgetPanelHandle \u003d new BudgetPanelHandle(budgetPanel.getRoot());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void addPanel_updateBudgetPanelEventPosted() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        run(100, 200);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(budgetPanelHandle.isColorGreen());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void colorChangeToRedWhenOverBudget_updateBudgetPanelEventPosted () {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        run(200, 100);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(budgetPanelHandle.isColorRed());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Tests if the UI elements, expenseDisplay, budgetDisplay and budgetBar have the corrct values"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param expense to set"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * @param budget to set"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private void run(double expense, double budget) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        postNow(generateUpdateBudgetPanelEvent(expense, budget));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            Thread.sleep(1000);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(budgetPanelHandle.isExpenseCorrect(String.format(\"%.2f\", expense)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(budgetPanelHandle.isBudgetBarProgressAccurate(expense / budget));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(budgetPanelHandle.isBudgetCorrect(String.format(\"%.2f\", budget)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private UpdateBudgetPanelEvent generateUpdateBudgetPanelEvent(double expense, double budget) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return new UpdateBudgetPanelEvent(new Budget(budget, expense));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "    public void setUp() throws UserAlreadyExistsException, NonExistentUserException, NoUserSelectedException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        Model model \u003d ModelUtil.modelWithTestUser();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 4,
      "winsonhys": 2,
      "-": 154
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ExpenseCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysExpense;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.ExpenseCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class ExpenseCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseWithNoTags \u003d new ExpenseBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseCard expenseCard \u003d new ExpenseCard(expenseWithNoTags, 1);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        uiPartRule.setUiPart(expenseCard);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCardDisplay(expenseCard, expenseWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseWithTags \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenseCard \u003d new ExpenseCard(expenseWithTags, 2);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        uiPartRule.setUiPart(expenseCard);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCardDisplay(expenseCard, expenseWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expense \u003d new ExpenseBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseCard expenseCard \u003d new ExpenseCard(expense, 0);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // same expense, same index -\u003e returns true"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseCard copy \u003d new ExpenseCard(expense, 0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(expenseCard.equals(copy));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(expenseCard.equals(expenseCard));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertFalse(expenseCard \u003d\u003d null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertFalse(expenseCard.equals(0));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // different expense, same index -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense differentExpense \u003d new ExpenseBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(expenseCard.equals(new ExpenseCard(differentExpense, 0)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // same expense, different index -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(expenseCard.equals(new ExpenseCard(expense, 1)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Asserts that {@code expenseCard} displays the details of {@code expectedExpense} correctly and matches"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void assertCardDisplay(ExpenseCard expenseCard, Expense expectedExpense, int expectedId) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        ExpenseCardHandle expenseCardHandle \u003d new ExpenseCardHandle(expenseCard.getRoot());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", expenseCardHandle.getId());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        // verify expense details are displayed correctly"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCardDisplaysExpense(expectedExpense, expenseCardHandle);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 54,
      "jcjxwy": 18
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ExpenseListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.time.Duration.ofMillis;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.jupiter.api.Assertions.assertTimeoutPreemptively;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.getTypicalExpenses;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysExpense;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.ExpenseCardHandle;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.ExpenseListPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "public class ExpenseListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final ObservableList\u003cExpense\u003e TYPICAL_EXPENSES \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            FXCollections.observableList(getTypicalExpenses());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_EXPENSE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path TEST_DATA_FOLDER \u003d Paths.get(\"src\", \"test\", \"data\", \"sandbox\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final long CARD_CREATION_AND_DELETION_TIMEOUT \u003d 2500;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    private ExpenseListPanelHandle expenseListPanelHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        initUi(TYPICAL_EXPENSES);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_EXPENSES.size(); i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            expenseListPanelHandle.navigateToCard(TYPICAL_EXPENSES.get(i));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            Expense expectedExpense \u003d TYPICAL_EXPENSES.get(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            ExpenseCardHandle actualCard \u003d expenseListPanelHandle.getExpenseCardHandle(i);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            assertCardDisplaysExpense(expectedExpense, actualCard);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        initUi(TYPICAL_EXPENSES);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseCardHandle expectedExpense \u003d expenseListPanelHandle.getExpenseCardHandle("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                INDEX_SECOND_EXPENSE.getZeroBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ExpenseCardHandle selectedExpense \u003d expenseListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCardEquals(expectedExpense, selectedExpense);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Verifies that creating and deleting large number of expenses in {@code ExpenseListPanel} requires lesser than"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code CARD_CREATION_AND_DELETION_TIMEOUT} milliseconds to execute."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void performanceTest() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ObservableList\u003cExpense\u003e backingList \u003d createBackingList(10000);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTimeoutPreemptively(ofMillis(CARD_CREATION_AND_DELETION_TIMEOUT), () -\u003e {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            initUi(backingList);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            guiRobot.interact(backingList::clear);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        }, \"Creation and deletion of expense cards exceeded time limit\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns a list of expenses containing {@code expenseCount} expenses that is used to populate the"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * {@code ExpenseListPanel}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private ObservableList\u003cExpense\u003e createBackingList(int expenseCount) throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Path xmlFile \u003d createXmlFileWithExpenses(expenseCount);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                XmlUtil.getDataFromFile(xmlFile, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return FXCollections.observableArrayList(xmlAddressBook.toModelType().getExpenseList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns a .xml file containing {@code expenseCount} expenses. This file will be deleted when the JVM terminates."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private Path createXmlFileWithExpenses(int expenseCount) throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c?xml version\u003d\\\"1.0\\\" encoding\u003d\\\"UTF-8\\\" standalone\u003d\\\"yes\\\"?\u003e\\n\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003caddressbook\u003e\\n\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (int i \u003d 0; i \u003c expenseCount; i++) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            builder.append(\"\u003cexpenses\u003e\\n\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            builder.append(\"\u003cname\u003e\").append(i).append(\"a\u003c/name\u003e\\n\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            builder.append(\"\u003ccategory\u003e000\u003c/category\u003e\\n\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "            builder.append(\"\u003ccost\u003e1.00\u003c/cost\u003e\\n\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            builder.append(\"\u003cdate\u003e01-10-2018\u003c/date\u003e\\n\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            builder.append(\"\u003c/expenses\u003e\\n\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        builder.append(\"\u003cusername\u003emanyExpenses\u003c/username\u003e\\n\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        builder.append(\"\u003cbudget\u003e\\n\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        builder.append(\"\u003cbudgetCap\u003e\").append((double) expenseCount).append(\"\u003c/budgetCap\u003e\\n\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        builder.append(\"\u003ccurrentExpenses\u003e\").append((double) expenseCount).append(\"\u003c/currentExpenses\u003e\\n\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        builder.append(\"\u003c/budget\u003e\\n\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(\"\u003c/addressbook\u003e\\n\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Path manyExpensesFile \u003d Paths.get(TEST_DATA_FOLDER + \"manyExpenses.xml\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FileUtil.createFile(manyExpensesFile);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        FileUtil.writeToFile(manyExpensesFile, builder.toString());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        manyExpensesFile.toFile().deleteOnExit();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return manyExpensesFile;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Initializes {@code expenseListPanelHandle} with a {@code ExpenseListPanel} backed by {@code backingList}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Also shows the {@code Stage} that displays only {@code ExpenseListPanel}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void initUi(ObservableList\u003cExpense\u003e backingList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        ExpenseListPanel expenseListPanel \u003d new ExpenseListPanel(backingList);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        uiPartRule.setUiPart(expenseListPanel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        expenseListPanelHandle \u003d new ExpenseListPanelHandle(getChildNode(expenseListPanel.getRoot(),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                ExpenseListPanelHandle.EXPENSE_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 10,
      "JasonChong96": 1,
      "winsonhys": 3,
      "-": 75,
      "jcjxwy": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path STUB_SAVE_LOCATION \u003d Paths.get(\"Stub\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Path RELATIVE_PATH \u003d Paths.get(\".\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            new AddressBook(ModelUtil.TEST_USERNAME, Optional.empty()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(), SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH.resolve(STUB_SAVE_LOCATION).toString(),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 4,
      "-": 76
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.ExpenseCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.ExpenseListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static void assertCardEquals(ExpenseCardHandle expectedCard, ExpenseCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        assertEquals(expectedCard.getCost(), actualCard.getCost());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedCard.getCategory(), actualCard.getCategory());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedExpense}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static void assertCardDisplaysExpense(Expense expectedExpense, ExpenseCardHandle actualCard) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedExpense.getName().expenseName, actualCard.getName());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedExpense.getCategory().categoryName, actualCard.getCategory());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedExpense.getCost().value, actualCard.getCost());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedExpense.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Asserts that the list in {@code expenseListPanelHandle} displays the details of {@code expenses} correctly and"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static void assertListMatching(ExpenseListPanelHandle expenseListPanelHandle, Expense... expenses) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        for (int i \u003d 0; i \u003c expenses.length; i++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            expenseListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "            assertCardDisplaysExpense(expenses[i], expenseListPanelHandle.getExpenseCardHandle(i));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Asserts that the list in {@code expenseListPanelHandle} displays the details of {@code expenses} correctly and"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static void assertListMatching(ExpenseListPanelHandle expenseListPanelHandle, List\u003cExpense\u003e expenses) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertListMatching(expenseListPanelHandle, expenses.toArray(new Expense[0]));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Asserts the size of the list in {@code expenseListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public static void assertListSize(ExpenseListPanelHandle expenseListPanelHandle, int size) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        int numberOfPeople \u003d expenseListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 7,
      "winsonhys": 1,
      "-": 49,
      "jcjxwy": 15
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_1990;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_2018;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_IPHONE;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_IPHONE;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.GAMBLE;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.SCHOOLFEE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.STOCK;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TOY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.budget.Budget;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void add() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        //Set budget such that it never exceeds"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        testApp.getActualModel().modifyMaximumBudget(new Budget(String.format(\"%.2f\", Double.MAX_VALUE)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        testApp.getActualModel().commitAddressBook();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        model.modifyMaximumBudget(new Budget(String.format(\"%.2f\", Double.MAX_VALUE)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a expense without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense toAdd \u003d AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + CATEGORY_DESC_AMY + \" \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + \"   \" + COST_DESC_AMY + \"   \" + DATE_DESC_1990 + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.addExpense(toAdd);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a expense with all fields same as another expense in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        toAdd \u003d new ExpenseBuilder(AMY).withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + CATEGORY_DESC_AMY + COST_DESC_AMY + DATE_DESC_1990"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a expense with all fields same as another expense in the address book except category and cost"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        toAdd \u003d new ExpenseBuilder(AMY).withCategory(VALID_CATEGORY_IPHONE).withCost(VALID_COST_IPHONE).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d ExpenseUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteAllExpenses();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(SCHOOLFEE);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a expense with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + CATEGORY_DESC_BOB + COST_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + TAG_DESC_HUSBAND + DATE_DESC_2018;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a expense, missing tags -\u003e added */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(STOCK);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filters the expense list before adding -\u003e added */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_BUY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(GAMBLE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* ------------------------ Perform add operation while a expense card is selected -------------------------- */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: selects first card in the expense list, add a expense -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        selectExpense(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(TOY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a duplicate expense -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d ExpenseUtil.getAddCommand(STOCK);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a duplicate expense except with different category -\u003e rejected */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        toAdd \u003d new ExpenseBuilder(STOCK).withCategory(VALID_CATEGORY_IPHONE).build();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d ExpenseUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a duplicate expense except with different address -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        toAdd \u003d new ExpenseBuilder(STOCK).withCost(VALID_COST_IPHONE).build();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d ExpenseUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a duplicate expense except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d ExpenseUtil.getAddCommand(STOCK) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + CATEGORY_DESC_AMY + COST_DESC_AMY + DATE_DESC_1990;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: missing category -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + COST_DESC_AMY + DATE_DESC_1990;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CATEGORY_DESC_AMY + DATE_DESC_1990;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d \"adds \" + ExpenseUtil.getExpenseDetails(toAdd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + CATEGORY_DESC_AMY + COST_DESC_AMY + DATE_DESC_2018;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: invalid category -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_CATEGORY_DESC + COST_DESC_AMY + DATE_DESC_1990;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CATEGORY_DESC_AMY + INVALID_ADDRESS_DESC + DATE_DESC_1990;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, Cost.MESSAGE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + CATEGORY_DESC_AMY + COST_DESC_AMY + DATE_DESC_1990"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: add a expense when no user is logged in */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + CATEGORY_DESC_BOB + COST_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + TAG_DESC_HUSBAND + DATE_DESC_2018;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        testApp.getActualModel().unloadUserData();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertEquals(new NoUserSelectedException().getMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void assertCommandSuccess(Expense toAdd) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(ExpenseUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Expense)}. Executes {@code command}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Expense)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void assertCommandSuccess(String command, Expense toAdd) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.addExpense(toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Expense)} except asserts that"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * 2. {@code Storage} and {@code ExpenseListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Expense)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) throws"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NoUserSelectedException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 4,
      "JasonChong96": 36,
      "winsonhys": 5,
      "-": 144,
      "jcjxwy": 66
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.BudgetPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "import guitests.guihandles.ExpenseListPanelHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    protected TestApp testApp;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void setUp() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return TypicalExpenses.getTypicalAddressBook();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public ExpenseListPanelHandle getExpenseListPanel() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return mainWindowHandle.getExpenseListPanel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    public BudgetPanelHandle getBudgetPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        return mainWindowHandle.getBudgetPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Displays all expenses in the address book."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    protected void showAllExpenses() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(getModel().getAddressBook().getExpenseList().size(), getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Displays all expenses with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    protected void showExpensesWithName(String keyword) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertTrue(getModel().getFilteredExpenseList().size()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                \u003c getModel().getAddressBook().getExpenseList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Selects the expense at {@code index} of the displayed list."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    protected void selectExpense(Index index) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(index.getZeroBased(), getExpenseListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Deletes all expenses in the address book."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    protected void deleteAllExpenses() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            Thread.sleep(1000);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            assertTrue(getBudgetPanel().isExpenseCorrect(\"0.00\"));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        } catch (InterruptedException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getExpenseList().size());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same expense objects as {@code expectedModel}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * and the expense list panel displays the expenses in the model correctly."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Model expectedModel) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        System.out.println(expectedModel.getAddressBook().getMaximumBudget().getNextRecurrence());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        System.out.println(new AddressBook(expectedModel.getAddressBook()).getMaximumBudget().getNextRecurrence());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "        System.out.println(testApp.readStorageAddressBook().getMaximumBudget().getNextRecurrence());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertListMatching(getExpenseListPanel(), expectedModel.getFilteredExpenseList());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code ExpenseListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        getExpenseListPanel().rememberSelectedExpenseCard();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * of the previously selected expense."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(getExpenseListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the expense in the expense list panel at"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @see ExpenseListPanelHandle#isSelectedExpenseCardChanged()"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        getExpenseListPanel().navigateToCard(getExpenseListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getExpenseListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the expense list panel remain unchanged."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @see ExpenseListPanelHandle#isSelectedExpenseCardChanged()"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(getExpenseListPanel().isSelectedExpenseCardChanged());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        //assertListMatching(getExpenseListPanel(), getModel().getFilteredExpenseList());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        /*assertTrue(getBudgetPanel().isExpenseCorrect(String.format(\"%.2f\", TypicalExpenses.INTIIAL_EXPENSES)));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(getBudgetPanel().isBudgetCorrect(String.format(\"%.2f\", TypicalExpenses.INTIIAL_BUDGET)));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        assertTrue(getBudgetPanel().isBudgetBarProgressAccurate(TypicalExpenses.INTIIAL_EXPENSES"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "                / TypicalExpenses.INTIIAL_BUDGET));*/"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     * Returns a copy of the current model."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 20,
      "JasonChong96": 8,
      "winsonhys": 3,
      "-": 222,
      "jcjxwy": 29
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.UserAlreadyExistsException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.testutil.ModelUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void clear() throws NoUserSelectedException, UserAlreadyExistsException, NonExistentUserException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, ModelUtil.modelWithTestUser());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: selects first card in expense list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        selectExpense(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filters the expense list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_BUY);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(String command) throws UserAlreadyExistsException, NonExistentUserException,"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NoUserSelectedException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, ModelUtil.modelWithTestUser());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) throws"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NoUserSelectedException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "JasonChong96": 12,
      "-": 89,
      "jcjxwy": 5
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_EXPENSE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TestUtil.getExpense;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void delete() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* -------------- Performing delete operation while an unfiltered list is being shown ----------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: delete the first expense in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + \"       \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense deletedExpense \u003d removeExpense(expectedModel, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, deletedExpense);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: delete the last expense in the list -\u003e deleted */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index lastExpenseIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(lastExpenseIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: undo deleting the last expense in the list -\u003e last expense restored */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: redo deleting the last expense in the list -\u003e last expense deleted again */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        removeExpense(modelBeforeDeletingLast, lastExpenseIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: delete the middle expense in the list -\u003e deleted */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index middleExpenseIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(middleExpenseIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* --------------- Performing delete operation while a filtered list is being shown ------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filtered expense list, delete index within bounds of address book and expense list -\u003e deleted */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_BUY);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filtered expense list, delete index within bounds of address book but out of bounds of expense list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_BUY);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getExpenseList().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* ------------------ Performing delete operation while a expense card is selected --------------------- */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: delete the selected expense -\u003e expense list panel selects the expense before the deleted expense */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        selectExpense(selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deletedExpense \u003d removeExpense(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, deletedExpense);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* ------------------------------ Performing invalid delete operation --------------------------------- */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                getModel().getAddressBook().getExpenseList().size() + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Removes the {@code Expense} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @return the removed expense"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private Expense removeExpense(Model model, Index index) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense targetExpense \u003d getExpense(model, index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.deleteExpense(targetExpense);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return targetExpense;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Deletes the expense at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense deletedExpense \u003d removeExpense(expectedModel, toDelete);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_EXPENSE_SUCCESS, deletedExpense);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) throws"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NoUserSelectedException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Index expectedSelectedCardIndex) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "JasonChong96": 11,
      "-": 141,
      "jcjxwy": 44
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.CATEGORY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.COST_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DATE_DESC_1990;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_CATEGORY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_CATEGORY_GAME;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_COST_GAME;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_GAME;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_IPHONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_EXPENSES;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Cost;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "winsonhys"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.ExpenseUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void edit() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* -------------- Performing edit operation while an unfiltered list is being shown ------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "         * field -\u003e edited"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + CATEGORY_DESC_BOB + \" \" + COST_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense editedExpense \u003d new ExpenseBuilder(BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: undo editing the last expense in the list -\u003e last expense restored */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: redo editing the last expense in the list -\u003e last expense edited again */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateExpense("
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                getModel().getFilteredExpenseList().get(INDEX_FIRST_EXPENSE.getZeroBased()), editedExpense);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: edit a expense with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CATEGORY_DESC_BOB"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: edit a expense with new values same as another expense\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(getModel().getAddressBook().getExpenseList().contains(BOB));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        index \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertNotEquals(getModel().getFilteredExpenseList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + CATEGORY_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(BOB).withName(VALID_NAME_GAME).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: edit a expense with new values same as another expense\u0027s values but with different category and cost"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        index \u003d INDEX_SECOND_EXPENSE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CATEGORY_DESC_AMY"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(BOB).withCategory(VALID_CATEGORY_GAME).withCost(VALID_COST_GAME).build();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Expense expenseToEdit \u003d getModel().getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(expenseToEdit).withTags().build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* --------------- Performing edit operation while a filtered list is being shown --------------------- */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filtered expense list, edit index within bounds of address book and expense list -\u003e edited */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_BUY);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expenseToEdit \u003d getModel().getFilteredExpenseList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        editedExpense \u003d new ExpenseBuilder(expenseToEdit).withName(VALID_NAME_IPHONE).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, index, editedExpense);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filtered expense list, edit index within bounds of address book but out of bounds of expense list"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_BUY);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getExpenseList().size();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* ------------------ Performing edit operation while a expense card is selected ----------------------- */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: selects first card in the expense list, edit a expense -\u003e edited, card selection remains unchanged"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "         * but browser url changes"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        selectExpense(index);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + CATEGORY_DESC_AMY"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_AMY + TAG_DESC_FRIEND + DATE_DESC_1990;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        // browser\u0027s url is updated to reflect the new expense\u0027s name"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* ------------------------------ Performing invalid edit operation ----------------------------------- */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredExpenseList().size() + 1;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: invalid category -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased() + INVALID_CATEGORY_DESC,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                + INVALID_ADDRESS_DESC, Cost.MESSAGE_COST_CONSTRAINTS);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased()"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: edit a expense with new values same as another expense\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        executeCommand(ExpenseUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(getModel().getAddressBook().getExpenseList().contains(BOB));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        index \u003d INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(getModel().getFilteredExpenseList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CATEGORY_DESC_BOB"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: edit a expense with new values same as another expense\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CATEGORY_DESC_BOB"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: edit a expense with new values same as another expense\u0027s values but with different address"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CATEGORY_DESC_BOB"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_AMY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: edit a expense with new values same as another expense\u0027s values but with different category"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + CATEGORY_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                + COST_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_EXPENSE);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Expense, Index)} except that"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Expense, Index)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Expense editedExpense) throws"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NoUserSelectedException {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedExpense, null);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the expense at index {@code toEdit} being"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * updated to values specified {@code editedExpense}.\u003cbr\u003e"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Expense editedExpense,"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                                      Index expectedSelectedCardIndex) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateExpense(expectedModel.getFilteredExpenseList().get(toEdit.getZeroBased()), editedExpense);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_EXPENSE_SUCCESS, editedExpense), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) throws"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            NoUserSelectedException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                                      Index expectedSelectedCardIndex) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        expectedModel.updateFilteredExpenseList(PREDICATE_SHOW_ALL_EXPENSES);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "     *"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "JasonChong96": 34,
      "winsonhys": 2,
      "-": 142,
      "jcjxwy": 99
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_EXPENSES_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.BOOKS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.CLOTHES;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.ICECREAM;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_FOOD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_LUNCH;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.LUNCH;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.TOY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void find() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find multiple expenses in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "         * -\u003e 2 expenses found"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_BUY + \"   \";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, TOY, BOOKS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: repeat previous find command where expense list is displaying the expenses we are finding"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "         * -\u003e 2 expenses found"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find one expense in address book with multiple keywords"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "         * -\u003e 1 expenses found"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_LUNCH + \" \" + KEYWORD_MATCHING_FOOD;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LUNCH);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find expense where expense list is not displaying the expense we are finding -\u003e 1 expense found */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" Toy\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, TOY);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find multiple expenses in address book, 2 keywords -\u003e 2 expenses found */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" ice clothes\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ICECREAM, CLOTHES);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find multiple expenses in address book, 2 keywords in reversed order -\u003e 2 expenses found */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" clothes ice\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find multiple expenses in address book, 2 keywords with 1 repeat -\u003e 2 expenses found */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" clothes clothes ice\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find multiple expenses in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "         * -\u003e 2 expenses found"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" ice clothes NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find same expenses in address book after deleting 1 of them -\u003e 1 expense found */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(getModel().getAddressBook().getExpenseList().contains(ICECREAM));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_LUNCH;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, LUNCH);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find expense in address book, keyword is same as name but of different case -\u003e 1 expense found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" have\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find expense in address book, keyword is substring of name -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" fo\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find expense in address book, name is substring of keyword -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" ha\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find expense not in address book -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" gamble\";"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find category name of expense in address book -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + CLOTHES.getCategory().categoryName;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find address of expense in address book -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + CLOTHES.getCost().value;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, Name.MESSAGE_NAME_CONSTRAINTS));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find tags of expense in address book -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(CLOTHES.getTags());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + tags.get(0).tagName;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find while a expense is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        selectExpense(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertFalse(getExpenseListPanel().getHandleToSelectedCard().getName().equals(CLOTHES.getName().expenseName));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + \" clothes\";"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CLOTHES);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: find expense in empty address book -\u003e 0 expenses found */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteAllExpenses();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CLOTHES);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d \"FiNd n/Tax\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: no prefix before keywords -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Tax\";"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * box displays {@code Messages#MESSAGE_EXPENSES_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                MESSAGE_EXPENSES_LISTED_OVERVIEW, expectedModel.getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 1,
      "JasonChong96": 4,
      "-": 129,
      "jcjxwy": 79
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void openHelpWindow() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        getExpenseListPanel().click();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertListMatching(getExpenseListPanel(), getModel().getFilteredExpenseList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void help_multipleCommands_onlyOneHelpWindowOpen() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, guiRobot.getNumberOfWindowsShown(HelpWindowHandle.HELP_WINDOW_TITLE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    /*private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "    }*/"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 3,
      "JasonChong96": 2,
      "-": 92,
      "jcjxwy": 5
    }
  },
  {
    "path": "src/test/java/systemtests/ModelHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.model.expense.Expense;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods to set up {@code Model} for testing."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelHelper {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static final Predicate\u003cExpense\u003e PREDICATE_MATCHING_NO_EXPENSES \u003d unused -\u003e false;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static void setFilteredList(Model model, List\u003cExpense\u003e toDisplay) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Optional\u003cPredicate\u003cExpense\u003e\u003e predicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        model.updateFilteredExpenseList(predicate.orElse(PREDICATE_MATCHING_NO_EXPENSES));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ModelHelper#setFilteredList(Model, List)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    public static void setFilteredList(Model model, Expense... toDisplay) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        setFilteredList(model, Arrays.asList(toDisplay));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * Returns a predicate that evaluates to true if this {@code Expense} equals to {@code other}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "    private static Predicate\u003cExpense\u003e getPredicateMatching(Expense other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        return expense -\u003e expense.equals(other);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 30,
      "jcjxwy": 9
    }
  },
  {
    "path": "src/test/java/systemtests/SampleDataTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a non-existent file location to force test app to load sample data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        Path filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFileIfExists(filePath);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the file at {@code filePath} if it exists."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private void deleteFileIfExists(Path filePath) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            Files.deleteIfExists(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(ioe);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 1,
      "-": 39
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_EXPENSE_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalExpenses.KEYWORD_MATCHING_BUY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_EXPENSE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NoUserSelectedException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    public void select() throws NoUserSelectedException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "        showAllExpenses();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* --------------------- Perform select operations on the shown unfiltered list ----------------------- */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: select the first card in the expense list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_EXPENSE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: select the last card in the expense list -\u003e selected */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        Index expenseCount \u003d getLastIndex(getModel());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + expenseCount.getOneBased();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandSuccess(command, expenseCount);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: select the middle card in the expense list -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* --------------------- Perform select operations on the shown filtered list ------------------------- */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filtered expense list, select index within bounds of address book but out of bounds of expense list"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        showExpensesWithName(KEYWORD_MATCHING_BUY);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getExpenseList().size();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        /* Case: filtered expense list, select index within bounds of address book and expense list -\u003e selected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredExpenseList().size());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        /* -------------------------------- Perform invalid select operations --------------------------------- */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredExpenseList().size() + 1;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        deleteAllExpenses();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_EXPENSE.getOneBased(),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                MESSAGE_INVALID_EXPENSE_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected expense.\u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "                MESSAGE_SELECT_EXPENSE_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getExpenseListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Snookerballs"
        },
        "content": "     * 4. {@code Storage} and {@code ExpenseListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) throws NoUserSelectedException {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Snookerballs": 3,
      "JasonChong96": 9,
      "-": 120,
      "jcjxwy": 26
    }
  },
  {
    "path": "src/test/java/systemtests/SystemTestSetupHelper.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.concurrent.TimeoutException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import org.junit.Assert;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxToolkit;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "import seedu.address.model.exceptions.NonExistentUserException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jcjxwy"
        },
        "content": "import seedu.address.testutil.TypicalExpenses;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods that system tests require."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SystemTestSetupHelper {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets up a new {@code TestApp} and returns it."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp setupApplication(Supplier\u003cReadOnlyAddressBook\u003e addressBook, Path saveFileLocation) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerStage(Stage::new);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(addressBook, saveFileLocation));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Application takes too long to set up.\", te);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes TestFX."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void initialize() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.registerPrimaryStage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.hideStage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(e);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle setupMainWindowHandle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            FxToolkit.setupFixture(() -\u003e {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    testApp.getActualModel().loadUserData(TypicalExpenses.SAMPLE_USERNAME, null);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                } catch (NonExistentUserException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                    Assert.fail(e.getMessage());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "                }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            });"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        } catch (TimeoutException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "            Assert.fail(e.getMessage());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "JasonChong96"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.setupStage((stage) -\u003e {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle \u003d new MainWindowHandle(stage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                mainWindowHandle.focus();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            });"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.showStage();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to set up.\", te);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tears down existing stages."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDownStage() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            FxToolkit.cleanupStages();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (TimeoutException te) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Stage takes too long to tear down.\", te);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "JasonChong96": 13,
      "-": 74,
      "jcjxwy": 1
    }
  }
]
