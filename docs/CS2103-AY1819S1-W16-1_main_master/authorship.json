[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d Hallper: All The Hallp You Will Ever Need"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/CS2103-AY1819S1-W16-1/main[image:https://travis-ci.org/CS2103-AY1819S1-W16-1/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/HallperCI/main/branch/master[image:https://ci.appveyor.com/api/projects/status/io5xs6dmt5acsxw0/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/CS2103-AY1819S1-W16-1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103-AY1819S1-W16-1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/HallperCI/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103-AY1819S1-W16-1/main\u0026amp;utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/75c6f4f2d2664849a4eb4b0873f21f77[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d About Hallper"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper is a professional desktop application that provides administrative convenience for JCRC members within the Halls of NUS. Duties such as consolidating resident contacts, mass blasting notifications to residents and keeping track of hall events are now ridiculously simplified with Hallper. Without a need for mouse control, every command input through the keyboard will suffice to carry out these duties. With our simple user interface, any JCRC member can easily master the utilities in Hallper to bring hall administrative duties to greater heights."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d Key Features"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper provides the following features to improve the experience of JCRC members in carrying out hall duties:"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Convenient clearing and importing of multiple contacts"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Tagging contacts by categories (CCA, block, etc)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Filtering through contacts quickly"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Profile view of contacts"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Budget allocation and management"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Mass emailing to multiple contacts"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Calendar to update monthly events"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Original source of the code AddressBook-Level4 project was created by https://github.com/se-edu/[SE-EDU] initiative"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* Libraries used: https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit5[JUnit5], http://www.simplejavamail.org/#/about[SimpleJavaMail], https://github.com/ical4j/ical4j[iCal4j]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 15,
      "-": 29,
      "GilgameshTC": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Hallper was developed by https://cs2103-ay1819s1-w16-1.github.io/main/[TEAM W16-1].  +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "We are a TEAM W16-1 based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d ERIC YANG JIA WEI"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::ericyjw.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/ericyjw[github]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of budgeting feature"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d JAVEN SEOW YU BIN"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "image::javenseow.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/javenseow[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of profile view GUI feature \u0026 email feature"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d KOK YUAN"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "image::eatorbeeaten.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/eatorbeeaten[github]]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of email feature"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d SHANNA LIM KENG WOON"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image::kengwoon.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/kengwoon[github]]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of import and filter feature"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d TRAVIS CHING JIA YEA"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "image::gilgameshtc.png[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "{empty}[https://github.com/gilgameshtc[github]]"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer  +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Responsibilities: In charge of calendar feature"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 20,
      "-": 38
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Hallper - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: DeveloperGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":warning-caption: :warning:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-1/main/tree/master"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team W16-1`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "Hallper is a desktop application aimed at serving \u003c\u003cjcrc,JCRCs\u003e\u003e of the Halls of NUS."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "Hallper follows an event-driven architecture, and is designed to work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "This guide provides you with information on how to contribute to Hallper, whether you are a new or experienced developer."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "This section tells you how to set up your computer before you can start working on Hallper."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* *JDK `9`* or later"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "JDK `10` on Windows will fail to run tests in \u003c\u003cUsingGradle#Running-Tests, headless mode\u003e\u003e due to a https://github.com/javafxports/openjdk-jfx/issues/66[JavaFX bug]."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Windows developers are highly recommended to use JDK `9`."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* *IntelliJ* IDE"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "Follow these steps to set up the project on your computer:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repository, and clone the fork to your computer."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (If you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Follow these steps to verify the setup:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations before writing code"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, the documentation will still have the SE-EDU branding and refer to the `se-edu/addressbook-level4` repo."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "If you plan to develop this fork as a separate product (i.e. instead of contributing to `se-edu/addressbook-level4`), you should do the following:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ". Configure the \u003c\u003cDocs-SiteWideDocSettings, site-wide documentation settings\u003e\u003e in link:{repoURL}/build.gradle[`build.gradle`], such as the `site-name`, to suit your own project."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the URL in the attribute `repoURL` in link:{repoURL}/docs/DeveloperGuide.adoc[`DeveloperGuide.adoc`] and link:{repoURL}/docs/UserGuide.adoc[`UserGuide.adoc`] with the URL of your fork."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes the architecture and components of the application."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for:"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initialising the components in the correct sequence, and connecting them up with each other."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shutting down the components and invoking cleanup method where necessary."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Two of those classes play important roles at the architecture level:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components:"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: Controls the UI of the App."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: Executes commands."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The `Logic` component consists of all the `Command` and `Parser` classes."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "It makes use of `AddressBookParser` to parse all user commands."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "A typical flow in the `Logic` component is given below:"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model` component consists of classes that model objects e.g. `Person`, `Calender`, `Email`, etc."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "It does not depend on any of the other three components."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model` component:"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "As a more OOP model, we can store a `Tag` list in `Address Book`, which `Person` can reference. This would allow `Address Book` to only require one `Tag` object per unique `Tag`, instead of each `Person` needing their own `Tag` object. An example of how such a model may look like is given below. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": " +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "image:ModelClassBetterOopDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component consists of classes which are responsible for saving and reading files."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "* saves `UserPref` objects in json format and reads it back."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "* saves the Address Book data in xml format and reads it back."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "* saves emails in eml format and reads it back."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* saves calendars in ics format and reads it back."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* saves the Budget Book data in xml format and reads it back."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Commons"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "`Commons` consists of classes used by multiple components and are located in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by `VersionedAddressBook`."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "It extends `AddressBook` with an undo/redo history, stored internally as an `addressBookStateList` and `currentStatePointer`."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Additionally, it implements the following operations:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#commit()` -- Saves the current address book state in its history."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#undo()` -- Restores the previous address book state from its history."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "* `VersionedAddressBook#redo()` -- Restores a previously undone address book state from its history."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#commitAddressBook()`, `Model#undoAddressBook()` and `Model#redoAddressBook()` respectively."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the undo/redo mechanism behaves at each step."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: undo"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "1) The user launches the application for the first time. The `VersionedAddressBook` will be initialized with the"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "initial address book state, and the `currentStatePointer` pointing to that single address book state."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "2) The user executes `delete 5` command to delete the 5th person in the address book. The `delete` command calls"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "`Model#commitAddressBook()`, causing the modified state of the address book after the `delete 5` command executes to be saved in the `addressBookStateList`, and the `currentStatePointer` is shifted to the newly inserted address book state."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "3) The user executes `add n/David ...` to add a new person. The `add` command also calls `Model#commitAddressBook()`,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "causing another modified address book state to be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not call `Model#commitAddressBook()`, so the address book state will not be saved into the `addressBookStateList`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "4) The user now decides that adding the person was a mistake, and decides to undo that action by executing the `undo`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "command. The `undo` command will call `Model#undoAddressBook()`, which will shift the `currentStatePointer` once to the left, pointing it to the previous address book state, and restores the address book to that state."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index 0, pointing to the initial address book state, then there are no previous address book states to restore. The `undo` command uses `Model#canUndoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the undo."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Command: redo"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command does the opposite -- it calls `Model#redoAddressBook()`, which shifts the `currentStatePointer` once to the right, pointing to the previously undone state, and restores the address book to that state."
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "If the `currentStatePointer` is at index `addressBookStateList.size() - 1`, pointing to the latest address book state, then there are no undone address book states to restore. The `redo` command uses `Model#canRedoAddressBook()` to check if this is the case. If so, it will return an error to the user rather than attempting to perform the redo."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*Things to Note*"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* Not all commands can undo or redo. Some commands, such as `list`, do not modify the address book and"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "will usually not call `Model#commitAddressBook()`, `Model#undoAddressBook()` or `Model#redoAddressBook()`. Thus, the `addressBookStateList` remains unchanged."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* Some commands such as `clear`, will calls `Model#commitAddressBook()`. In this case, the `currentStatePointer` is"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "not pointing at the end of the `addressBookStateList`, all address book states after the `currentStatePointer` will be purged. We designed it this way because it no longer makes sense to redo the `add n/David ...` command. This is the behavior that most modern desktop applications follow."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand4StateListDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarizes what happens when a user executes a new command:"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Cons: Must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use a list to store the history of address book states."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy for new Computer Science student undergraduates to understand, who are likely to be the new incoming developers of our project."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `VersionedAddressBook`."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Pros: Do not need to maintain a separate list, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "//tag::compose[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Compose feature"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "The Compose feature works using a third-party dependency, http://www.simplejavamail.org/#/about[Simple Java Mail]."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "It allows `.eml` files to be saved onto the computer."
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "The feature is facilitated by `EmailModel` and `EmailDirStorage`."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* `EmailModel#saveEmail(Email email)` -- Stores each newly composed email in the `EmailModel`."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `EmailDirStorage#saveEmail(EmailModel email)` -- Saves the newly composed email in the `EmailModel` to the computer."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#saveEmail(Email email)`, and in the `Storage` interface as `Storage#saveEmail(EmailModel email)` respectively."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is an example usage scenario and how the Compose feature behaves at each step:"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ". The user executes the `Compose` command, which creates an email."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "The `Compose` command calls `Model#saveEmail(Email email)`, saving the email to `EmailModel`."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ". Once the email is saved in the `EmailModel`, the `ModelManager` raises an `EmailSavedEvent`, to indicate that a new"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " email is saved to the `EmailModel`."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ". The `EmailSavedEvent` goes to the `EventsCenter`, and is then handled by `StorageManager#handleEmailSavedEvent"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "(EmailSavedEvent event)`, which then calls `EmailDirStorage#saveEmail(EmailModel email)`."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "This saves the email to a specified local directory."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ". A preview of the email is displayed on the main window."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: File format"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* **Pros:** The `.eml` file format is compliant with the RFC-822 format, which is industry recognised, and can be"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "opened and viewed using many applications.`.eml` files can also contain attachments."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* **Cons:** `.eml` file alone is not useful alone. More implementations are required to make `.eml` useful in Hallper."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using http://www.simplejavamail.org/#/about[Simple Java Mail]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "http://www.simplejavamail.org/#/about[Simple Java Mail] contains various methods to conveniently create emails."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "It can also be used to send emails if Hallper is extended to include online capabilities."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "The library is easy to understand so any new developer can easily extend the current features."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: HTML Text"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "User input for email content is saved as HTML Text so that users with HTML Text Formatting knowledge can easily format the body of the email."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "//end::compose[]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "// tag::calendar[]"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d Calendar feature"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "The calendar feature in Hallper is implemented using a third-party dependency, https://github.com/ical4j/ical4j[iCal4j]."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "It creates `.ics` files and saves them onto the local computer. Calendars in Hallper are created as monthly"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "calendars, a `Map\u003cYear, Set\u003cMonth\u003e\u003e` in `CalendarModel` keeps a record of existing calendars in Hallper."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "It implements the following commands:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `create_calendar` -- Creates a monthly calendar and store it in local memory."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `add_all_day_event` -- Adds an all day event into the monthly calendar specified."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `add_event` -- Adds an event of a specified time frame into the monthly calendar."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `delete_event` -- Deletes an existing event in the monthly calendar."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Create_Calendar Command"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "This command is facilitated by `CalendarModel` and `IcsCalendarStorage`."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#createCalendar(Year year, Month month)` -- Initializes a calendar object in the `CalendarModel`."
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isExistingCalendar(Year year, Month month)` -- Checks if the calendar already exists in Hallper."
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `IcsCalendarStorage#createCalendar(Calendar calendar, String calendarName)` -- Saves the calendar passed from `CalendarModel` to the computer."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "These operations are exposed in the \u0027Model` interface as `Model#createCalendar(Year year, Month month)`, `Model#isExistingCalendar(Year year, Month month)` and in the `Storage` interface as `Storage#createCalendar(Calendar calendar, String calendarName)` respectively."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "Given below is an example usage scenario and how the `create_calendar` command behaves at each step:"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The user executes the `create_calendar` command by specifying the month and year."
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "The `create_calendar` command then calls `Model#isExistingCalendar(Year year, Month month)`, to check whether the"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "calendar already exists inside Hallper. If it exists, the command does nothing and reflects to the user that the"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "calendar already exists. Else, the command calls `Model#createCalendar(Year year, Month month)`, initializing a calendar object inside `CalendarModel`."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ". Once the calendar object is initialized in the `CalendarModel`, the `ModelManager` raises a `CalendarCreatedEvent`,"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " to indicate that a calendar object has been initialized in the `CalendarModel`."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ". The `CalendarCreatedEvent` goes to the `EventsCenter`, and is then handled by"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "`StorageManager#handleCalendarCreatedEvent(CalendarCreatedEvent event)`, which then calls `IcsCalendarStorage#createCalendar(Calendar calendar, String calendarName)`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "This saves the calendar to a specified local directory."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Add Event Commands"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "The `add_all_day_event` and `add_event` command have many similarities, they differ only by their parameters and the number of checks called to verify the validity of the event to be added. Events in Hallper are created as VEvent objects as implemented in the https://github.com/ical4j/ical4j[iCal4j] library."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "Both commands are facilitated by `CalendarModel` and `IcsCalendarStorage`. It implements the following operations:"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#createAllDayEvent(Year year, Month month, int date, String title)` -- Creates an all day event object and saves it inside the loaded calendar in `CalendarModel`."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#createEvent(Year year, Month month, int startDate, int startHour, int startMin, int endDate, int endHour, int endMin, String title)` -- Creates an event object with the specified time frame and saves it inside the loaded calendar in `CalendarModel`."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#loadCalendar(Year year, Month month)` -- Loads the monthly calendar specified into `CalendarModel`."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isExistingCalendar(Year year, Month month)` -- Checks if the calendar already exists in Hallper."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isValidDate(Year year, Month month, int date)` -- Checks if the date is a valid date in accordance to the Gregorian calendar."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isValidTime(int hour, int min)` -- Checks if the hour and minutes are valid in accordance to the 24 hour format."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isValidTimeFrame(int startDate, int startHour, int startMin, int endDate, int endHour, int endMin)` -- Checks that the end date and time doesn\u0027t occur before the start date and time."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `IcsCalendarStorage#loadCalendar(String calendarName)` -- Loads the specified calendar from the local directory into local memory."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `IcsCalendarStorage#createCalendar(Calendar calendar, String calendarName)` -- Saves the calendar passed from `CalendarModel` to the local directory."
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "These operations are exposed in the `Model` and `Storage` interface as :"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#createAllDayEvent(Year year, Month month, int date, String title)`"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#createEvent(Year year, Month month, int startDate, int startHour, int startMin, int endDate, int endHour, int endMin, String title)`"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#loadCalendar(Year year, Month month)`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#isExistingCalendar(Year year, Month month)`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#isValidDate(Year year, Month month, int date)`"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#isValidTime(int hour, int min)`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#isValidTimeFrame(int startDate, int startHour, int startMin, int endDate, int endHour, int endMin)`"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Storage#loadCalendar(String calendarName)`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Storage#createCalendar(Calendar calendar, String calendarName)`"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Add_All_Day_Event Command"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "Given below is an example usage scenario and how the `add_all_day_event` command behaves at each step:"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The user executes the `add_all_day_event` command by specifying the month, year, date and title."
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "The `add_all_day_event` command then calls `Model#isExistingCalendar(Year year, Month month)`, `Model#isValidDate(Year year, Month month, int date)`, to perform checks on whether the"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "request to create event is valid. If it fails any one of the checks, the command does nothing and reflects to the user that the request to create event is not valid."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "Else, the command calls `Model#createAllDayEvent(Year year, Month month, int date, String title)`, which calls `CalendarModel#createAllDayEvent(Year year, Month month, int date, String title)`."
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". `CalendarModel` first calls `CalendarModel#loadCalendar(Year year, Month month)` to load the calendar into `CalendarModel`."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". Once the calendar object is loaded in the `CalendarModel`, it creates an event object and loads it with all the relevant information."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The `ModelManager` then raises a `AllDayEventAddedEvent`, to indicate an all day event has been created in the `CalendarModel`."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The `AllDayEventAddedEvent` goes to the `EventsCenter`, and is then handled by"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "`StorageManager#handleAllDayEventAddedEvent(AllDayEventAddedEvent event)`, which then calls `IcsCalendarStorage#createCalendar(Calendar calendar, String calendarName)`."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "This saves the updated calendar back to the local directory."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d\u003d Add_Event Command"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "Given below is an example usage scenario and how the `add_event` command behaves at each step:"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The user executes the `add_event` command by specifying the month, year, starting date, starting time, ending date, ending time and title."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "The `add_event` command then calls `Model#isExistingCalendar(Year year, Month month)`, `Model#isValidDate(Year year, Month month, int date)`,"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "`Model#isValidTime(int hour, int min)` and `Model#isValidTimeFrame(int startDate, int startHour, int startMin, int endDate, int endHour, int endMin)` to perform checks on whether the"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "request to create event is valid. If it fails any one of the checks, the command does nothing and reflects to the user that the request to create event is not valid."
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "Else, the command calls `Model#createEvent(Year year, Month month, int startDate, int startHour, int startMin, int endDate, int endHour, int endMin, String title)`, which calls `CalendarModel#loadCalendar(Year year, Month month)`."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". `CalendarModel` first calls `CalendarModel#loadCalendar(Year year, Month month)` to load the calendar into `CalendarModel`."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". Once the calendar object is loaded in the `CalendarModel`, it creates an event object and loads it with all the relevant information."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The `ModelManager` then raises a `CalendarEventAddedEvent`, to indicate an event with a specified time frame has been created in the `CalendarModel`."
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The `CalendarEventAddedEvent` goes to the `EventsCenter`, and is then handled by `StorageManager#handleCalendarEventAddedEvent(CalendarEventAddedEvent event)`, which then calls `IcsCalendarStorage#createCalendar(Calendar calendar, String calendarName)`."
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "This saves the updated calendar back to the local directory."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Delete_Event Command"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "This command is facilitated by `CalendarModel` and `IcsCalendarStorage`."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "It implements the following operations:"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#loadCalendar(Year year, Month month)` -- Loads the monthly calendar specified into `CalendarModel`."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#deleteEvent(Year year, Month month)` -- Deletes an existing event in the monthly calendar."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#retrieveEvent(int startDate, int endDate, String title)` -- Retrieves the event object from the calendar."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isSameEvent(int startDate, int endDate, String title, VEvent event)` -- Checks whether the requested event to be deleted is the same event object in the calendar."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isExistingCalendar(Year year, Month month)` -- Checks if the calendar already exists in Hallper."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isValidDate(Year year, Month month, int date)` -- Checks if the date is a valid date in accordance to the Gregorian calendar."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `CalendarModel#isExistingEvent(Year year, Month month, int startDate, int endDate, String title)` -- Checks if an event exists in the monthly calendar."
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `IcsCalendarStorage#loadCalendar(String calendarName)` -- Loads the specified calendar from the local directory into local memory."
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `IcsCalendarStorage#createCalendar(Calendar calendar, String calendarName)` -- Saves the calendar passed from `CalendarModel` to the local directory."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "These operations are exposed in the `Model` and `Storage` interface as :"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#loadCalendar(Year year, Month month)`"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#deleteEvent(Year year, Month month, int startDate, int endDate, String title)`"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#isExistingCalendar(Year year, Month month)`"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#isValidDate(Year year, Month month, int date)`"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Model#isExistingEvent(Year year, Month month, int startDate, int endDate, String title)`"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Storage#loadCalendar(String calendarName)`"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "* `Storage#createCalendar(Calendar calendar, String calendarName)`"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "Given below is an example usage scenario and how the `delete_event` command behaves at each step:"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The user executes the `delete_event` command by specifying the month, year, starting date, ending date, and title."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "The `delete_event` command then calls `Model#isExistingCalendar(Year year, Month month)`, `Model#isValidDate(Year year, Month month, int date)` and"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "`Model#isExistingEvent(Year year, Month month, int startDate, int endDate, String title)` to perform checks on whether the request to delete event is valid."
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "If it fails any one of the checks, the command does nothing and reflects to the user that the request to delete event is not valid. Else, the `Model#isExistingEvent` check will retrieve the event and load it inside the `CalendarModel`. It then calls `Model#deleteEvent(Year year, Month month, int startDate, int endDate, String title)`."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The `Model#isExistingEvent` check first calls `CalendarModel#loadCalendar(Year year, Month month)` to load the calendar into `CalendarModel`. Once the calendar object is loaded in the `CalendarModel`, it then calls `CalendarModel#retrieveEvent(int startDate, int endDate, String title)` to retrieve the event and store it inside the `CalendarModel` as event to be deleted."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The call to `Model#deleteEvent(Year year, Month month, int startDate, int endDate, String title)` calls `CalendarModel#deleteEvent(Year year, Month month)` which removes the event to be deleted in `CalendarModel` from the monthly calendar."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The `ModelManager` then raises a `CalendarEventDeletedEvent`, to indicate an event has been deleted in the `CalendarModel`."
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". The `CalendarEventDeletedEvent` goes to the `EventsCenter`, and is then handled by `StorageManager#handleCalendarEventDeletedEvent(CalendarEventDeletedEvent event)`, which then calls `IcsCalendarStorage#createCalendar(Calendar calendar, String calendarName)`."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "This saves the updated calendar back to the local directory."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: File format"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* **Pro:** The `.ics` file format is compliant with the RFC 5545 format, which is industry recognised, and can be opened"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " and viewed using many applications, including Microsoft Outlook, Google Calendar, and Apple Calendar."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* **Con:** `.ics` file alone is not very useful. User needs to import the events created into users\u0027 preferred"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "calender application manually and consistently. More implementations will be required to make `.ics` files useful in"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Hallper."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Using https://github.com/ical4j/ical4j[iCal4j]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "https://github.com/ical4j/ical4j[iCal4j] contains various methods that make creating, parsing and editing `.ics` files convenient."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "The library is widely used and easy to understand so any new develeper can easily extend the current features."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "// end::calendar[]"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "// tag::createcca[]"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Create CCA feature"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "The `create` mechanism is facilitated by `BudgetBook` and `BudgetBookStorage`."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "When a CCA is created, it is stored in a `UniqueCcaList` in the `BudgetBook`, and in a `.xml` file in the local"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "directory. It implements the following command:"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* `BudgetBook#addCca(Cca toAdd)` -- Adds a non existing CCA into the `BudgetBook` in `Model`."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* `BudgetBook#commitBudgetBook()` -- Save a current version of the budget book in the `VersionedBudgetBook`."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "These operations are exposed in the `Model` interface as `Model#addCca(Cca cca)`, `Model#hasCca(CcaName name)`,"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "`Model#hasCca(Cca cca)` and `Model#commitBudgetBook()`."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "Given below is an example usage scenario and how the create cca mechanism behaves at each step."
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ". The user create a new CCA by including the `CCA name` and the \u0027budget` allocated to the CCA."
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". `create` command checks for existing CCA name using `BudgetBook#hasCca(Cca toAdd)`. If a CCA with the same"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "name exists, the CCA is not created. Otherwise, it is added into the `BudgetBook` in the `Model`."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ". `BudgetBook#addCca(Cca cca)` then invokes `ModelManger#indicateBudgetBookChange()` to raise a"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "`BudgetBookChangedEvent`, which is handled by `EventsCenter`."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ". `BudgetBookChangedEvent` is then handled by `StorageManager#handleBudgetBookChangedEvent(BudgetBookChangedEvent"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "event)`. `StorageManager#saveBudgetBook(ReadOnlyBudgetBook data)` is then called to write the update the existing"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "`ccabook.xml` file with the new CCA."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Choice of local storage format"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* **Alternative 1 (current choice):** Saves in `.xml` format."
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Pros: Easy to create, understand, move and translate into other environments. International data standard for"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "storing information."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Cons: Parsing XML software is slow and cumbersome. Use large amounts of memory due to the verbosity and incur cost"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " of parsing large XML files."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* **Alternative 2:** Save in `.json` format."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Pros: Faster in parsing information."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Cons: Limited in terms of what objects can be modeled."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data encryption"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "`java.util.logging` package is used for logging. The `LogsCenter` class is used to manage the logging levels and"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "logging destinations."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* Logging level can be controlled using the `logLevel` setting in the configuration file (See"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "specified logging level"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* Current log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* `SEVERE` : Detect critical problem which may possibly cause the termination of the application."
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* `WARNING` : Able to continue, but with caution."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* `INFO` : Show information on the noteworthy actions by the App."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* `FINE` : Display eetails that is not usually noteworthy but may be useful in debugging e.g. print the actual list"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "instead of just its size."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Editing documentation"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Publishing documentation"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Converting documentation to PDF format"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-SiteWideDocSettings]]"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Site-wide documentation settings"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/build.gradle[`build.gradle`] file specifies some project-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how all documentation files within this project are rendered."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in the `build.gradle` file will use their *default value*, if any."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": ".List of site-wide attributes"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-name`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "|The name of the website."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "If set, the name will be displayed near the top of the page."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-githuburl`"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "|URL to the site\u0027s repository on https://github.com[GitHub]."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "Setting this will add a \"View on GitHub\" link in the navigation bar."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-seedu`"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "|Define this attribute if the project is an official SE-EDU project."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "This will render the SE-EDU navigation bar at the top of the page, and add some SE-EDU-specific navigation items."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "[[Docs-PerFileDocSettings]]"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Per-file documentation settings"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": "Each `.adoc` file may also specify some file-specific https://asciidoctor.org/docs/user-manual/#attributes[asciidoc attributes] which affects how the file is rendered."
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "Asciidoctor\u0027s https://asciidoctor.org/docs/user-manual/#builtin-attributes[built-in attributes] may be specified and used as well."
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "Attributes left unset in `.adoc` files will use their *default value*, if any."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "[cols\u003d\"1,2a,1\", options\u003d\"header\"]"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": ".List of per-file attributes, excluding Asciidoctor\u0027s built-in attributes"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "|Attribute name |Description |Default value"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "|`site-section`"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "-"
        },
        "content": "|Site section that the document belongs to."
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "This will cause the associated item in the navigation bar to be highlighted."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "One of: `UserGuide`, `DeveloperGuide`, ``LearningOutcomes``{asterisk}, `AboutUs`, `ContactUs`"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "_{asterisk} Official SE-EDU projects only_"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "|`no-site-header`"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "|Set this attribute to remove the site navigation bar."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "-"
        },
        "content": "|_not set_"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Site template"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/stylesheets[`docs/stylesheets`] are the https://developer.mozilla.org/en-US/docs/Web/CSS[CSS stylesheets] of the site."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "You can modify them to change some properties of the site\u0027s design."
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "The files in link:{repoURL}/docs/templates[`docs/templates`] controls the rendering of `.adoc` files into HTML5."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "These template files are written in a mixture of https://www.ruby-lang.org[Ruby] and http://slim-lang.com[Slim]."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "[WARNING]"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "Modifying the template files in link:{repoURL}/docs/templates[`docs/templates`] requires some knowledge and experience with Ruby and Asciidoctor\u0027s API."
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "You should only modify them if you need greater control over the site\u0027s layout than what stylesheets can provide."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "The SE-EDU team does not provide support for modified template files."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "Testing is a crucial part of developing your application."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "Testing allows you to verify the correctness and usability of your app, before releasing it to users."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Running tests"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Troubleshooting testing"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `HelpWindow.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes the tools used for building, testing, and releasing the application."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Build automation"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Continuous integration"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Coverage reporting"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Documentation previews"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Making a release"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Managing dependencies"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `execute()` throws an Exception."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "* JCRC member of a Hall of NUS"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "* has to manage a significant number of hall residents"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "* has to manage budget for CCAs"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "* has to consolidate hall event dates"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "* has to notify hall residents about events"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: manage hall residents faster and easier than a typical mouse/GUI driven app"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new JCRC member |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |add a new person |"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |list all persons |"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |mass import residents\u0027 details |save time from not having to manually key in contacts one by one"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |delete selected groups of residents |save time from not having to search for and delete persons one by one"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |delete selected tags from residents |accommodate mass changes in CCA members list"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |compose emails |ease the process of sending emails to groups of hall residents"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC member |publish calenders |prevent clashes between events and inform hall residents of upcoming events"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |JCRC Finance Director |keep track of each CCA\u0027s budget |prevent problems during an audit"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |JCRC member |hide \u003c\u003cprivate-contact-detail,private contact details\u003e\u003e by default |minimize chance of someone else seeing them by accident"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |JCRC member |list which residents are in specified CCAs |contact personnel in the CCA more efficiently"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |JCRC member |sort persons by name |locate a resident easily"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |JCRC member |store pictures under contact details |easily identify hall residents and distinguish between those with similar names"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `Hallper` and the *Actor* is the `JCRC member`, unless specified otherwise)"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Display usage instructions"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to view usage instructions"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows usage instructions"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add person"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to add a person with specific details"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper adds the person"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "1.  JCRC member requests to list persons"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "2.  Hallper shows a list of persons"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "3.  JCRC member requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "4.  Hallper deletes the person"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message."
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: List persons"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to list persons"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows list of all persons"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Search tag"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to search by specific tag"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows list of only persons with specified tag"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Find person"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to find person containing specific name"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows list of persons with matching name"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Clear persons"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to clear persons"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper clears all persons"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "* 1a. JCRC member requests to clear persons with specific tag"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "** 1a1. Hallper clears all persons with specified tag"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Import contacts"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to import contacts"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests for file location"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters file location"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper imports contacts"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. File is invalid"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows error message"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Erase tag"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to erase a specific tag"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper erases specified tag from all persons"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Compose email"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to compose email"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests for all details of email (Sender, recipient, subject, content, attachment)"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters all details"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper saves an output file in the computer"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Select person"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to list persons"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows list of persons"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member requests to select a specific person in the list"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper shows details of selected person"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message."
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Publish calendar"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to publish calendar"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests for the intended calendar month"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters the month"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper saves an output file in the computer"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete a calendar"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to delete a calendar"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests the calendar month"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters the month"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper deletes the specified calendar"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. Calendar does not exist"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add event to calendar"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to add a new event to a calendar"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests for all details of event (Month, year, day, start time, end time, event name)"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters all details"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper creates a new event on the calendar"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. Another event clashes with the same timing"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete event on a calendar"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to delete an event on a calendar"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests for all details of event (Month, year, day, event name)"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters all details"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper deletes the specified event on the calendar"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. Event does not exist"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add CCA"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to add a CCA"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests for details of CCA (Name of CCA, names of head and vice-head, budget)"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters the details"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper displays the details of the CCA"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. Name(s) of head and/or vice-head is/are not detected in the contact list"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": "* 3b. Budget entered is invalid"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "** 3b1. Hallper shows an error message"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Modify CCA"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to list CCAs"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows list of CCAs"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member requests to modify a specific CCA in the list"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper requests for new details of the CCA (Name of CCA, names of head and vice-head, budget)"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "5. JCRC member enters the details"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": "6. Hallper displays the new details of the CCA"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper displays error message"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "* 5a. Name(s) of head and/or vice-head is/are not detected in the contact list"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "** 5a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "-"
        },
        "content": "* 5b. Budget entered is invalid"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "** 5b1. Hallper shows an error message"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete CCA"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to list CCAs"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows list of CCAs"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member requests to delete a specific CCA in the list"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper requests for confirmation of deletion"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "5. JCRC member confirms"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "6. Hallper deletes the CCA"
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "-"
        },
        "content": "* 5a. JCRC member cancels instead"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Select CCA"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to list CCAs"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper shows list of CCAs"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member requests to select a specific CCA in the list"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper shows details of selected CCA"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message."
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: List all CCAs"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests for list of CCAs"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper displays list of CCAs"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add CCA Transaction"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests for list of CCAs"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper displays list of CCAs"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member requests to add a transaction for a specific CCA in the list"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper requests transaction details (Amount of money, name of person-in-charge, comments)"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "5. JCRC member enters transaction details"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "6. Hallper displays details of the CCA"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "Use Case ends."
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "* 5a. Name of person-in-charge is not detected in the contact list"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "** 5a1. Hallper shows an error message"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": "* 5b. Amount of money entered is invalid"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": "** 5b1. Hallper shows an error message"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "* 5c. Comments left empty"
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "** 5c1. Hallper shows an error message"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 4."
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Sort contacts"
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests sort the contacts"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper sorts the contacts"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Add image"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "1. JCRC member requests to add a person\u0027s image"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "-"
        },
        "content": "2. Hallper requests for name and image location"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": "3. JCRC member enters name and image location"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "4. Hallper adds the image"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": "*  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `9` or higher installed."
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "-"
        },
        "content": "*  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "-"
        },
        "content": "*  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others."
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "-"
        },
        "content": "[[cca]] CCA::"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "-"
        },
        "content": "Co-Curricular Activity that residents can join within their respective halls."
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "-"
        },
        "content": "[[jcrc]] JCRC::"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "-"
        },
        "content": "Junior Common Room Committee in charge of administrative duties within their respective halls."
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "-"
        },
        "content": "*Product Name*"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "-"
        },
        "content": "Author: ..."
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Deleting a Person"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d\u003d Saving Data"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "-"
        },
        "content": ". Dealing with missing/corrupted data files"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "-"
        },
        "content": ".. _{explain how to simulate a missing/corrupted file and the expected behavior}_"
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "-"
        },
        "content": "_{ more test cases ... }_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 108,
      "-": 1460,
      "GilgameshTC": 146
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Hallper - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":site-section: UserGuide"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ":toclevels: 3"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103-AY1819S1-W16-1/main/tree/master"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team W16-1`      Since: `Aug 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper is a desktop app for the JCRC that allows *for better and faster management of residents\u0027 contacts*. More importantly, Hallper is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, Hallper can get your contact management tasks done faster than traditional GUI apps. Interested? Jump to \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `9` or later installed in your Computer."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ".  Download the latest `Hallper.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Hallper."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the User Guide window."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Examples"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some commands that you can try out with:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "* **`add`**`n/John Doe p/98765432 e/johnd@example.com r/A110 s/FoS t/basketball` : adds a contact named `John Doe` to Hallper."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/CCA]` can be used as `n/John Doe c/soccer` or as `n/John Doe`."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/CCA]...` can be used as `{nbsp}` (i.e. 0 times), `t/soccer`, `t/soccer t/basketball` etc."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Updating Hallper"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "This section lists features related to updating contacts in Hallper."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to Hallper. +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `add n/NAME p/PHONE_NUMBER e/EMAIL r/ROOM NUMBER s/SCHOOL [t/CCA]...`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of CCAs (including 0)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/John Doe p/98765432 e/johnd@example.com r/C420 s/SoC t/Basketball`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "* `add n/Betsy Crowe t/Soccer e/betsycrowe@example.com p/1234567 r/B213 s/Business`"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in Hallper. +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/CCA]...`"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the displayed person list. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `c/` without specifying any tags after it."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower c/` +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person : `delete`"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified person from Hallper. +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete INDEX`"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the displayed person list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in Hallper."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 1` +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all specified tags : `erase`"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Clears all spcified tags from all contacts from Hallper. +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `erase CCA`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Erases the CCA specified for all associated contacts."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* The CCA specified must be an existing CCA."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Multiple CCAs can be specified at once."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `erase basketball` +"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Erases `basketball` from contacts associated with this CCA. +"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `erase basketball netball` +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Erases `basketball` and `netball` from contacts associated with these CCAs."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing specific entries : `clear`"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Clears specified entries from Hallper. +"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `clear KEYWORD`"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Clears contacts associated with KEYWORD."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* KEYWORD refers to either a CCA or ROOM."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* KEYWORD is case-sensitive."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `clear basketball` +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Clears all entries associated with CCA `basketball`."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `clear A123` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Clears all entries associated with room `A123`."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Clearing all entries : `clear all`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from Hallper. +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear all`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "* \u0027all\u0027 is case-sensitive."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "* `clear all` +"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "Clears `all` entries in Hallper."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Uploading contact information : `import`"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Imports file containing contact information and updates Hallper accordingly. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `import f/FILEPATH`"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow for the mass upload of contact information."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "* The file to be uploaded must be a *`.xml`* file."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `import f/C://Users/Files/data.xml` +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Imports `data.xml` file to be read and for database to be updated accordingly."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Adds a picture to resident detail : `image`"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Uploads the image of resident staying in the specified room to Hallper. +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `image ROOM`"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Allow for the upload of the profile picture of resident."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "* The image must be in *`.jpg`* or *`.png`*."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing Hallper"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "This section lists features related to viewing all or specific contacts in Hallper."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Searching all persons under specified tag : `search`"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the Hallper that are associated with the specified keyword. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `search KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "* KEYWORD can be ROOM or CCA."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "* KEYWORD is not case-sensitive."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "* `search basketball` +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "Searches Hallper and lists all contacts associated with `basketball`."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* `search A123` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "Searches Hallper and lists all contacts associated with `A123`."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* `search basketball A123` +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "Searches Hallper and lists all contacts associated with `basketball` and `A123`."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in Hallper. +"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Email"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "This section lists features related to email in Hallper."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Composing an email: `compose`"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "Composes a *`.eml`* file that can be used to send emails to residents. +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `compose from/FROM to/TO subject/SUBJECT content/CONTENT`"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "* FROM and TO must be valid email addresses e.g. johndoe@example.com"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "* SUBJECT has a word limit of 10 words."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "* CONTENT has no word limit."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "* `compose from/johndoe@example.com to/samsee@example.com subject/Meeting this Friday"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "content/Hey there\u0027s a meeting this friday.` +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "Composes an email from `johndoe@example.com` to `samsee@example.com` with subject"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "`Meeting this Friday` and email body `Hey there\u0027s a meeting this friday.` and saves"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "it as a *`.eml`* file."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Calendar"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "This section lists features related to managing the calendar in Hallper."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Creating calendar : `create_calendar`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Creates a calendar file in Hallper for updating of events. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `create_calendar month/MONTH year/YEAR`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* Creates a calendar as a *`.ics`* file."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* The MONTH *must be specified as MMM*."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* The YEAR *must be specified as YYYY*."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `create_calendar month/Feb year/2018` +"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Creates a calendar for the month of `Feb` and year `2018` and"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "saves it as a *`.ics`* file."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing calendar : `view_calendar`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "Views the calendar of the specified month. +"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view_calendar MONTH`"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `view_calendar Feb` +"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Displays view of calendar for the month of `Feb`."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Adding event into calendar : `add_event`"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an event into the calendar. +"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `add_event month/MONTH year/YEAR sdate/START DATE shour/START HOUR smin/START MIN"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "edate/END DATE ehour/END HOUR emin/END MINUTE title/NAME OF EVENT`"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* The *MONTH must be specified as MMM*."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* The *YEAR must be specified as YYYY*."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *DATE, HOUR, MINUTE must be specified as XX*."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `add_event month/Feb year/2018 sdate/01 shour/12 smin/00 edate/01 ehour/15 emin/00 title/Enthral` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Adds an event titled `Enthral` into calendar for `Feb 2018` which starts on the `1` st at `1200` and ends on"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "the `1` st at `1500`."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d Budget and CCA"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "This section lists features related to CCA budget management in Hallper."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the budget for all CCAs : `budget`"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "Allows for the viewing of the budgets for all the CCAs. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `budget`"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* BP displays the total budget allocated to the CCAs, total outstanding amount and budget information of each CCA, in alphabetical order."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing CCA budget : `view_cca`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "Allows for the viewing of the budget and past transactions of the specified CCA. +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `view_cca CCA`"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `view_cca soccer` +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Displays view of budget and past transactions for `soccer` CCA."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Creating a CCA\u0027s budget : `create`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Adds a CCA into the budget book with the initial given budget. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `create n/CCA bud/BUDGET`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* BUDGET currency is in SGD."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `create n/basketball bud/200` +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Adds `basketball` CCA with SGD`200` budget to Hallper."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a CCA\u0027s budget : `delete_cca`"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Deletes the CCA\u0027s existing budget. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `delete_cca CCA`"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `delete_cca soccer` +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Deletes `soccer` CCA\u0027s existing budget."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Modifying a CCA\u0027s budget : `modify_cca`"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Modifies the budget of specified CCA. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `modify_cca CCA BUDGET`"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* BUDGET currency is in SGD."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `modify_cca soccer 500` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Modifies `soccer` CCA\u0027s current budget to SGD `500` ."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a transaction to the budget : `add_transaction`"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Adds a transaction to the budget of specified CCA. +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `add_transaction CCA AMOUNT TYPE PERSON_IN_CHARGE`"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "****"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* Adds a transaction to the budget of specifed CCA."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* The types available are  either *`credit`* or *`debit`*."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* The *`PERSON-IN-CHARGE`* must be a resident in Hallper."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "* `add_transaction badminton 500 credit James`"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Adds a `credit` transaction of SGD `500` to `James` from `badminton` CCA."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d Miscellaneous"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "This section lists miscellaneous commands for navigating Hallper."
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Opens up the User Guide in a new window. +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Restores Hallper to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Undoable commands: those commands that modify Hallper\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "Hallper data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Hallper folder."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add* : `add n/NAME p/PHONE_NUMBER e/EMAIL b/BLOCK r/ROOM NUMBER s/SCHOOL [c/CCA]...` +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add n/James Ho p/22224444 e/jamesho@example.com b/C r/420 s/School of Computing c/Basketball`"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [c/CCA]...` +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete* : `delete INDEX` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `delete 3`"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "* *Erase* : `erase CCA` +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `erase basketball`"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Clear* : `clear KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `clear basketball A123`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Clear all* : `clear all`"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Import* : `import f/FILEPATH`"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Image* : `image`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Search* : `search KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `search basketball A123`"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Compose* : `compose from/FROM to/TO subject/SUBJECT content/CONTENT`"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "* *Create Calendar* : `create_calendar MONTH` +"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `create_calendar month/Feb year/2018`"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "* *View Calendar* : `view_calendar MONTH` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `view_calendar Feb`"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add Event* : `add_event month/MONTH year/YEAR sdate/START DATE shour/START HOUR smin/START MIN"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "edate/END DATE ehour/END HOUR emin/END MINUTE title/NAME OF EVENT` +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `add_event month/Feb year/2018 sdate/01 shour/12 smin/00 edate/01 ehour/15 emin/00 title/Enthral`"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Create CCA Budget* : `create n/CCA bud/BUDGET` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `create Basketball 500`"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Budget* : `budget`"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *View CCA* : `view_cca CCA` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `view_cca basketball`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Delete CCA* : `delete_cca CCA` +"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `delete_cca basketball`"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Modify CCA* : `modify_cca CCA BUDGET` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `modify_cca basketball 500`"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Add Transaction* : `add_transaction CCA AMOUNT TYPE PERSON-IN-CHARGE` +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "e.g. `add_transaction soccer 500 debit James`"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `view 2`"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* *Exit* : `exit`"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "* `CCA`: Co-Curricular Activity that residents can join within their respective halls."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "* `JCRC`: Junior Common Room Committee in charge of administrative duties within their respective halls."
      }
    ],
    "authorContributionMap": {
      "kengwoon": 163,
      "-": 349
    }
  },
  {
    "path": "docs/team/eatorbeeaten.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d KOK YUAN - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/ericyjw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d ERIC YANG JIA WEI- Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/gilgameshtc.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d TRAVIS CHING JIA YEA - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/kengwoon.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d SHANNA LIM KENG WOON - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "docs/team/team.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d TEAM W16-1 Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":site-section: AboutUs"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: Hallper"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{#To be edited#}_"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Major enhancement*: added *the ability to undo/redo previous commands*"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** What it does: allows the user to undo all previous commands one at a time. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Justification: This feature improves the product significantly because a user can make mistakes in commands and the app should provide a convenient way to rectify them."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth analysis of design alternatives. The implementation too was challenging as it required changes to existing commands."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Credits: _{mention here if you reused any code/ideas from elsewhere or if a third-party library is heavily used in the feature so that a reader can make a more accurate judgement of how much effort went into the feature}_"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Minor enhancement*: added a history command that allows the user to navigate to previous commands using up/down keys."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] _{give links to collated code files}_"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Managed releases `v1.3` - `v1.5rc` (3 releases) on GitHub"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Wrote additional tests for existing features to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Did cosmetic tweaks to existing contents of the User Guide: https://github.com[#14]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#12], https://github.com[#32], https://github.com[#19], https://github.com[#42]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Contributed to forum discussions (examples:  https://github.com[1], https://github.com[2], https://github.com[3], https://github.com[4])"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples:  https://github.com[1], https://github.com[2], https://github.com[3])"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Some parts of the history feature I added was adopted by several other class mates (https://github.com[1], https://github.com[2])"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "*** Integrated a new Github plugin (CircleCI) to the team repo"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{you can add/remove categories in the list above}_"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddataencryption]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003d\u003d PROJECT: PowerPointLabs"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "_{Optionally, you may include other projects in your portfolio.}_"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.storage.BudgetBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.EmailDirStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.EmailStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.IcsCalendarStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.storage.XmlBudgetBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Version VERSION \u003d new Version(0, 6, 0, true);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        AppParameters appParameters \u003d AppParameters.parse(getParameters());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(appParameters.getConfigPath());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        BudgetBookStorage budgetBookStorage \u003d new XmlBudgetBookStorage(userPrefs.getBudgetBookFilePath());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailStorage emailStorage \u003d new EmailDirStorage(userPrefs.getEmailPath());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarStorage calendarStorage \u003d new IcsCalendarStorage(userPrefs.getCalendarPath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, budgetBookStorage, userPrefsStorage, calendarStorage,"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            emailStorage);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * userPrefs}."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * \u003cbr\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Optional\u003cReadOnlyBudgetBook\u003e budgetBookOptional;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ReadOnlyAddressBook initialAddressData;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ReadOnlyBudgetBook initialBudgetData;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialAddressData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialAddressData \u003d new AddressBook();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetBookOptional \u003d storage.readBudgetBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (!budgetBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample BudgetBook\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialBudgetData \u003d budgetBookOptional.orElseGet(SampleDataUtil::getSampleBudgetBook);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BudgetBook\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialBudgetData \u003d new BudgetBook();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty BudgetBook\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            initialBudgetData \u003d new BudgetBook();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new ModelManager(initialAddressData, initialBudgetData, userPrefs);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Path configFilePathUsed;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default config properties\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Path prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Using default user prefs\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        stop();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 27,
      "-": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/XmlToHmtl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.parsers.DocumentBuilderFactory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.transform.Transformer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.transform.TransformerException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.transform.TransformerFactory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.transform.dom.DOMSource;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.transform.stream.StreamResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import org.w3c.dom.NamedNodeMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import org.w3c.dom.Node;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import org.xml.sax.SAXException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * To convert XML files to HTML"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class XmlToHmtl {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String ccaBook \u003d \"./data/ccabook.xml\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String ccaBookXsl \u003d \"./docs/ccabook.xsl\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String outputHtml \u003d \"./data/ccabook.html\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Convert ccabook.xml into ccabook.hmtl to view on the Webview of FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static void convertCcaBook(String chosenCca) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        changeChosenCcaTo(chosenCca);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            TransformerFactory tFactory \u003d TransformerFactory.newInstance();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            File xmlFile \u003d new File(ccaBook);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            File xslFile \u003d new File(ccaBookXsl);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            Transformer transformer \u003d tFactory.newTransformer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    (new javax.xml.transform.stream.StreamSource(xslFile));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            transformer.transform(new javax.xml.transform.stream.StreamSource(xmlFile),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    new javax.xml.transform.stream.StreamResult(new FileOutputStream(outputHtml)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Set the xsl file to display chosen CCA"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param chosenCca budget information that the chosen CCA"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static void changeChosenCcaTo(String chosenCca) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            DocumentBuilderFactory docFactory \u003d DocumentBuilderFactory.newInstance();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            DocumentBuilder docBuilder \u003d docFactory.newDocumentBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            Document doc \u003d docBuilder.parse(ccaBookXsl);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            // Set the display information of the chosen CCA"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            Node chosen \u003d doc.getElementsByTagName(\"xsl:if\").item(0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            NamedNodeMap attribute \u003d chosen.getAttributes();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            Node nodeAttr \u003d attribute.getNamedItem(\"test\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            String expr \u003d \"name\u003d\u0027\" + chosenCca + \"\u0027\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            nodeAttr.setTextContent(expr);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            // Write the content into xml file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            TransformerFactory transformerFactory \u003d TransformerFactory.newInstance();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            Transformer transformer \u003d transformerFactory.newTransformer();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            DOMSource source \u003d new DOMSource(doc);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            StreamResult result \u003d new StreamResult(new File(ccaBookXsl));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            transformer.transform(source, result);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (ParserConfigurationException pce) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            pce.printStackTrace();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (TransformerException tfe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            tfe.printStackTrace();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            ioe.printStackTrace();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (SAXException sae) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            sae.printStackTrace();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 89
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path DEFAULT_CONFIG_FILE \u003d Paths.get(\"config.json\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String appTitle \u003d \"Hallper\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path userPrefsFilePath \u003d Paths.get(\"preferences.json\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(Path userPrefsFilePath) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 1,
      "-": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_CCAS_LISTED_OVERVIEW \u003d \"%1$d CCAs listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_INVALID_RESULT \u003d \"There is no such person or CCA!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/AllDayEventAddedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/** Indicates an all day event has been added into the calendar*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class AllDayEventAddedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final Year year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final Month month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int date;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public AllDayEventAddedEvent(Year year, Month month, int date, String title) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return date + \"/\" + month + \"/\" + year + \" - \" + title;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/BudgetBookChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Indicates the BudgetBook in the model has changed"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetBookChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final ReadOnlyBudgetBook data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBookChangedEvent(ReadOnlyBudgetBook data) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return \"number of CCAs \" + data.getCcaList().size();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CalendarCreatedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.CalendarModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/** Indicates a calendar has been created*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarCreatedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final CalendarModel data;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarCreatedEvent(CalendarModel data) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return \"number of calendars \" + data.size();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CalendarEventAddedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/** Indicates an event with a specific time frame has been added into the calendar*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarEventAddedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final Year year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final Month month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int startHour;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int startMin;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int endDate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int endHour;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int endMin;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarEventAddedEvent(Year year, Month month, int startDate, int startHour, int startMin,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                                   int endDate, int endHour, int endMin, String title) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startHour \u003d startHour;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startMin \u003d startMin;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endHour \u003d endHour;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endMin \u003d endMin;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return startDate + \"/\" + month + \"/\" + year + \" - \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                + endDate + \"/\" + month + \"/\" + year + \" [\" + title + \"]\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/CalendarEventDeletedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/** Indicates an event has been deleted from the monthly calendar*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarEventDeletedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final Year year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final Month month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int startDate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final int endDate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String title;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarEventDeletedEvent(Year year, Month month, int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return startDate + \"/\" + month + \"/\" + year + \" - \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                + endDate + \"/\" + month + \"/\" + year + \" [\" + title + \"]\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/EmailSavedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Indicates the Email in the model has been saved."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class EmailSavedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public final EmailModel data;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public EmailSavedEvent(EmailModel data) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.data \u003d data;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return data.getEmail().getSubject();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 18,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/CcaPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a selection change in the CCA List Panel"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Cca newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaPanelSelectionChangedEvent(Cca newSelection) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca getNewSelection() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/EmailViewEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Indicates a request to view email."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class EmailViewEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private final EmailModel emailModel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public EmailViewEvent(EmailModel emailModel) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.emailModel \u003d emailModel;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public EmailModel getEmailModel() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return emailModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 22,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/JumpToBudgetRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class JumpToBudgetRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public JumpToBudgetRequestEvent(Index targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.targetIndex \u003d targetIndex.getZeroBased();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewBudgetResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class NewBudgetResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public NewBudgetResultAvailableEvent(String message) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ShowBudgetViewEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * An event requesting to view the budget page."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class ShowBudgetViewEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getClass().getSimpleName();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the {@code sentence} contains the {@code word}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc\") \u003d\u003d true"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String preppedSentence \u003d sentence;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(wordsInPreppedSentence)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code tags} contains the {@code word}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tags cannot be null"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param word cannot be null, cannot be empty and must be a single word"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author javenseow"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static boolean containsFieldIgnoreCase(String tags, String word) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(!preppedWord.isEmpty(), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String preppedTags \u003d tags;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String[] wordsInTagsSentence \u003d preppedTags.split(\",\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        for (int i \u003d 0; i \u003c wordsInTagsSentence.length; i++) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            wordsInTagsSentence[i] \u003d wordsInTagsSentence[i].trim();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return Arrays.stream(wordsInTagsSentence)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                .anyMatch(preppedWord::equalsIgnoreCase);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 19,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of CCAs */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    ObservableList\u003cCca\u003e getFilteredCcaList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 4,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return command.execute(model, history);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cCca\u003e getFilteredCcaList() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return model.getFilteredCcaList();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 7,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddAllDayEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Adds a new all day event into the monthly calendar specified by user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class AddAllDayEventCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_all_day_event\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new all day event into the calendar. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"MMM \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"YYYY \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_DATE + \"DD \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_TITLE + \"Description\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"OCT \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"2018 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_DATE + \"25 \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_TITLE + \"Hall Open Day \";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"All day event added: %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_EXISTING_CALENDAR \u003d \"This calendar doesn\u0027t exist in Hallper\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_VALID_DATE \u003d \"This is not a valid date in %s\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int date;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public AddAllDayEventCommand(Month month, Year year, int date, String title) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.date \u003d date;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isExistingCalendar(year, month)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXISTING_CALENDAR);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidDate(year, month, date)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_VALID_DATE, month + \" - \" + year));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        model.createAllDayEvent(year, month, date, title);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, date + \"/\" + month + \"/\" + year + \" - \" + title));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof AddAllDayEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((AddAllDayEventCommand) other).month)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((AddAllDayEventCommand) other).year)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 title.equals(((AddAllDayEventCommand) other).title)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 date \u003d\u003d ((AddAllDayEventCommand) other).date);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ROOM + \"ROOM \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SCHOOL + \"SCHOOL \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ROOM + \"C420 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + PREFIX_SCHOOL + \"FacultyOfScience \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"soccer \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"track\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_CCA \u003d \"The CCA does not exist. Please create the CCA before \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"adding its member\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (model.hasPerson(toAdd)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (toAdd.getTags().size() \u003e 0 \u0026\u0026 !model.hasCca(toAdd)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CommandException(MESSAGE_NON_EXISTENT_CCA);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "ericyjw": 6,
      "-": 69
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_HOUR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_MIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_MIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Adds a new event with the specified time frame into the monthly calendar specified by user."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class AddEventCommand extends Command {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add_event\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a new event into the calendar. \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"MMM \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"YYYY \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_DATE + \"DD \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_HOUR + \"HH(24 hour format) \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_MIN + \"mm \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_DATE + \"DD \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_HOUR + \"HH(24 hour format) \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_MIN + \"mm \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_TITLE + \"Description\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"JUL \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"2018 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_DATE + \"21 \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_HOUR + \"08 \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_MIN + \"00 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_DATE + \"24 \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_HOUR + \"17 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_MIN + \"00 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_TITLE + \"Hall Exposure Camp \";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar event added: %s\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_EXISTING_CALENDAR \u003d \"This calendar doesn\u0027t exist in Hallper\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_VALID_DATE \u003d \"This is not a valid date %s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_VALID_TIME \u003d \"This is not a valid time %s\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_VALID_TIMEFRAME \u003d \"End Date should not be earlier than Start Date\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int startDate;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int startHour;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int startMin;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int endDate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int endHour;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int endMin;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public AddEventCommand(Month month, Year year, int startDate, int startHour, int startMin,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                           int endDate, int endHour, int endMin, String title) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startHour \u003d startHour;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startMin \u003d startMin;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endHour \u003d endHour;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endMin \u003d endMin;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isExistingCalendar(year, month)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXISTING_CALENDAR);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether startDate is valid"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidDate(year, month, startDate)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_VALID_DATE, startDate + \"/\" + month + \"/\" + year));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether startTime is valid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidTime(startHour, startMin)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_VALID_TIME, startHour + \":\" + startMin));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether endDate is valid"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidDate(year, month, endDate)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_VALID_DATE, endDate + \"/\" + month + \"/\" + year));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether endTime is valid"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidTime(endHour, endMin)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_VALID_TIME, endHour + \":\" + endMin));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether start date and end date is a valid time frame."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidTimeFrame(startDate, startHour, startMin, endDate, endHour, endMin)) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_VALID_TIMEFRAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        model.createEvent(year, month, startDate, startHour, startMin, endDate, endHour, endMin, title);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, startDate + \"/\" + month + \"/\" + year"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                + \" - \" + endDate + \"/\" + month + \"/\" + year + \" [\" + title + \"]\"));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof AddEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((AddEventCommand) other).month)"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((AddEventCommand) other).year)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 startDate \u003d\u003d (((AddEventCommand) other).startDate)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 startHour \u003d\u003d (((AddEventCommand) other).startHour)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 startMin \u003d\u003d (((AddEventCommand) other).startMin)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 endDate \u003d\u003d (((AddEventCommand) other).endDate)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 endHour \u003d\u003d (((AddEventCommand) other).endHour)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 endMin \u003d\u003d (((AddEventCommand) other).endMin)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 title.equals(((AddEventCommand) other).title));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 130
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/BudgetCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.ShowBudgetViewEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.TagContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * View the budget of the whole hall or by their CCA."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"budget\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": View the budget of the whole hall or by each CCA \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"\\nParameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"overall\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" overall\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \" or\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Parameters: \" + PREFIX_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" basketball\\n\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String SHOWING_BUDGET_MESSAGE \u003d \"Display budget.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final TagContainsKeywordPredicate predicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetCommand(TagContainsKeywordPredicate predicate) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        EventsCenter.getInstance().post(new ShowBudgetViewEvent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new CommandResult(SHOWING_BUDGET_MESSAGE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof BudgetCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 predicate.equals(((BudgetCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsRoomPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ClearCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Clears all persons associated with \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"the specified keywords(case-insensitive) or clears all persons for keyword \u0027all\u0027.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" all\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" basketball\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"A123\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_CLEAR_ALL_SUCCESS \u003d \"Hallper has been cleared!\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_CLEAR_SPECIFIC_SUCCESS \u003d \"Cleared persons under %1$s in Hallper\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_CLEAR_NOTHING \u003d \"No persons found under %1$s in Hallper\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final ContactContainsTagPredicate predicateTag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final ContactContainsRoomPredicate predicateRoom;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e target;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private ArrayList\u003cPerson\u003e toClear;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private boolean clearAll;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private boolean clearRoom;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ClearCommand(List\u003cString\u003e target) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.predicateTag \u003d new ContactContainsTagPredicate(target);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.predicateRoom \u003d new ContactContainsRoomPredicate(target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.clearAll \u003d false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.clearRoom \u003d false;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.toClear \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (String s : target) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (s.toLowerCase().equals(\"all\")) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                this.clearAll \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (Room.isValidRoom(s)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                this.clearRoom \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (clearAll) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return clearAll(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return clearSpecific(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Clears data in entire address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param model model component"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandResult clearAll(Model model) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new CommandResult(MESSAGE_CLEAR_ALL_SUCCESS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Clears data of specific tags."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param model model component"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @return CommandResult"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandResult clearSpecific(Model model) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        toClear.clear();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e fullList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : fullList) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (clearRoom ? predicateRoom.test(p) : predicateTag.test(p)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                toClear.add(p);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (toClear.isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_CLEAR_NOTHING, target));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.clearMultiplePersons(toClear);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_CLEAR_SPECIFIC_SUCCESS, target));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 97,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ComposeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Composes email and writes it to hard disk"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class ComposeCommand extends Command {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"compose\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Composes an email. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_FROM + \"EMAIL \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_TO + \"EMAIL \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_SUBJECT + \"SUBJECT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_CONTENT + \"CONTENT(Input \u003cbr /\u003e for newline)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_FROM + \"johndoe@example.com \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_TO + \"samsee@example.com \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_SUBJECT + \"Meeting this Friday \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            + PREFIX_CONTENT + \"Dear Sam\u003cbr /\u003e\u003cbr /\u003eRemember our meeting this friday.\u003cbr /\u003e\u003cbr /\u003eJohn\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Email composed: %s\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private final Email toCompose;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public ComposeCommand(Email email) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        toCompose \u003d email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        model.saveEmail(toCompose);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toCompose.getSubject()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                || (other instanceof ComposeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                \u0026\u0026 toCompose.equals(((ComposeCommand) other).toCompose));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 42,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateCalendarCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Creates a Calendar with a specified month, year and writes it to hard disk."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CreateCalendarCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create_calendar\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Creates a calendar. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"MMM \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"YYYY\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"OCT \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"2018 \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar created: %s\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_EXISTING_CALENDAR \u003d \"This calendar already exists in Hallper\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CreateCalendarCommand(Month month, Year year) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (model.isExistingCalendar(year, month)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(MESSAGE_EXISTING_CALENDAR);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        model.createCalendar(year, month);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, month + \"-\" + year + \".ics\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof CreateCalendarCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((CreateCalendarCommand) other).month)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((CreateCalendarCommand) other).year));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "GilgameshTC": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/CreateCcaCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CreateCcaCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"create\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Create a new CCA to the address book. \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_NAME + \"CCA NAME \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_BUDGET + \"BUDGET \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_NAME + \"Basketball \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_BUDGET + \"500\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New CCA added: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CCA \u003d \"This CCA already exists in the budget book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Cca toAdd;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates an CreateCcaCommand to add the specified {@code Cca}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CreateCcaCommand(Cca cca) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(cca);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        toAdd \u003d cca;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (model.hasCca(toAdd)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CCA);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        model.addCca(toAdd);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        model.commitBudgetBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof CreateCcaCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 toAdd.equals(((CreateCcaCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 59
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteEventCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Deletes an event with the title and start - end date in the monthly calendar specified by user."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class DeleteEventCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete_event\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Deletes an event from the calendar. \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"MMM \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"YYYY \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_DATE + \"DD \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_DATE + \"DD \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_TITLE + \"Description\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"[An all day event will have the same start date and end date]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_MONTH + \"JUL \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_YEAR + \"2018 \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_START_DATE + \"21 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_END_DATE + \"24 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + PREFIX_TITLE + \"Hall Exposure Camp \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Calendar event deleted: %s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_EXISTING_CALENDAR \u003d \"This calendar doesn\u0027t exist in Hallper\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_VALID_DATE \u003d \"This is not a valid date %s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_NOT_EXISTING_EVENT \u003d \"This event does not exist in the calendar: %s\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Month month;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final Year year;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int startDate;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final int endDate;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private final String title;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public DeleteEventCommand(Month month, Year year, int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.startDate \u003d startDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.endDate \u003d endDate;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.title \u003d title;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isExistingCalendar(year, month)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(MESSAGE_NOT_EXISTING_CALENDAR);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether startDate is valid"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidDate(year, month, startDate)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_VALID_DATE, startDate + \"/\" + month + \"/\" + year));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether endDate is valid"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isValidDate(year, month, endDate)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_VALID_DATE, endDate + \"/\" + month + \"/\" + year));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check whether event exists in calendar"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!model.isExistingEvent(year, month, startDate, endDate, title)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOT_EXISTING_EVENT, month + \"-\" + year));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        model.deleteEvent(year, month, startDate, endDate, title);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, startDate + \"/\" + month + \"/\" + year"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                + \" - \" + endDate + \"/\" + month + \"/\" + year + \" [\" + title + \"]\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof DeleteEventCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((DeleteEventCommand) other).month)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((DeleteEventCommand) other).year)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 startDate \u003d\u003d (((DeleteEventCommand) other).startDate)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 endDate \u003d\u003d (((DeleteEventCommand) other).endDate)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 title.equals(((DeleteEventCommand) other).title));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 95
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EraseCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class EraseCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"erase\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Erases specified CCA \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \" tag(s) from all persons in Hallper\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" basketball\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_ERASE_SUCCESS \u003d \"Erased %1$s from persons in Hallper\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_NOTHING_ERASED \u003d \"No persons under %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final ContactContainsTagPredicate predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e target;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private ArrayList\u003cPerson\u003e toErase;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private ArrayList\u003cPerson\u003e modifiedPersons;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private List\u003cPerson\u003e fullList;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Person temp;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public EraseCommand(List\u003cString\u003e target) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.predicate \u003d new ContactContainsTagPredicate(target);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.toErase \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.modifiedPersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.fullList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        toErase.clear();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        modifiedPersons.clear();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        fullList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : fullList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (new ContactContainsTagPredicate(target).test(p)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                toErase.add(p);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : toErase) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            tags.clear();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            for (Tag t : p.getTags()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                tags.add(t);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                for (String tag : target) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    if (t.toStringOnly().equals(tag)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        tags.remove(t);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        break;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            temp \u003d new Person(p.getName(), p.getPhone(), p.getEmail(), p.getRoom(), p.getSchool(), tags);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            modifiedPersons.add(temp);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (modifiedPersons.isEmpty()) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_NOTHING_ERASED, target));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.removeTagsFromPersons(modifiedPersons, toErase);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ERASE_SUCCESS, target));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose name contain any of \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        //this.namePredicate \u003d namePredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 3,
      "-": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImageCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ProfilePicture;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.FileChooser;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Updates the profile picture of a person to the address book."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class ImageCommand extends Command {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"image\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Uploads a profile picture to the resident of \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"the specified room.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"Parameters: ROOM \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" A123\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String CANCEL \u003d \"Cancel option chosen.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Profile picture uploaded for %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_CANCEL \u003d \"No picture was uploaded.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_NO_SUCH_PERSON \u003d \"There is no resident occupying that room.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_UPLOAD \u003d \"This resident already has that profile picture.\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private final Room number;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private List\u003cPerson\u003e fullList;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private List\u003cString\u003e roomNumber;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Creates an ImageCommand to add to the specified {@code Person}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public ImageCommand(Room value) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        number \u003d value;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        roomNumber \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        roomNumber.add(value.toString());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fullList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fullList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Person resident \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        for (Person p : fullList) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            if (new FieldsContainsKeywordsPredicate(roomNumber).test(p)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                resident \u003d p;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (resident \u003d\u003d null) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new CommandException(MESSAGE_NO_SUCH_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String toUpload \u003d FileChooser.showDialog();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (toUpload.equals(CANCEL)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            return new CommandResult(MESSAGE_CANCEL);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        EditPersonProfilePicture editPersonProfilePicture \u003d new EditPersonProfilePicture();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        editPersonProfilePicture.setProfilePicture(new ProfilePicture(toUpload));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Person editedPerson \u003d createEditedProfilePicturePerson(resident, editPersonProfilePicture);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (!resident.isSamePerson(editedPerson) \u0026\u0026 model.hasPerson(editedPerson)) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_UPLOAD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        model.updatePerson(resident, editedPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, resident));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * edited with {@code editPersonProfilePicture}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private static Person createEditedProfilePicturePerson(Person personToEdit,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                                                           EditPersonProfilePicture editPersonProfilePicture) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Name name \u003d personToEdit.getName();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Phone phone \u003d personToEdit.getPhone();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Email email \u003d personToEdit.getEmail();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Room room \u003d personToEdit.getRoom();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        School school \u003d personToEdit.getSchool();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Set\u003cTag\u003e tags \u003d personToEdit.getTags();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new Person(name, phone, email, room, school, editPersonProfilePicture.getProfilePicture(), tags);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof ImageCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 number.equals(((ImageCommand) other).number)); // state check"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Stores the {@code profilePicture} data path to edit the person with. If the field"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * value is non-empty, it will replace the {@code profilePicture} field value of the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * person."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static class EditPersonProfilePicture {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        private ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        public void setProfilePicture(ProfilePicture profilePicture) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        public ProfilePicture getProfilePicture() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            return profilePicture;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            if (!(other instanceof EditPersonProfilePicture)) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            EditPersonProfilePicture e \u003d (EditPersonProfilePicture) other;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            return getProfilePicture().equals(e.getProfilePicture());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "javenseow": 128,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImportCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import javax.xml.parsers.DocumentBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import javax.xml.parsers.DocumentBuilderFactory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import javax.xml.parsers.ParserConfigurationException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.w3c.dom.Document;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.w3c.dom.Element;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.w3c.dom.Node;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.w3c.dom.NodeList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.xml.sax.SAXException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsRoomPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Imports an XML file to update the address book."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ImportCommand extends Command {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"import\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Imports an XML file to update the address book.\\n \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"import \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            + \"f/C://Users/Documents/FILENAME.xml\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"%1$s file read and database updated.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"File not found.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_EMPTY_FILE \u003d \"File is empty\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_CONFIG_ERR \u003d \"Configuration error.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final String MESSAGE_PARSE_ERR \u003d \"Error parsing XML file.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final File file;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cPerson\u003e personList;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e roomsList;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private String cca;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Creates an ImportCommand to import the specified file."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ImportCommand(File file) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.file \u003d file;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.personList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.roomsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.cca \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Document doc \u003d parseFile();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (doc.getElementsByTagName(\"persons\").getLength() !\u003d 0) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            importContacts(doc, model);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            importCca(doc, model);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, file.getName()));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                || (other instanceof ImportCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 file.equals(((ImportCommand) other).file));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Parses XML file for reading."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Document parseFile() throws CommandException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            DocumentBuilderFactory dbFactory \u003d DocumentBuilderFactory.newInstance();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            DocumentBuilder dBuilder \u003d dbFactory.newDocumentBuilder();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            Document doc \u003d dBuilder.parse(file);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            doc.getDocumentElement().normalize();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return doc;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } catch (ParserConfigurationException e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new CommandException(MESSAGE_CONFIG_ERR);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } catch (SAXException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new CommandException(MESSAGE_PARSE_ERR);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new CommandException(MESSAGE_FILE_NOT_FOUND);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new CommandException(MESSAGE_EMPTY_FILE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Imports XML file as CCA list to update database."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param doc"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private void importCca(Document doc, Model model) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e originalList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e editedList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        NodeList nList \u003d doc.getElementsByTagName(\"CCA\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (int i \u003d 0; i \u003c nList.getLength(); i++) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            List\u003cPerson\u003e fullList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            originalList.clear();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            editedList.clear();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            roomsList.clear();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            Node node \u003d nList.item(i);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (node.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                Element element \u003d (Element) node;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                this.cca \u003d element.getAttribute(\"cca\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                NodeList nodeList \u003d element.getElementsByTagName(\"room\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                for (int j \u003d 0; j \u003c nodeList.getLength(); j++) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    roomsList.add(nodeList.item(j).getTextContent());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            ContactContainsRoomPredicate predicate \u003d new ContactContainsRoomPredicate(roomsList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            for (Person p : fullList) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                if (predicate.test(p)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    originalList.add(p);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    editedList.add(addCcaToPerson(this.cca, p));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (!originalList.isEmpty()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                model.updateMultiplePersons(originalList, editedList);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Imports XML file as contacts list to update database."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param doc"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param model"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private void importContacts(Document doc, Model model) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e fullList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        personList.clear();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        NodeList nList \u003d doc.getElementsByTagName(\"persons\");"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (int i \u003d 0; i \u003c nList.getLength(); i++) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            Node node \u003d nList.item(i);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            tags.clear();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (node.getNodeType() \u003d\u003d Node.ELEMENT_NODE) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                Element element \u003d (Element) node;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                Name name \u003d new Name(element.getElementsByTagName(\"name\").item(0).getTextContent());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                Phone phone \u003d new Phone(element.getElementsByTagName(\"phone\").item(0).getTextContent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                Email email \u003d new Email(element.getElementsByTagName(\"email\").item(0).getTextContent());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                Room room \u003d new Room(element.getElementsByTagName(\"room\").item(0).getTextContent());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                School school \u003d new School(element.getElementsByTagName(\"school\").item(0).getTextContent());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                NodeList tagged \u003d element.getElementsByTagName(\"tagged\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                if (tagged.getLength() !\u003d 0) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    for (int j \u003d 0; j \u003c tagged.getLength(); j++) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        tags.add(new Tag(tagged.item(j).getTextContent()));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                Person temp \u003d new Person(name, phone, email, room, school, tags);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                if (!fullList.contains(temp)) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    personList.add(temp);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        model.addMultiplePersons(personList);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Adds specified cca to specified person."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param cca"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @param p"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @return Edited person with updated ccas."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Person addCcaToPerson(String cca, Person p) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Set\u003cTag\u003e newTags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        newTags.addAll(p.getTags());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        newTags.add(new Tag(cca));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person editedPerson \u003d new Person(p.getName(), p.getPhone(), p.getEmail(), p.getRoom(),"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                p.getSchool(), newTags);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return editedPerson;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 201
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SearchCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose data fields match any of the argument keyword."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "// @@author javenseow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SearchCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"search\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons who are tagged with \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"any of the specified keywords (case insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"Parameters: KEYWORD\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" soccer\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private final FieldsContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public SearchCommand(FieldsContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new CommandResult("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                String.format(Messages.MESSAGE_PERSONS_LISTED_OVERVIEW, model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof SearchCommand // instance of handles null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 predicate.equals(((SearchCommand) other).predicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 6,
      "javenseow": 30,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UpdateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VICE_HEAD;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_CCAS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Budget;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Outstanding;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Spent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Update the details of a CCA."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class UpdateCommand extends Command {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"update\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Update details of an existing CCA\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Parameters: \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_TAG + \"CCA \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_HEAD + \"NAME OF HEAD \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_VICE_HEAD + \"NAME OF VICE-HEAD \\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_TAG + \"Basketball \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_HEAD + \"John \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + PREFIX_VICE_HEAD + \"Alex \\n\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_UPDATE_SUCCESS \u003d \"CCA updated: %1$s\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_NOT_UPDATED \u003d \"At least one field to be update must be provided.\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_NON_EXISTENT_CCA \u003d \"The CCA does not exist. Please create the CCA before. \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"adding its member\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CCA \u003d \"This CCA already exists in the budget book.\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_NO_SPECIFIC_CCA \u003d \"There is no CCA specified. Please use \" + PREFIX_TAG + \"to \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        + \"indicate the CCA.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final CcaName cca;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final EditCcaDescriptor editCcaDescriptor;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public UpdateCommand(CcaName ccaName, EditCcaDescriptor editCcaDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(ccaName, editCcaDescriptor);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.cca \u003d ccaName;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.editCcaDescriptor \u003d new EditCcaDescriptor(editCcaDescriptor);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CommandResult execute(Model model, CommandHistory history) throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        List\u003cCca\u003e lastShownList \u003d model.getFilteredCcaList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!model.hasCca(cca)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CommandException(MESSAGE_NON_EXISTENT_CCA);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int index \u003d 0;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (Cca c : lastShownList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (c.getCcaName().equals(cca.getCcaName())) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            index++;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Cca ccaToEdit \u003d lastShownList.get(index);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Cca editedCca \u003d createEditedCca(ccaToEdit, editCcaDescriptor);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!ccaToEdit.isSameCca(editedCca) \u0026\u0026 model.hasCca(editedCca)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_CCA);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        model.updateCca(ccaToEdit, editedCca);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        model.updateFilteredCcaList(PREDICATE_SHOW_ALL_CCAS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        model.commitBudgetBook();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_UPDATE_SUCCESS, editedCca));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates and returns a {@code Cca} with the details of {@code ccaToEdit}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * edited with {@code editCcaDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static Cca createEditedCca(Cca ccaToEdit, EditCcaDescriptor editCcaDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        assert ccaToEdit !\u003d null;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        CcaName updatedCcaName \u003d editCcaDescriptor.getCcaName().orElse(ccaToEdit.getName());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Name updatedHead \u003d editCcaDescriptor.getHead().orElse(ccaToEdit.getHead());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Name updatedViceHead \u003d editCcaDescriptor.getViceHead().orElse(ccaToEdit.getViceHead());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Budget updatedBudget \u003d editCcaDescriptor.getBudget().orElse(ccaToEdit.getBudget());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Spent updatedSpent \u003d editCcaDescriptor.getSpent().orElse(ccaToEdit.getSpent());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Outstanding updatedOutstanding \u003d editCcaDescriptor.getOutstanding().orElse(ccaToEdit.getOutstanding());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Transaction updatedTransaction \u003d editCcaDescriptor.getTransaction().orElse(ccaToEdit.getTransaction());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new Cca(updatedCcaName, updatedHead, updatedViceHead, updatedBudget, updatedSpent,"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            updatedOutstanding, updatedTransaction);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        UpdateCommand e \u003d (UpdateCommand) other;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return cca.equals(e.cca)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 editCcaDescriptor.equals(e.editCcaDescriptor);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Stores the details to edit the CCA with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * corresponding field value of the CCA."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static class EditCcaDescriptor {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private CcaName name;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private Name head;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private Name viceHead;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private Budget budget;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private Spent spent;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private Outstanding outstanding;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private Transaction transaction;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public EditCcaDescriptor() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public EditCcaDescriptor(UpdateCommand.EditCcaDescriptor toCopy) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            setCcaName(toCopy.name);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            setHead(toCopy.head);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            setViceHead(toCopy.viceHead);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            setBudget(toCopy.budget);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            setSpent(toCopy.spent);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            setOutstanding(toCopy.outstanding);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            setTransaction(toCopy.transaction);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(name, head, viceHead, budget, spent, outstanding, transaction);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void setCcaName(CcaName name) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public Optional\u003cCcaName\u003e getCcaName() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void setHead(Name head) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            this.head \u003d head;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public Optional\u003cName\u003e getHead() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.ofNullable(head);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void setViceHead(Name viceHead) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            this.viceHead \u003d viceHead;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public Optional\u003cName\u003e getViceHead() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.ofNullable(viceHead);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void setBudget(Budget budget) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            this.budget \u003d budget;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public Optional\u003cBudget\u003e getBudget() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.ofNullable(budget);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void setSpent(Spent spent) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            this.spent \u003d spent;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public Optional\u003cSpent\u003e getSpent() {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.ofNullable(spent);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void setOutstanding(Outstanding outstanding) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            this.outstanding \u003d outstanding;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public Optional\u003cOutstanding\u003e getOutstanding() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.ofNullable(outstanding);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void setTransaction(Transaction transaction) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public Optional\u003cTransaction\u003e getTransaction() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.ofNullable(transaction);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (!(other instanceof UpdateCommand.EditCcaDescriptor)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            UpdateCommand.EditCcaDescriptor e \u003d (UpdateCommand.EditCcaDescriptor) other;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return getCcaName().equals(e.getCcaName())"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u0026\u0026 getHead().equals(e.getHead())"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u0026\u0026 getViceHead().equals(e.getViceHead())"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u0026\u0026 getBudget().equals(e.getBudget())"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u0026\u0026 getSpent().equals(e.getSpent())"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u0026\u0026 getOutstanding().equals(e.getOutstanding())"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u0026\u0026 getTransaction().equals(e.getTransaction());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 255
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddAllDayEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.AddAllDayEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Parses input arguments and creates a new AddAllDayEventCommand object."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class AddAllDayEventCommandParser implements Parser\u003cAddAllDayEventCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddAllDayEventCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * and returns an AddAllDayEventCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public AddAllDayEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR, PREFIX_DATE, PREFIX_TITLE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR, PREFIX_DATE, PREFIX_TITLE)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddAllDayEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int date \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_DATE).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new AddAllDayEventCommand(month, year, date, title);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_HOUR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_MIN;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_HOUR;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_MIN;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Parses input arguments and creates a new AddEventCommand object."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class AddEventCommandParser implements Parser\u003cAddEventCommand\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddEventCommand"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * and returns an AddEventCommand object for execution."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public AddEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR, PREFIX_START_DATE, PREFIX_START_HOUR,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                        PREFIX_START_MIN, PREFIX_END_DATE, PREFIX_END_HOUR, PREFIX_END_MIN, PREFIX_TITLE);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR, PREFIX_START_DATE, PREFIX_START_HOUR,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                PREFIX_START_MIN, PREFIX_END_DATE, PREFIX_END_HOUR, PREFIX_END_MIN, PREFIX_TITLE)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int startHour \u003d ParserUtil.parseHour(argMultimap.getValue(PREFIX_START_HOUR).get());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int startMin \u003d ParserUtil.parseMinute(argMultimap.getValue(PREFIX_START_MIN).get());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int endHour \u003d ParserUtil.parseHour(argMultimap.getValue(PREFIX_END_HOUR).get());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int endMin \u003d ParserUtil.parseMinute(argMultimap.getValue(PREFIX_END_MIN).get());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new AddEventCommand(month, year, startDate, startHour, startMin, endDate, endHour, endMin, title);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.AddAllDayEventCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.AddEventCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ComposeCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CreateCalendarCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.CreateCcaCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.EraseCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImageCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new ClearCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        case EraseCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new EraseCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ImageCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ImageCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        case SearchCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SearchCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        case BudgetCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return new BudgetCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case ComposeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ComposeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case CreateCalendarCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CreateCalendarCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        case CreateCcaCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return new CreateCcaCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        case UpdateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return new UpdateCommandPaser().parse(arguments);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        case ImportCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return new ImportCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        case AddAllDayEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return new AddAllDayEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        case AddEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return new AddEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        case DeleteEventCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return new DeleteEventCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 8,
      "ericyjw": 12,
      "-": 108,
      "GilgameshTC": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/BudgetCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.BudgetCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.TagContainsKeywordPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Parses input arguments and creates a new BudgetCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetCommandParser implements Parser\u003cBudgetCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the BudgetCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * and returns a BudgetCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, BudgetCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        String[] tagKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new BudgetCommand(new TagContainsKeywordPredicate(Arrays.asList(tagKeywords)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ClearCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ClearCommandParser implements Parser\u003cClearCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Parses the given {@code String} argument in the context of the ClearCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * and returns an ClearCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ClearCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ClearCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new ClearCommand(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ROOM \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SCHOOL \u003d new Prefix(\"s/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_NULL \u003d new Prefix(null);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_FROM \u003d new Prefix(\"from/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TO \u003d new Prefix(\"to/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SUBJECT \u003d new Prefix(\"subject/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_CONTENT \u003d new Prefix(\"content/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MONTH \u003d new Prefix(\"month/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_YEAR \u003d new Prefix(\"year/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static final Prefix PREFIX_FILE \u003d new Prefix(\"f/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_DATE \u003d new Prefix(\"date/\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_START_DATE \u003d new Prefix(\"sdate/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_START_HOUR \u003d new Prefix(\"shour/\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_START_MIN \u003d new Prefix(\"smin/\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_END_DATE \u003d new Prefix(\"edate/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_END_HOUR \u003d new Prefix(\"ehour/\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_END_MIN \u003d new Prefix(\"emin/\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final Prefix PREFIX_TITLE \u003d new Prefix(\"title/\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_HEAD \u003d new Prefix(\"h/\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_VICE_HEAD \u003d new Prefix(\"vh/\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_BUDGET \u003d new Prefix(\"bud/\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_SPENT \u003d new Prefix(\"spt/\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_OUTSTANDING \u003d new Prefix(\"out/\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final Prefix PREFIX_TRANSACTION \u003d new Prefix(\"trans/\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "ericyjw": 8,
      "-": 22,
      "GilgameshTC": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ComposeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FROM;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import org.simplejavamail.email.EmailBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import seedu.address.logic.commands.ComposeCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class ComposeCommandParser implements Parser\u003cComposeCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ComposeCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * and returns an ComposeCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public ComposeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FROM, PREFIX_TO, PREFIX_SUBJECT, PREFIX_CONTENT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FROM, PREFIX_TO, PREFIX_SUBJECT, PREFIX_CONTENT)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ComposeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String from \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_FROM).get()).toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String to \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_TO).get()).toString();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String subject \u003d ParserUtil.parseSubject(argMultimap.getValue(PREFIX_SUBJECT).get()).toString();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String content \u003d ParserUtil.parseContent(argMultimap.getValue(PREFIX_CONTENT).get()).toString();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Email email \u003d EmailBuilder.startingBlank()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .from(from)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .to(to)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .withSubject(subject)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .withHTMLText(content)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .buildEmail();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new ComposeCommand(email);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateCalendarCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CreateCalendarCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Parses input arguments and creates a new CreateCalendarCommand object."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CreateCalendarCommandParser implements Parser\u003cCreateCalendarCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCalendarCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * and returns an CreateCalendarCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CreateCalendarCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCalendarCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CreateCalendarCommand(month, year);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "GilgameshTC": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CreateCcaCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.CreateCcaCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Budget;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Parses input arguments and creates a new CreateCcaCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CreateCcaCommandParser implements Parser\u003cCreateCcaCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the CreateCcaCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * and returns a CreateCcaCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CreateCcaCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_BUDGET);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_BUDGET)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, CreateCcaCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        CcaName name \u003d ParserUtil.parseCcaName(argMultimap.getValue(PREFIX_NAME).get());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Budget budget \u003d ParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Cca cca \u003d new Cca(name, budget);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new CreateCcaCommand(cca);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 53
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteEventCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_END_DATE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONTH;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_START_DATE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TITLE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_YEAR;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.commands.DeleteEventCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Parses input arguments and creates a new DeleteEventCommand object."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class DeleteEventCommandParser implements Parser\u003cDeleteEventCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteEventCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * and returns an DeleteEventCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public DeleteEventCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MONTH, PREFIX_YEAR, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                        PREFIX_END_DATE, PREFIX_TITLE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MONTH, PREFIX_YEAR, PREFIX_START_DATE,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                PREFIX_END_DATE, PREFIX_TITLE)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteEventCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Month month \u003d ParserUtil.parseMonth(argMultimap.getValue(PREFIX_MONTH).get());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Year year \u003d ParserUtil.parseYear(argMultimap.getValue(PREFIX_YEAR).get());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int startDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_START_DATE).get());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int endDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_END_DATE).get());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String title \u003d ParserUtil.parseTitle(argMultimap.getValue(PREFIX_TITLE).get());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new DeleteEventCommand(month, year, startDate, endDate, title);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "GilgameshTC": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EraseCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.EraseCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Parses input arguments and creates a new ClearCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class EraseCommandParser implements Parser\u003cEraseCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Parses the given {@code String} argument in the context of the EraseCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * and returns an EraseCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public EraseCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, EraseCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new EraseCommand(Arrays.asList(nameKeywords));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 33
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(nameKeywords);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new FindCommand(new NameContainsKeywordsPredicate(keywords));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 4,
      "-": 32
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImageCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ImageCommand;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new ImageCommand object."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class ImageCommandParser implements Parser\u003cImageCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImageCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * and returns an ImageCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public ImageCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImageCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Room room \u003d ParserUtil.parseRoom(trimmedArgs);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new ImageCommand(room);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 19,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ImportCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_FILE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Parses input arguments and creates a new ImportCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ImportCommandParser implements Parser\u003cImportCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the ImportCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * and returns an ImportCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ImportCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_FILE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_FILE) || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, ImportCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        File file \u003d ParserUtil.parseFile(argMultimap.getValue(PREFIX_FILE).get());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new ImportCommand(file);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.commands.ImportCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Budget;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Outstanding;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Spent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Content;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_DATE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Date must be a non-negative integer and not greater than 31.\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_HOUR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Hour must be a non-negative integer and not greater than 23.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_MINUTE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Minute must be a non-negative integer and not greater than 59\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_TITLE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Title must not be empty\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws ParseException {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws ParseException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws ParseException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws ParseException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String room} into a {@code Room}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code room} is invalid."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author javenseow"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static Room parseRoom(String room) throws ParseException {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String trimmedRoom \u003d room.trim();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (!Room.isValidRoom(trimmedRoom)) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new ParseException(Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new Room(trimmedRoom);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Parses a {@code String school} into a {@code School}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @throws ParseException if the given {@code school} is invalid."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static School parseSchool(String school) throws ParseException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String trimmedSchool \u003d school.trim();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (!School.isValidSchool(trimmedSchool)) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new ParseException(School.MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new School(trimmedSchool);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws ParseException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws ParseException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws ParseException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //@@author kengwoon"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Parses a {@code String file} into a {@code File}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * @throws ParseException if the given {@code file} is invalid."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public static File parseFile(String file) throws ParseException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(file);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String trimmedFile \u003d file.trim();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (!trimmedFile.contains(\".xml\")) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new ParseException(ImportCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return new File(trimmedFile);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Parses a {@code String content} into an {@code Content}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws ParseException if the given {@code content} is invalid."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static Content parseContent(String content) throws ParseException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String trimmedContent \u003d content.trim();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        if (!Content.isValidContent(trimmedContent)) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            throw new ParseException(Content.MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new Content(trimmedContent);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Parses a {@code String subject} into an {@code Subject}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws ParseException if the given {@code subject} is invalid."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static Subject parseSubject(String subject) throws ParseException {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String trimmedSubject \u003d subject.trim();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        if (!Subject.isValidSubject(trimmedSubject)) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            throw new ParseException(Subject.MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return new Subject(trimmedSubject);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String month} into a {@code Month}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code month} is invalid."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Month parseMonth(String month) throws ParseException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedMonth \u003d month.trim();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Transform month to upper case"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        trimmedMonth \u003d trimmedMonth.toUpperCase();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Month.isValidMonthRegex(trimmedMonth) || !Month.isValidMonth(trimmedMonth)) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Month.MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Month(trimmedMonth);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String year} into a {@code Year}."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code year} is invalid."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Year parseYear(String year) throws ParseException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedYear \u003d year.trim();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Year.isValidYear(trimmedYear)) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Year.MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Year(trimmedYear);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String Budget} into a {@code Budget}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code budget} is invalid."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Budget parseBudget(String budget) throws ParseException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(budget);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedBudget \u003d budget.trim();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Budget.isValidBudget(trimmedBudget)) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Budget.MESSAGE_BUDGET_CONSTRAINTS);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Budget(Integer.parseInt(trimmedBudget));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String ccaName} into a {@code CcaName}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code ccaName} is invalid."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static CcaName parseCcaName(String ccaName) throws ParseException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(ccaName);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedCcaName \u003d ccaName.trim();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!CcaName.isValidCcaName(trimmedCcaName)) {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(CcaName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new CcaName(trimmedCcaName);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String Spent} into a {@code Spent}."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code Spent} is invalid."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Spent parseSpent(String spent) throws ParseException {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(spent);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedSpent \u003d spent.trim();"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Spent.isValidSpent(trimmedSpent)) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Spent.MESSAGE_SPENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Spent(Integer.parseInt(trimmedSpent));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String outstanding} into a {@code Outstanding}."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code Outstanding} is invalid."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Outstanding parseOutstanding(String outstanding) throws ParseException {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(outstanding);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedOutstanding \u003d outstanding.trim();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Outstanding.isValidOutstanding(trimmedOutstanding)) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Outstanding.MESSAGE_OUTSTANDING_CONSTRAINTS);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Outstanding(Integer.parseInt(trimmedOutstanding));"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String transaction} into a {@code Transaction}."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code Transaction} is invalid."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static Transaction parseTransaction(String transaction) throws ParseException {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(transaction);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedTransaction \u003d transaction.trim();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!Transaction.isValidTranscation(trimmedTransaction)) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(Transaction.MESSAGE_TRANSACTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return new Transaction(trimmedTransaction);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String date} into a {@code int}."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static int parseDate(String date) throws ParseException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int dateInt \u003d Integer.parseInt(trimmedDate);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (dateInt \u003c 0 || dateInt \u003e 31) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(MESSAGE_DATE_CONSTRAINTS);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dateInt;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String hour} into a {@code int}."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code hour} is invalid."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static int parseHour(String hour) throws ParseException {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(hour);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedHour \u003d hour.trim();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int hourInt \u003d Integer.parseInt(trimmedHour);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (hourInt \u003c 0 || hourInt \u003e 23) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(MESSAGE_HOUR_CONSTRAINTS);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return hourInt;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String minute} into a {@code int}."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code minute} is invalid."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static int parseMinute(String minute) throws ParseException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(minute);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedMinute \u003d minute.trim();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int minuteInt \u003d Integer.parseInt(trimmedMinute);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (minuteInt \u003c 0 || minuteInt \u003e 59) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(MESSAGE_MINUTE_CONSTRAINTS);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return minuteInt;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Parses a {@code String title} making sure it\u0027s not empty."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws ParseException if the given {@code title} is invalid."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static String parseTitle(String title) throws ParseException {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(title);"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String trimmedTitle \u003d title.trim();"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (trimmedTitle.isEmpty()) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new ParseException(MESSAGE_TITLE_CONSTRAINTS);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return trimmedTitle;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 18,
      "EatOrBeEaten": 31,
      "javenseow": 25,
      "ericyjw": 5,
      "-": 136,
      "GilgameshTC": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SearchCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new SearchCommand object."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SearchCommandParser implements Parser\u003cSearchCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the SearchCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * and returns a SearchCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public SearchCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new SearchCommand(new FieldsContainsKeywordsPredicate(Arrays.asList(nameKeywords)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 20,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/UpdateCommandPaser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BUDGET;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_HEAD;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OUTSTANDING;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SPENT;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TRANSACTION;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_VICE_HEAD;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.commands.UpdateCommand.EditCcaDescriptor;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Parses input arguments and creates a new UpdateCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class UpdateCommandPaser implements Parser\u003cUpdateCommand\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the UpdateCommand"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * and returns an UpdateCommand object for execution."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public UpdateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            ArgumentTokenizer.tokenize(args, PREFIX_TAG, PREFIX_NAME, PREFIX_HEAD, PREFIX_VICE_HEAD, PREFIX_BUDGET,"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                PREFIX_SPENT, PREFIX_OUTSTANDING, PREFIX_TRANSACTION);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!argMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NO_SPECIFIC_CCA);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        CcaName ccaName \u003d ParserUtil.parseCcaName((argMultimap.getValue(PREFIX_TAG).get()));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        EditCcaDescriptor editCcaDescriptor \u003d new EditCcaDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            editCcaDescriptor.setCcaName(ParserUtil.parseCcaName((argMultimap.getValue(PREFIX_NAME).get())));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_HEAD).isPresent()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            editCcaDescriptor.setHead(ParserUtil.parseName(argMultimap.getValue(PREFIX_HEAD).get()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_VICE_HEAD).isPresent()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            editCcaDescriptor.setViceHead(ParserUtil.parseName(argMultimap.getValue(PREFIX_VICE_HEAD).get()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_BUDGET).isPresent()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            editCcaDescriptor.setBudget(ParserUtil.parseBudget(argMultimap.getValue(PREFIX_BUDGET).get()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_SPENT).isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            editCcaDescriptor.setSpent(ParserUtil.parseSpent(argMultimap.getValue(PREFIX_SPENT).get()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_OUTSTANDING).isPresent()) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            editCcaDescriptor.setOutstanding("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                ParserUtil.parseOutstanding(argMultimap.getValue(PREFIX_OUTSTANDING).get())"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (argMultimap.getValue(PREFIX_TRANSACTION).isPresent()) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            editCcaDescriptor.setTransaction("
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                ParserUtil.parseTransaction(argMultimap.getValue(PREFIX_TRANSACTION).get())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            );"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!editCcaDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new ParseException(UpdateCommand.MESSAGE_NOT_UPDATED);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new UpdateCommand(ccaName, editCcaDescriptor);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .isSamePerson comparison)"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public AddressBook() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons in the {@code toBeCopied}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the contents of the person list with {@code persons}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code persons} must not contain duplicate persons."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.contains(person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must not already exist in the address book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(p);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code key} must exist in the address book."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void removePerson(Person key) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.remove(key);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList().size() + \" persons\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 persons.equals(((AddressBook) other).persons));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.hashCode();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 111
    }
  },
  {
    "path": "src/main/java/seedu/address/model/BudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.UniqueCcaList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Wraps all budget data at the budget-book level"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Duplicates in CCA tags are not allowed (by .isSameCCA comparison)"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetBook implements ReadOnlyBudgetBook {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final UniqueCcaList ccas;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas \u003d new UniqueCcaList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBook() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates a Budget Book using the CCAs in the {@code toBeCopied}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBook(ReadOnlyBudgetBook toBeCopied) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Resets the existing data of this {@code BudgetBook} with {@code newData}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void resetData(ReadOnlyBudgetBook newData) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        setCcas(newData.getCcaList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the contents of the CCA list with {@code CCAs}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code CCAs} must not contain duplicate CCAs."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCcas(List\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.ccas.setCcas(ccas);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    //// CCA-level operations"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a CCA {@code tag} exists in the Budget Book."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean hasCca(Person person) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d person.getTags();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (Tag tag : tagSet) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            String ccaName \u003d tag.tagName;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (ccas.contains(ccaName)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Return true is a CCA name exists in the Budget Book"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean hasCca(CcaName ccaName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(ccaName);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.contains(ccaName.toString());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a CCA {@code tag} exists in the Budget Book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean hasCca(Cca cca) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(cca);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.contains(cca);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Adds a CCA to the Budget Book."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA must not already exist in the Budget Book."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void addCca(Cca cca) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.add(cca);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the given CCA {@code target} in the list with {@code editedCca}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code target} must exist in the Budget Book."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA {@code editedCCA} must not be the same as another existing CCA in the Budget Book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void updateCca(Cca target, Cca editedCca) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(editedCca);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.setCca(target, editedCca);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Removes {@code cca} from this {@code BudgetBook}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code cca} must exist in the Budget book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void removeCca(Cca key) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.remove(key);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.asUnmodifiableObservableList().size() + \" CCAs\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cCca\u003e getCcaList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.asUnmodifiableObservableList();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof BudgetBook // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 ccas.equals(((BudgetBook) other).ccas));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/model/CalendarModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.data.ParserException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.Component;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.ComponentList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.DateTime;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.TimeZone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.TimeZoneRegistry;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.TimeZoneRegistryFactory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.component.CalendarComponent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.component.VEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.component.VTimeZone;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.CalScale;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.property.DtEnd;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.model.property.DtStart;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.ProdId;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.property.Version;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.util.FixedUidGenerator;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.util.UidGenerator;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Wraps Calendar Data"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class CalendarModel {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // Field to store calendar loaded by user if any."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // User can only load at most one calendar at any point of time."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Calendar loadedCalendar;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private VEvent eventToBeRemoved;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cMonth, Integer\u003e monthToConstantMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public CalendarModel(CalendarStorage calendarStorage, Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.existingCalendar \u003d existingCalendar;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.loadedCalendar \u003d null;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.eventToBeRemoved \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.monthToConstantMap \u003d initializeMonthToStringMap();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Provide a mapping between Month objects and java.util.Calendar int constants. */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cMonth, Integer\u003e initializeMonthToStringMap() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        HashMap\u003cMonth, Integer\u003e map \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"JAN\"), java.util.Calendar.JANUARY);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"FEB\"), java.util.Calendar.FEBRUARY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"MAR\"), java.util.Calendar.MARCH);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"APR\"), java.util.Calendar.APRIL);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"MAY\"), java.util.Calendar.MAY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"JUN\"), java.util.Calendar.JUNE);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"JUL\"), java.util.Calendar.JULY);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"AUG\"), java.util.Calendar.AUGUST);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"SEP\"), java.util.Calendar.SEPTEMBER);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"OCT\"), java.util.Calendar.OCTOBER);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"NOV\"), java.util.Calendar.NOVEMBER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        map.put(new Month(\"DEC\"), java.util.Calendar.DECEMBER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return map;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Checks if calendar to be created already exists. */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Set\u003cMonth\u003e yearExists \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (yearExists !\u003d null) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            for (Month existingMonths : yearExists) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                if (month.equals(existingMonths)) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Checks if date is valid in a particular month. */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isValidDate(Year year, Month month, int date) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar cal \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.YEAR, Integer.parseInt(year.toString()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.MONTH, monthToConstantMap.get(month));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int maximumDate \u003d cal.getActualMaximum(java.util.Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return (date \u003c\u003d maximumDate) \u0026\u0026 date \u003e 0;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Checks if the hours and minutes are valid. */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isValidTime(int hour, int minute) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return (hour \u003e\u003d 0) \u0026\u0026 (hour \u003c 24) \u0026\u0026 (minute \u003e\u003d 0) \u0026\u0026 (minute \u003c 60);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Checks if it is a valid time frame (end date not earlier than start date)."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Assumes that date, hour and minutes are valid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isValidTimeFrame(int startDate, int startHour, int startMinute,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                                    int endDate, int endHour, int endMinute) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (startDate \u003c endDate) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return startDate \u003d\u003d endDate \u0026\u0026 startHour \u003c\u003d endHour \u0026\u0026 startMinute \u003c\u003d endMinute;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Setter method for loadedCalendar field. */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private void setLoadedCalendar(Calendar calendar) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.loadedCalendar \u003d calendar;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Creates the calendar file. */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Year year, Month month) throws IOException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Initialize the calendar"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String calendarName \u003d month + \"-\" + year;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Calendar calendar \u003d new Calendar();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(new ProdId(\"-//Ben Fortuna//iCal4j 1.0//EN\"));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(Version.VERSION_2_0);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getProperties().add(CalScale.GREGORIAN);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Dummy Event"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar cal \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.MONTH, java.util.Calendar.DECEMBER);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        cal.set(java.util.Calendar.DAY_OF_MONTH, 25);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Initialise as an all day event"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VEvent christmas \u003d new VEvent(new net.fortuna.ical4j.model.Date(cal.getTime()), \"Christmas Day\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Generate a UID for the event"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        UidGenerator ug \u003d new FixedUidGenerator(\"1\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        christmas.getProperties().add(ug.generateUid());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendar.getComponents().add(christmas);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Create the calendar"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(calendar, calendarName);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Update existing calendar map"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Set\u003cMonth\u003e yearOfCal \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (yearOfCal \u003d\u003d null) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            Set\u003cMonth\u003e newYearOfCal \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            newYearOfCal.add(month);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            existingCalendar.put(year, newYearOfCal);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            yearOfCal.add(month);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Load and parse the requested calendar file. */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void loadCalendar(Year year, Month month) throws IOException, ParserException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String calendarName \u003d month + \"-\" + year;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Calendar calendarToBeLoaded \u003d calendarStorage.loadCalendar(calendarName);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        setLoadedCalendar(calendarToBeLoaded);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Creates a new all day event in the loaded Calendar. */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createAllDayEvent(Year year, Month month, int date, String title) throws IOException, ParserException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Load the calendar"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        loadCalendar(year, month);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Create a TimeZone"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        TimeZoneRegistry registry \u003d TimeZoneRegistryFactory.getInstance().createRegistry();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        TimeZone timezone \u003d registry.getTimeZone(\"Asia/Singapore\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VTimeZone tz \u003d timezone.getVTimeZone();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Start Date"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar sDate \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.setTimeZone(timezone);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.YEAR, Integer.parseInt(year.toString()));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.MONTH, monthToConstantMap.get(month));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.DAY_OF_MONTH, date);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.HOUR_OF_DAY, 0);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.MINUTE, 0);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // End Date"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar eDate \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.setTimeZone(timezone);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.YEAR, Integer.parseInt(year.toString()));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.MONTH, monthToConstantMap.get(month));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.DAY_OF_MONTH, date);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.HOUR_OF_DAY, 23);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.MINUTE, 59);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.SECOND, 59);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Create the event"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        DateTime start \u003d new DateTime(sDate.getTime());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        DateTime end \u003d new DateTime(eDate.getTime());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VEvent newEvent \u003d new VEvent(start, end, title);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Add timezone info"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        newEvent.getProperties().add(tz.getTimeZoneId());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Generate a UID for the event"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        UidGenerator ug \u003d new FixedUidGenerator(\"1\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        newEvent.getProperties().add(ug.generateUid());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        loadedCalendar.getComponents().add(newEvent);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String calendarName \u003d month + \"-\" + year;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Save the updated calendar to storage"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(loadedCalendar, calendarName);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Creates an event in the loaded Calendar with the specified time frame. */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createEvent(Year year, Month month, int startDate, int startHour, int startMin,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                            int endDate, int endHour, int endMin, String title) throws IOException, ParserException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Load the calendar"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        loadCalendar(year, month);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Create a TimeZone"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        TimeZoneRegistry registry \u003d TimeZoneRegistryFactory.getInstance().createRegistry();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        TimeZone timezone \u003d registry.getTimeZone(\"Asia/Singapore\");"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VTimeZone tz \u003d timezone.getVTimeZone();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Start Date"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar sDate \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.setTimeZone(timezone);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.YEAR, Integer.parseInt(year.toString()));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.MONTH, monthToConstantMap.get(month));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.DAY_OF_MONTH, startDate);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.HOUR_OF_DAY, startHour);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.MINUTE, startMin);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sDate.set(java.util.Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // End Date"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar eDate \u003d new GregorianCalendar();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.setTimeZone(timezone);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.YEAR, Integer.parseInt(year.toString()));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.MONTH, monthToConstantMap.get(month));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.DAY_OF_MONTH, endDate);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.HOUR_OF_DAY, endHour);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.MINUTE, endMin);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eDate.set(java.util.Calendar.SECOND, 0);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Create the event"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        DateTime start \u003d new DateTime(sDate.getTime());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        DateTime end \u003d new DateTime(eDate.getTime());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VEvent newEvent \u003d new VEvent(start, end, title);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Add timezone info"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        newEvent.getProperties().add(tz.getTimeZoneId());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Generate a UID for the event"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        UidGenerator ug \u003d new FixedUidGenerator(\"1\");"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        newEvent.getProperties().add(ug.generateUid());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        loadedCalendar.getComponents().add(newEvent);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String calendarName \u003d month + \"-\" + year;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Save the updated calendar to storage"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(loadedCalendar, calendarName);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Checks if an event exists in the loaded Calendar and returns the event."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Private method that should only be called by deleteEvent."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private VEvent retrieveEvent(int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        ComponentList\u003cCalendarComponent\u003e events \u003d loadedCalendar.getComponents(Component.VEVENT);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        VEvent eventToReturn \u003d null;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (CalendarComponent event : events) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            VEvent vevent \u003d (VEvent) event;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            if (isSameEvent(startDate, endDate, title, vevent)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                eventToReturn \u003d vevent;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return eventToReturn;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * An event is considered the same in terms of its title and start - end date."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private boolean isSameEvent(int startDate, int endDate, String title, VEvent event) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        boolean result;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Parse title from the event to check"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String titleToCheck \u003d event.getSummary().getValue();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Check if title is the same"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        result \u003d title.compareTo(titleToCheck) \u003d\u003d 0;"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Parse start date information from the event to check"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        DtStart dtStart \u003d event.getStartDate();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Date sDate \u003d dtStart.getDate();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar sCal \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        sCal.setTime(sDate);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int startDateToCheck \u003d sCal.get(java.util.Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        result \u003d result \u0026\u0026 (startDate \u003d\u003d startDateToCheck);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Parse end date information from the event to check"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        DtEnd dtEnd \u003d event.getEndDate();"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Date eDate \u003d dtEnd.getDate();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        java.util.Calendar eCal \u003d java.util.Calendar.getInstance();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        eCal.setTime(eDate);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int endDateToCheck \u003d eCal.get(java.util.Calendar.DAY_OF_MONTH);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return result \u0026\u0026 (endDate \u003d\u003d endDateToCheck);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Checks if this specific event exists in the loaded Calendar. */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingEvent(Year year, Month month, int startDate, int endDate, String title) throws IOException,"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            ParserException {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Load the calendar"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        loadCalendar(year, month);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Store the event into private field eventToBeRemoved"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.eventToBeRemoved \u003d retrieveEvent(startDate, endDate, title);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return isExistingEvent(this.eventToBeRemoved);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Checks if this specific event exists in the loaded Calendar. */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private boolean isExistingEvent(VEvent event) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return event !\u003d null;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Deletes an event in the loaded Calendar."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * A call to the public isExistingEvent method has to precede this method call."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void deleteEvent(Year year, Month month) throws IOException {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (isExistingEvent(this.eventToBeRemoved)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            loadedCalendar.getComponents().remove(this.eventToBeRemoved);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String calendarName \u003d month + \"-\" + year;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // Save the updated calendar to storage"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(loadedCalendar, calendarName);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Returns the updated Map: existingCalendar. */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Map\u003cYear, Set\u003cMonth\u003e\u003e updateExistingCalendar() {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return existingCalendar;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /** Returns the number of calendar in hard disk. */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        int size \u003d 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (Year year : existingCalendar.keySet()) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            Set\u003cMonth\u003e monthsOfYear \u003d existingCalendar.get(year);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            if (monthsOfYear !\u003d null) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                size +\u003d monthsOfYear.size();"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return size;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!(other instanceof CalendarModel)) { //this handles null as well."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        CalendarModel o \u003d (CalendarModel) other;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarStorage.equals(o.calendarStorage)"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 existingCalendar.equals(o.existingCalendar);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Objects.hash(calendarStorage, existingCalendar);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 19,
      "GilgameshTC": 360
    }
  },
  {
    "path": "src/main/java/seedu/address/model/EmailModel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Recipient;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Wraps Email data."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class EmailModel {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private String preview;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private final String previewHeader \u003d \"\u003cu\u003eEmail Preview\u003c/u\u003e\u003cbr /\u003e\u003cbr /\u003e\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Saves email to EmailModel."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param email The email to be saved."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(Email email) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        savePreview();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Creates preview of email in EmailModel."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private void savePreview() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String from \u003d \"From: \" + email.getFromRecipient().getAddress();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Iterator\u003cRecipient\u003e itr \u003d email.getRecipients().iterator();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String to \u003d \"To: \" + itr.next().getAddress();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String subject \u003d \"Subject: \" + email.getSubject();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        while (itr.hasNext()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            to \u003d to + \", \" + itr.next().getAddress();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        preview \u003d previewHeader + from + \"\u003cbr /\u003e\" + to + \"\u003cbr /\u003e\" + subject + \"\u003cbr /\u003e\u003cbr /\u003e\" + email.getHTMLText();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String getPreview() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return preview;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 42,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code Predicate} that always evaluate to true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Predicate\u003cCca\u003e PREDICATE_SHOW_ALL_CCAS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Clears existing backing model and replaces with the provided new data."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the AddressBook"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Returns the BudgetBook"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    ReadOnlyBudgetBook getBudgetBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a person with the same identity as {@code person} exists in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean hasPerson(Person person);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a CCA with the same CCA name as {@code Cca} exists in the budget book."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    boolean hasCca(CcaName ccaName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a CCA with the same identity as {@code cca} exists in the budget book."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    boolean hasCca(Cca cca);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a person\u0027s CCA tag has the same name as the {@code cca} that exists in the budget book."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    boolean hasCca(Person toAdd);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the given person."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person must exist in the address book."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Clears the given persons."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * The persons must exist in the address book."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void clearMultiplePersons(List\u003cPerson\u003e target);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Removes tag(s) from given persons."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * The persons must exist in the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void removeTagsFromPersons(List\u003cPerson\u003e target, List\u003cPerson\u003e original);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the given person."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code person} must not already exist in the address book."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Adds the given CCa."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code cca} must not already exist in the budget book."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void addCca(Cca cca);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Adds the given persons in list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * {@code personList} must not contain persons already exist in the address book."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void addMultiplePersons(List\u003cPerson\u003e personList);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void updateCca(Cca target, Cca editedCca);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Replaces the given persons {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * {@code target} must exist in the address book."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * The person identity of {@code editedPerson} must not be the same as another existing person in the address book."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void updateMultiplePersons(List\u003cPerson\u003e target, List\u003cPerson\u003e editedPerson);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns an unmodifiable view of the filtered person list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Updates the filter of the filtered cca list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void updateFilteredCcaList(Predicate\u003cCca\u003e predicate);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has previous address book states to restore."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canUndoAddressBook();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model has undone address book states to restore."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean canRedoAddressBook();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previous state."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    void undoAddressBook();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Restores the model\u0027s address book to its previously undone state."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    void redoAddressBook();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current address book state for undo/redo."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    void commitAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves the current budget book state for undo/redo."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void commitBudgetBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns an unmodifiable view of the filtered CCA list"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    ObservableList\u003cCca\u003e getFilteredCcaList();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the email to the email model"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveEmail(Email email);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the model already has a calendar with the same month and year"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    boolean isExistingCalendar(Year year, Month month);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if the date is valid in that particular month, year."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    boolean isValidDate(Year year, Month month, int date);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if the hours and minutes are valid."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    boolean isValidTime(int hour, int minute);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if the start date is earlier than the end date."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    boolean isValidTimeFrame(int startDate, int startHour, int startMinute, int endDate, int endHour, int endMinute);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the given calendar"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code year} and {@code month} must not already be an existing calendar"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    void createCalendar(Year year, Month month);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Load and parse the requested Calendar from storage."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * {@code year} and {@code month} must already be an existing calendar"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void loadCalendar(Year year, Month month);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Creates a new all day event in the monthly calendar specified."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createAllDayEvent(Year year, Month month, int date, String title);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Creates an event in the monthly Calendar with the specified time frame."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createEvent(Year year, Month month, int startDate, int startHour, int startMin,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                     int endDate, int endHour, int endMin, String title);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Checks if this specific event exists in the monthly calendar."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    boolean isExistingEvent(Year year, Month month, int startDate, int endDate, String title);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Deletes an event in the monthly Calendar."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void deleteEvent(Year year, Month month, int startDate, int endDate, String title);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the existing calendar map inside UserPrefs Json file"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateExistingCalendar();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 31,
      "ericyjw": 68,
      "-": 103,
      "GilgameshTC": 42
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.data.ParserException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.commons.events.model.AllDayEventAddedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.model.BudgetBookChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.CalendarCreatedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.commons.events.model.CalendarEventAddedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.commons.events.model.CalendarEventDeletedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EmailSavedEvent;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.CalendarStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.IcsCalendarStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final VersionedAddressBook versionedAddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final VersionedBudgetBook versionedBudgetBook;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final FilteredList\u003cCca\u003e filteredCcas;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EmailModel emailModel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UserPrefs userPrefs;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CalendarModel calendarModel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, budgetBook, userPrefs and calendarStorage."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyBudgetBook budgetBook, UserPrefs userPrefs,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        CalendarStorage calendarStorage) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs, calendarStorage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" , user prefs \" + userPrefs"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \" and calendar: \" + calendarStorage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook \u003d new VersionedBudgetBook(budgetBook);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredCcas \u003d new FilteredList\u003c\u003e(versionedBudgetBook.getCcaList());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailModel \u003d new EmailModel();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook, budgetBook and userPrefs."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, ReadOnlyBudgetBook budgetBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook \u003d new VersionedBudgetBook(budgetBook);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        filteredCcas \u003d new FilteredList\u003c\u003e(versionedBudgetBook.getCcaList());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailModel \u003d new EmailModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        CalendarStorage calendarStorage \u003d new IcsCalendarStorage(userPrefs.getCalendarPath());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this(new AddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ModelManager(AddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook \u003d new VersionedAddressBook(addressBook);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(versionedAddressBook.getPersonList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook \u003d new VersionedBudgetBook(new BudgetBook());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredCcas \u003d new FilteredList\u003c\u003e(versionedBudgetBook.getCcaList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        emailModel \u003d new EmailModel();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.userPrefs \u003d userPrefs;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        CalendarStorage calendarStorage \u003d new IcsCalendarStorage(userPrefs.getCalendarPath());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.calendarModel \u003d new CalendarModel(calendarStorage, userPrefs.getExistingCalendar());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.resetData(newData);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ReadOnlyBudgetBook getBudgetBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return versionedBudgetBook;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(versionedAddressBook));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void indicateBudgetBookChanged() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        raise(new BudgetBookChangedEvent(versionedBudgetBook));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.hasPerson(person);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean hasCca(Person person) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return versionedBudgetBook.hasCca(person);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean hasCca(CcaName ccaName) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(ccaName);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return versionedBudgetBook.hasCca(ccaName);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean hasCca(Cca cca) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(cca);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return versionedBudgetBook.hasCca(cca);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        versionedAddressBook.removePerson(target);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //@@author kengwoon"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void clearMultiplePersons(List\u003cPerson\u003e target) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : target) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            deletePerson(p);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //@@author kengwoon"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void removeTagsFromPersons(List\u003cPerson\u003e target, List\u003cPerson\u003e original) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (int i \u003d 0; i \u003c target.size(); i++) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            updatePerson(original.get(i), target.get(i));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void addPerson(Person person) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.addPerson(person);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //@@author kengwoon"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void addMultiplePersons(List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : personList) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            addPerson(p);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void addCca(Cca cca) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook.addCca(cca);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        updateFilteredCcaList(PREDICATE_SHOW_ALL_CCAS);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateBudgetBookChanged();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updateCca(Cca target, Cca editedCca) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireAllNonNull(target, editedCca);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook.updateCca(target, editedCca);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateBudgetBookChanged();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //@@author kengwoon"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updateMultiplePersons(List\u003cPerson\u003e target, List\u003cPerson\u003e editedPerson) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (int i \u003d 0; i \u003c target.size(); i++) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            updatePerson(target.get(i), editedPerson.get(i));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * {@code versionedAddressBook}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ObservableList\u003cCca\u003e getFilteredCcaList() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredCcas);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void updateFilteredCcaList(Predicate\u003cCca\u003e predicate) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        filteredCcas.setPredicate(predicate);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Undo/Redo \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return versionedAddressBook.canUndo();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return versionedAddressBook.canRedo();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void undoAddressBook() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.undo();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void redoAddressBook() {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.redo();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void commitAddressBook() {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedAddressBook.commit();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void commitBudgetBook() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        versionedBudgetBook.commit();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Raises an event to indicate the calendar model has changed"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private void indicateCalendarModelChanged() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        raise(new CalendarCreatedEvent(calendarModel));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Raises an event to indicate that an all day event was created"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private void indicateAllDayEventCreated(Year year, Month month, int date, String title) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        raise(new AllDayEventAddedEvent(year, month, date, title));"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Raises an event to indicate that an event was created"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private void indicateCalendarEventCreated(Year year, Month month, int startDate, int startHour, int startMin,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                                              int endDate, int endHour, int endMin, String title) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        raise(new CalendarEventAddedEvent(year, month, startDate, startHour, startMin,"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                endDate, endHour, endMin, title));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Raises an event to indicate that an event was deleted"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private void indicateCalendarEventDeleted(Year year, Month month, int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        raise(new CalendarEventDeletedEvent(year, month, startDate, endDate, title));"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireAllNonNull(year, month);"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarModel.isExistingCalendar(year, month);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isValidDate(Year year, Month month, int date) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireAllNonNull(year, month, date);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarModel.isValidDate(year, month, date);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isValidTime(int hour, int minute) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireAllNonNull(hour, minute);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarModel.isValidTime(hour, minute);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isValidTimeFrame(int startDate, int startHour, int startMinute,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                                    int endDate, int endHour, int endMinute) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireAllNonNull(startDate, startHour, startMinute, endDate, endHour, endMinute);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarModel.isValidTimeFrame(startDate, startHour, startMinute, endDate, endHour, endMinute);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            calendarModel.createCalendar(year, month);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            updateExistingCalendar();"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            indicateCalendarModelChanged();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to save calendar(ics) file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void loadCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            calendarModel.loadCalendar(year, month);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            //TODO"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            //Raise load calendar event"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException | ParserException e) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to load calendar(ics) file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createAllDayEvent(Year year, Month month, int date, String title) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            calendarModel.createAllDayEvent(year, month, date, title);"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            indicateAllDayEventCreated(year, month, date, title);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException | ParserException e) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to create all day event : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createEvent(Year year, Month month, int startDate, int startHour, int startMin,"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                            int endDate, int endHour, int endMin, String title) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            calendarModel.createEvent(year, month, startDate, startHour, startMin, endDate, endHour, endMin, title);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            indicateCalendarEventCreated(year, month, startDate, startHour, startMin, endDate, endHour, endMin, title);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException | ParserException e) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to create event : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean isExistingEvent(Year year, Month month, int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            requireAllNonNull(year, month, startDate, endDate, title);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return calendarModel.isExistingEvent(year, month, startDate, endDate, title);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException | ParserException e) {"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to delete event : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void deleteEvent(Year year, Month month, int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            calendarModel.deleteEvent(year, month);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            indicateCalendarEventDeleted(year, month, startDate, endDate, title);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            logger.warning(\"Failed to delete event : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void updateExistingCalendar() {"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        userPrefs.setExistingCalendar(calendarModel.updateExistingCalendar());"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        if (filteredPersons \u003d\u003d null) {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return versionedAddressBook.equals(other.versionedAddressBook);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        } else if (calendarModel \u003d\u003d null) {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        return versionedAddressBook.equals(other.versionedAddressBook)"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 filteredPersons.equals(other.filteredPersons)"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 calendarModel.equals(other.calendarModel);"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Compose email \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(Email email) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        emailModel.saveEmail(email);"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        indicateEmailSaved();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Raises an event to indicate the model has changed"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private void indicateEmailSaved() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        raise(new EmailSavedEvent(emailModel));"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 153,
      "EatOrBeEaten": 17,
      "ericyjw": 38,
      "-": 121,
      "GilgameshTC": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyBudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Unmodifiable view of a budget book"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public interface ReadOnlyBudgetBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns an unmodifiable view of the cca list."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * This list will not contain any duplicate cca."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    ObservableList\u003cCca\u003e getCcaList();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path addressBookFilePath \u003d Paths.get(\"data\" , \"addressbook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Path budgetBookFilePath \u003d Paths.get(\"data\", \"ccabook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Path ccaXslFilePath \u003d Paths.get(\"data\", \"ccabook.xsl\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path emailPath \u003d Paths.get(\"email\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path calendarPath \u003d Paths.get(\"calendar\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        setExistingCalendar(new HashMap\u003c\u003e());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Path getBudgetBookFilePath() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBookFilePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Path getCcaXslFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccaXslFilePath;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setBudgetBookFilePath(Path budgetBookFilePath) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budgetBookFilePath \u003d budgetBookFilePath;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(Path addressBookFilePath) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    //author@@ EatOrBeEaten"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getEmailPath() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailPath;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEmailPath(Path emailPath) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailPath \u003d emailPath;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarPath;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void setCalendarPath(Path calendarPath) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.calendarPath \u003d calendarPath;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Map\u003cYear, Set\u003cMonth\u003e\u003e getExistingCalendar() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return existingCalendar;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void setExistingCalendar(Map\u003cYear, Set\u003cMonth\u003e\u003e existingCalendar) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.existingCalendar \u003d existingCalendar;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(emailPath, o.emailPath)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(calendarPath, o.calendarPath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, calendarPath, emailPath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nEmail directory location : \" + emailPath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCalendar directory location : \" + calendarPath);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 15,
      "-": 91,
      "GilgameshTC": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/model/VersionedBudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * {@code BudgetBook} that keeps track of its own history."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class VersionedBudgetBook extends BudgetBook {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final List\u003cReadOnlyBudgetBook\u003e budgetBookStateList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private int currentStatePointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public VersionedBudgetBook(ReadOnlyBudgetBook initialState) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(initialState);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList.add(new BudgetBook(initialState));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves a copy of the current {@code BudgetBook} state at the end of the state list."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Undone states are removed from the state list."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void commit() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        removeStatesAfterCurrentPointer();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList.add(new BudgetBook(this));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void removeStatesAfterCurrentPointer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStateList.subList(currentStatePointer + 1, budgetBookStateList.size()).clear();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Restores the budget book to its previous state."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void undo() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!canUndo()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new NoUndoableStateException();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer--;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resetData(budgetBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Restores the budget book to its previously undone state."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void redo() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!canRedo()) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new NoRedoableStateException();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        currentStatePointer++;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        resetData(budgetBookStateList.get(currentStatePointer));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code undo()} has budget book states to undo."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean canUndo() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return currentStatePointer \u003e 0;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code redo()} has budget book states to redo."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean canRedo() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return currentStatePointer \u003c budgetBookStateList.size() - 1;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof VersionedBudgetBook)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        VersionedBudgetBook otherVersionedBudgetBook \u003d (VersionedBudgetBook) other;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return super.equals(otherVersionedBudgetBook)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 budgetBookStateList.equals(otherVersionedBudgetBook.budgetBookStateList)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 currentStatePointer \u003d\u003d otherVersionedBudgetBook.currentStatePointer;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Thrown when trying to {@code undo()} but can\u0027t."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static class NoUndoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private NoUndoableStateException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            super(\"Current state pointer at start of budgetBookState list, unable to undo.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Thrown when trying to {@code redo()} but can\u0027t."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static class NoRedoableStateException extends RuntimeException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        private NoRedoableStateException() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            super(\"Current state pointer at end of budgetBookState list, unable to redo.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 110
    }
  },
  {
    "path": "src/main/java/seedu/address/model/budget/Transaction.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.budget;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represent the transaction log."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Transaction {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_TRANSACTION_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \"Transactions should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String TRANSACTION_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}-][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String log;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Transaction() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.log \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Transaction(String log) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(log);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        checkArgument(isValidTranscation(String.valueOf(log)), MESSAGE_TRANSACTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.log \u003d log;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static boolean isValidTranscation(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return test.matches(TRANSACTION_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getTransactionLog() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return log;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Update the transaction log by appending new entry"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param entry new transaction entry"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void updateTransaction(String entry) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder(this.log);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        sb.append(entry);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both ccas have the same identity and data fields."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof Transaction)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Transaction otherBudget \u003d (Transaction) other;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return otherBudget.getTransactionLog().equals(getTransactionLog());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Month.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a month in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMonthRegex(String)};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * is valid as declared in {@link #isValidMonth(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class Month {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_MONTH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Months should only be three characters long, and a valid month in the calendar. \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            + \"It should also not be blank.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MONTH_VALIDATION_REGEX \u003d \"^[a-zA-Z]{3}$\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // List of strings that represent valid months"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String[] VALID_MONTHS \u003d {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JAN\","
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"FEB\","
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"MAR\","
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"APR\","
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"MAY\","
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JUN\","
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"JUL\","
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"AUG\","
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"SEP\","
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"OCT\","
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"NOV\","
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        \"DEC\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    };"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String month;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Constructs a {@code Month}."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param month A valid month."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Month(String month) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(month);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidMonthRegex(month), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        month \u003d month.toUpperCase();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidMonth(month), MESSAGE_MONTH_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.month \u003d month;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Month() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // default create a JAN month obj"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // For Json parsing, have to have a default constructor"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this(\"JAN\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string follows the correct month regex."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidMonthRegex(String test) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return test.matches(MONTH_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string is a valid month."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidMonth(String test) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        boolean isValid \u003d false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (String monthName : VALID_MONTHS) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            if (test.compareTo(monthName) \u003d\u003d 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                isValid \u003d true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return isValid;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns a string listing all the valid months."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static String listValidMonths() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        for (String month : VALID_MONTHS) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            sb.append(\"\\n\" + month);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return month;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof Month // instanceof handles nulls"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 month.equals(((Month) other).month)); // state check"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return month.hashCode();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/calendar/Year.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.calendar;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a year in the calendar."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidYear(String)};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class Year {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String MESSAGE_YEAR_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            \"Year should be a 4 digit integer, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static final String YEAR_VALIDATION_REGEX \u003d \"^\\\\d{4}$\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public final String year;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Constructs a {@code Year}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param year A valid year."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Year(String year) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        requireNonNull(year);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        checkArgument(isValidYear(year), MESSAGE_YEAR_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.year \u003d year;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Year() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // default create a 2018 year obj"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        // For Json parsing, have to have a default constructor"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this(\"2018\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns true if a given string is a valid year."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public static boolean isValidYear(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return test.matches(YEAR_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return year;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                || (other instanceof Year // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                \u0026\u0026 year.equals(((Year) other).year)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return year.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "GilgameshTC": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/Budget.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Budget {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_BUDGET_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \"Budget should only contain numbers and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String BUDGET_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final Integer budget;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs a {@code Budget} amount."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param amount A valid budget amount."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Budget(Integer amount) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        checkArgument(isValidBudget(String.valueOf(amount)), MESSAGE_BUDGET_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a given string is a valid budget amount."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static boolean isValidBudget(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return test.matches(BUDGET_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // TODO: Cross check with the address book CCA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getBudget() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return this.budget;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return String.valueOf(budget);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof Budget // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 budget.equals(((Budget) other).budget)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budget.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/Cca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a CCA in the cca book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Cca {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final CcaName name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Name head;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Name viceHead;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Budget budget;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Spent spent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Outstanding outstanding;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Transaction transaction;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructor for CCA"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Every identity field must be present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Data field can be null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param name name of CCA"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param head name of head of CCA"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param viceHead name of viceHead of CCA"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param budget budget of CCA"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param spent amount spent by the CCA"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param outstanding outstanding amount of the CCA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param transaction transaction history of the CCA"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca(CcaName name, Name head, Name viceHead, Budget budget, Spent spent, Outstanding outstanding,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "               Transaction transaction) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(name, head, viceHead, budget, spent, outstanding);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.viceHead \u003d viceHead;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d spent;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d outstanding;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Alternative constructor, in the event that there is no vice-head in the CCA."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param name name of the cca"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param head name of the head of the CCA"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param budget budget of the CCA"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param spent amount spent by the CCA"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param outstanding outstanding amount of the CCA"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param transaction transaction history of the CCA"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca(CcaName name, Name head, Budget budget, Spent spent, Outstanding outstanding,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "               Transaction transaction) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(name, head, budget, spent, outstanding);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.viceHead \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d spent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d outstanding;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca(String ccaName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        CcaName name \u003d new CcaName(ccaName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.head \u003d null;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.viceHead \u003d null;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d null;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.transaction \u003d null;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca(CcaName ccaName, Budget budget) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.name \u003d ccaName;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.head \u003d new Name(\"-\");"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.viceHead \u003d new Name(\"-\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d new Spent(0);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d new Outstanding(budget.getBudget());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.transaction \u003d new Transaction(\"-\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getCcaName() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return name.getCcaName();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getHeadName() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return head.fullName;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getViceHeadName() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!viceHead.equals(null)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return viceHead.fullName;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return \"-\";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getGivenBudgetAmount() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budget.getBudget();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getSpentAmount() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return spent.getSpent();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getOutstandingAmount() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return outstanding.getOutstanding();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getTransactionLog() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return transaction.getTransactionLog();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaName getName() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return this.name;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Name getHead() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return head;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Name getViceHead() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return viceHead;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Spent getSpent() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return spent;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Outstanding getOutstanding() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return outstanding;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Budget getBudget() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budget;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Transaction getTransaction() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return transaction;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both CCA of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * This defines a weaker notion of equality between two CCAs."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean isSameCca(Cca otherCca) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (otherCca \u003d\u003d this) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return otherCca !\u003d null"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherCca.getCcaName().equals(getCcaName());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        //\u0026\u0026 (otherCca.getHeadName().equals(getHeadName()) || otherCca.getViceHeadName().equals(getViceHeadName()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Return true if the CCA name is the same"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param toCheck name of the CCA to be checked"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean isSameCcaName(Cca toCheck) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getCcaName().equals(toCheck.getCcaName());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both CCAs have the same identity and data fields."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof Cca)) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Cca otherCca \u003d (Cca) other;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return otherCca.getCcaName().equals(getCcaName())"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherCca.getHeadName().equals(getHeadName())"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherCca.getViceHeadName().equals(getViceHeadName())"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 otherCca.budget.equals(this.budget);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return Objects.hash(name, head, viceHead, budget);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        builder.append(getCcaName())"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\" Head: \")"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getHeadName())"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\" Vice-Head: \")"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getViceHeadName())"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\" Budget: \")"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getGivenBudgetAmount())"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(\" Outstanding: \")"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .append(getOutstandingAmount());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 220
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/CcaName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a CCA\u0027s name in the cca book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidCcaName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaName {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \"CCA names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final String ccaName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param name A valid CCA name."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaName(String name) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        checkArgument(isValidCcaName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        String[] arr \u003d name.trim().split(\" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        StringBuffer sb \u003d new StringBuffer();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (int i \u003d 0; i \u003c arr.length; i++) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            sb.append(Character.toUpperCase(arr[i].charAt(0)))"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                .append(arr[i].substring(1)).append(\" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaName \u003d sb.toString().trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getCcaName() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccaName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a given string is a valid CCA name."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static boolean isValidCcaName(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // TODO: Cross check with the address book CCA"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccaName;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof CcaName // instanceof handles nulls"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 ccaName.equals(((CcaName) other).ccaName)); // state check"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccaName.hashCode();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 73
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/CcaNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaNameContainsKeywordsPredicate implements Predicate\u003cCca\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean test(Cca cca) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(cca.getCcaName(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof CcaNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 keywords.equals(((CcaNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 31
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/Outstanding.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Outstanding {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_OUTSTANDING_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \"Outstanding should only contain numbers and it should not be blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String OUTSTANDING_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final Integer outstanding;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs an {@code outstanding} amount."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param amount valid outstanding amount."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Outstanding(Integer amount) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(amount);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        checkArgument(isValidOutstanding(String.valueOf(amount)), MESSAGE_OUTSTANDING_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d amount;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a given string is a valid outstanding amount."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static boolean isValidOutstanding(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return test.matches(OUTSTANDING_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // TODO: To do the arithmetic"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getOutstanding() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return this.outstanding;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return String.valueOf(this.outstanding);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof Outstanding // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 outstanding.equals(((Outstanding) other).outstanding)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return outstanding.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/Spent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class Spent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_SPENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \"Spent should only contain numbers and should not be blank!\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The first character of Spent must not be a whitespace,"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String SPENT_VALIDATION_REGEX \u003d \"\\\\d+\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final Integer spent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs a {@code Spent}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param spent A valid spent amount."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Spent(Integer spent) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(spent);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        checkArgument(isValidSpent(String.valueOf(spent)), MESSAGE_SPENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d spent;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a given string is a valid CCA name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static boolean isValidSpent(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return test.matches(SPENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // TODO: Cross check with the address book CCA"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int getSpent() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return this.spent;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return String.valueOf(spent);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof Spent // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 spent.equals(((Spent) other).spent)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return spent.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/UniqueCcaList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.exceptions.CcaNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.exceptions.DuplicateCcaException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * A list of unique CCAs."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class UniqueCcaList implements Iterable\u003cCca\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final ObservableList\u003cCca\u003e internalCcaList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean contains(Cca toCheck) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalCcaList.stream().anyMatch(toCheck::isSameCca);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    //TODO: check why directly checking the name doesn\u0027t work"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean contains(String ccaName) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(ccaName);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Cca toCheck \u003d new Cca(ccaName);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // return internalCcaList.stream().anyMatch(ccaName::isSameCcaName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalCcaList.stream().anyMatch(toCheck::isSameCcaName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Adds a CCA to the unique CCA list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA must not already exist in the list."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void add(Cca toAdd) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateCcaException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.add(toAdd);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the CCA {@code target} in the unique CCA list with {@code editedCCA}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code target} must exist in the unique CCA list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The CCA identity of {@code editedCCA} must not be the same as another existing CCA in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCca(Cca target, Cca editedCca) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(target, editedCca);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int index \u003d internalCcaList.indexOf(target);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CcaNotFoundException();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!target.isSameCca(editedCca) \u0026\u0026 contains(editedCca)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateCcaException();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.set(index, editedCca);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCca(UniqueCcaList replacement) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.setAll(replacement.internalCcaList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the contents of this list with {@code CCAs}."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code CCAs} must not contain duplicate CCAs."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setCcas(List\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(ccas);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!ccasAreUnique(ccas)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateCcaException();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalCcaList.setAll(ccas);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Removes the equivalent tag from the unique tag list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The tag must exist in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void remove(Cca toRemove) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!internalCcaList.remove(toRemove)) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new CcaNotFoundException();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code CCAs} contains only unique CCAs."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private boolean ccasAreUnique(List\u003cCca\u003e ccas) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (int i \u003d 0; i \u003c ccas.size() - 1; i++) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c ccas.size(); j++) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                if (ccas.get(i).isSameCca(ccas.get(j))) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cCca\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalCcaList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Iterator\u003cCca\u003e iterator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalCcaList.iterator();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof UniqueCcaList // instanceof handles nulls"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 internalCcaList.equals(((UniqueCcaList) other).internalCcaList));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalCcaList.hashCode();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/exceptions/CcaNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation is unable to find the specified CCA."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/cca/exceptions/DuplicateCcaException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.cca.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation will result in duplicate CCAs (CCas are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * name)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class DuplicateCcaException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public DuplicateCcaException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(\"Operation would result in duplicate CCAs\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Content.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Represents content in Email."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidContent(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class Content {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_CONTENT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            \"Subject can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * The first character of the content must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String CONTENT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Constructs a {@code Subject}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param content A valid subject."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Content(String content) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(content);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        checkArgument(isValidContent(content), MESSAGE_CONTENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        value \u003d content;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns true if a given string is a valid content."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static boolean isValidContent(String test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return test.matches(CONTENT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                || (other instanceof Content // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                \u0026\u0026 value.equals(((Content) other).value)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 54,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/email/Subject.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.email;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Represents a subject in Email."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidSubject(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class Subject {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String MESSAGE_SUBJECT_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            \"Subject can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * The first character of the subject must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String SUBJECT_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Constructs a {@code Subject}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param subject A valid subject."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Subject(String subject) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        requireNonNull(subject);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        checkArgument(isValidSubject(subject), MESSAGE_SUBJECT_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        value \u003d subject;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns true if a given string is a valid subject."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static boolean isValidSubject(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return test.matches(SUBJECT_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                || (other instanceof Subject // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                \u0026\u0026 value.equals(((Subject) other).value)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 54,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContactContainsRoomPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches the keyword given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ContactContainsRoomPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ContactContainsRoomPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Room room \u003d person.getRoom();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (String s : keywords) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (s.toLowerCase().equals(room.toString().toLowerCase())) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                || (other instanceof ContactContainsRoomPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContactContainsRoomPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContactContainsTagPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches the keyword given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ContactContainsTagPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public ContactContainsTagPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Set\u003cTag\u003e tags \u003d person.getTags();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (String s : keywords) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            for (Tag t : tags) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                if (s.equals(t.toStringOnly())) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                || (other instanceof ContactContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 keywords.equals(((ContactContainsTagPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/FieldsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Tag} matches the keyword given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class FieldsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public FieldsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsFieldIgnoreCase"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                        (person.getFields().toString().replaceAll(\"\\\\[\", \"\").replaceAll(\"]\", \"\"),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                                keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof FieldsContainsKeywordsPredicate //instanceof handles null"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 keywords.equals(((FieldsContainsKeywordsPredicate) other).keywords)); //state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 10,
      "javenseow": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Name.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s name in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Name {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \"Names should only contain alphanumeric characters, dashes and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the name must not be a whitespace,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}-][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String fullName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Name}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param name A valid name."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name(String name) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        fullName \u003d name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if a given string is a valid name."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Allow whitespace for name of CCA leaders."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * If first character is not whitespace, test the whole string for valid name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static boolean isValidNameForCca(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (String.valueOf(test.charAt(0)).equals(\" \")) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return test.matches(NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Name // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 fullName.equals(((Name) other).fullName)); // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return fullName.hashCode();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 15,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    // Identity fields"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    // Data fields"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ProfilePicture profilePicture;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final School school;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Room room;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * All fields except {@code profilePicture} are present and not null."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Room room, School school, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, room, tags);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.profilePicture \u003d new ProfilePicture(\"-.jpg\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Room room, School school, ProfilePicture profilePicture,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                  Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.profilePicture \u003d profilePicture;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.addAll(tags);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // ToDo: testing"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Person(Name name) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.phone \u003d null;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.email \u003d null;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.room \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        this.school \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.profilePicture \u003d new ProfilePicture(\"-.jpg\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public Room getRoom() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return room;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public School getSchool() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return school;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public ProfilePicture getProfilePicture() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return profilePicture;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author javenseow"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns an immutable set containing tags, school and room, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public Set\u003cTag\u003e getFields() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Set\u003cTag\u003e fields \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fields.addAll(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fields.add(new Tag(this.school.value));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        fields.add(new Tag(this.room.value));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return Collections.unmodifiableSet(fields);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons of the same name have at least one other identity field that is the same."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a weaker notion of equality between two persons."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSamePerson(Person otherPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        if (otherPerson \u003d\u003d this) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson !\u003d null"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 (otherPerson.getPhone().equals(getPhone()) || otherPerson.getEmail().equals(getEmail()));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both persons have the same identity and data fields."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * This defines a stronger notion of equality between two persons."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(getName())"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(getPhone())"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(getEmail())"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getRoom().equals(getRoom())"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getTags().equals(getTags());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, room, tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Room: \")"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getRoom())"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" School: \")"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getSchool())"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Profile Picture: \")"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getProfilePicture())"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "javenseow": 14,
      "ericyjw": 7,
      "-": 151
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ProfilePicture.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.awt.image.BufferedImage;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s profile picture file path in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class ProfilePicture {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_PROFILE_PICTURE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            \"Profile picture should be either a .jpeg or .png file, and not empty\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * The first character of the file path must not be a whitespace,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String PROFILE_PICTURE_VALIDATION_REGEX \u003d \"([^\\\\s]+(\\\\.(?i)(jpg|png))$)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public final String filePath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private BufferedImage picture;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Constructs a {@code ProfilePicture}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @param path a valid file path."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public ProfilePicture(String path) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(path);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(isValidProfilePicture(path), MESSAGE_PROFILE_PICTURE_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        filePath \u003d path;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public BufferedImage getPicture() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return picture;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns true if a given string ends with .jpeg or .png."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static boolean isValidProfilePicture(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return test.matches(PROFILE_PICTURE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            || (other instanceof ProfilePicture) // instanceof handles null"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            \u0026\u0026 filePath.equals(((ProfilePicture) other).filePath);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return filePath.hashCode();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 53,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Room.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s room number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class Room {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_ROOM_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            \"Room numbers should only be alphanumeric, and the first character should be an alphabet,\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"followed by 3 digits.\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String ROOM_VALIDATION_REGEX \u003d \"\\\\D\\\\d{3}\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Constructs a {@code Room}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @param room a valid room number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public Room(String room) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(room);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(isValidRoom(room), MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        value \u003d room;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns true if a given string is a valid room number."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static boolean isValidRoom(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return test.matches(ROOM_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof Room // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 value.equals(((Room) other).value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 43,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/School.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s school in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class School {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String MESSAGE_SCHOOL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            \"School should only contain alphanumeric characters, and it should not be blank or contain spaces.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String SCHOOL_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Constructs a {@code School}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * @param school a valid school"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public School(String school) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        requireNonNull(school);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        checkArgument(isValidSchool(school), MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        value \u003d school;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns true if a given string is a valid school."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static boolean isValidSchool(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return test.matches(SCHOOL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                || (other instanceof School // instanceof handles nulls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                \u0026\u0026 value.equals(((School) other).value));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 43,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/SchoolContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code School} matches the keyword given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SchoolContainsKeywordPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public SchoolContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getSchool().value, keyword));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            || (other instanceof SchoolContainsKeywordPredicate //instanceof handles null"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            \u0026\u0026 keywords.equals(((SchoolContainsKeywordPredicate) other).keywords)); //state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 21,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}@-][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Tag}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param tagName A valid tag name."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String tagName) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tagName);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if both tags are the same."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean isSameTag(Tag otherTag) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (otherTag \u003d\u003d this) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public String getTag() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            \u0026\u0026 tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     * Format state as String."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public String toStringOnly() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        return tagName;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 7,
      "ericyjw": 16,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/TagContainsKeywordPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Tests that a tag matches any of the keywords given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class TagContainsKeywordPredicate implements Predicate\u003cTag\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public TagContainsKeywordPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean test(Tag tag) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(tag.getTag(), keyword));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof TagContainsKeywordPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 keywords.equals(((TagContainsKeywordPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.exceptions.DuplicateTagException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * A list of unique CCA tags."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalTagList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if the list contains an equivalent tag as the given argument."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalTagList.stream().anyMatch(toCheck::isSameTag);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Adds a tag to the unique tag list."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The person must not already exist in the list."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void add(Tag toAdd) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.add(toAdd);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the tag {@code target} in the unique tag list with {@code editedTag}."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code target} must exist in the unique tag list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The tag identity of {@code editedTag} must not be the same as another existing tag in the list."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setTag(Tag target, Tag editedTag) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(target, editedTag);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        int index \u003d internalTagList.indexOf(target);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!target.isSameTag(editedTag) \u0026\u0026 contains(editedTag)) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.set(index, editedTag);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Removes the equivalent tag from the unique tag list."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * The tag must exist in the list."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void remove(Tag toRemove) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!internalTagList.remove(toRemove)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setTags(UniqueTagList replacement) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(replacement);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.setAll(replacement.internalTagList);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Replaces the contents of this list with {@code tags}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code tags} must not contain duplicate tags."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void setTags(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!tagsAreUnique(tags)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        internalTagList.setAll(tags);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public ObservableList\u003cTag\u003e asUnmodifiableObservableList() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalTagList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalTagList.iterator();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 internalTagList.equals(((UniqueTagList) other).internalTagList));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return internalTagList.hashCode();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if {@code tags} contains only unique tags."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private boolean tagsAreUnique(List\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (int i \u003d 0; i \u003c tags.size() - 1; i++) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            for (int j \u003d i + 1; j \u003c tags.size(); j++) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                if (tags.get(i).isSameTag(tags.get(j))) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 126
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/DuplicateTagException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation will result in duplicate Persons (Persons are considered duplicates if they have the same"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * identity)."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class DuplicateTagException extends RuntimeException {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public DuplicateTagException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "ericyjw": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class TagNotFoundException extends RuntimeException {}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Budget;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Outstanding;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Spent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "                new Room(\"A412\"), new School(\"Fos\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"soccer\")),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                new Room(\"B124\"), new School(\"SoC\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"basketball\", \"soccer\")),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                new Room(\"E216\"), new School(\"Biz\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"choir\")),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                new Room(\"A320\"), new School(\"Engine\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"frisbee\")),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                new Room(\"C403\"), new School(\"Fass\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"softball\")),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                new Room(\"D401\"), new School(\"SDE\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                getTagSet(\"track\"))"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static Cca[] getSampleCcas() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new Cca[]{"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            new Cca("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new CcaName(\"Hocke\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Name(\"MrYanDao\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Name(\"XiaoMing\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Budget(500),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Spent(300),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Outstanding(200),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Transaction(\"transaction log 1\")),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            new Cca("
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new CcaName(\"Floorball\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Name(\"XiaoBitch\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Name(\"RisLow\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Budget(600),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Spent(500),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Outstanding(100),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Transaction(\"transaction log 2\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            new Cca("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new CcaName(\"Handball\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Name(\"Steven Lim\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Name(\"Bumble Bee\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Budget(100),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Spent(100),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Outstanding(0),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                new Transaction(\"transaction log 2\")),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return sampleAb;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static ReadOnlyBudgetBook getSampleBudgetBook() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        BudgetBook sampleBb \u003d new BudgetBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (Cca sampleCca : getSampleCcas()) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            sampleBb.addCca(sampleCca);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return sampleBb;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        return Arrays.stream(strings)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(Tag::new)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toSet());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 3,
      "ericyjw": 42,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/BudgetBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public interface BudgetBookStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Path getBudgetBookFilePath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns BudgetBook data as a {@link ReadOnlyBudgetBook}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @see #getBudgetBookFilePath()"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook(Path filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves the given {@link ReadOnlyBudgetBook} to the storage."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param budgetBook cannot be null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void saveBudgetBook(ReadOnlyBudgetBook budgetBook) throws IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @see #saveBudgetBook(ReadOnlyBudgetBook)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void saveBudgetBook(ReadOnlyBudgetBook budgetBook, Path filePath) throws IOException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/CalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.data.ParserException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * Represents a storage for Calendar."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public interface CalendarStorage {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Returns the file path of the Calendar directory."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Path getCalendarPath();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Creates the given Calendar to the storage."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param calendar cannot be null."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param calendarName the name of the calendar to be created."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createCalendar(Calendar calendar, String calendarName) throws IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * Load and parse the requested Calendar from storage."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @param calendarName the name of the calendar to be loaded and parsed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     * @throws IOException if there was any problem reading the file."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Calendar loadCalendar(String calendarName) throws IOException, ParserException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "GilgameshTC": 28
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EmailDirStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.converter.EmailConverter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * A class to access Email directory in the hard disk"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class EmailDirStorage implements EmailStorage {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Path dirPath;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public EmailDirStorage(Path dirPath) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.dirPath \u003d dirPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Path getEmailPath() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return dirPath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(EmailModel emailModel) throws IOException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Path fileName \u003d Paths.get(dirPath.toString(), emailModel.getEmail().getSubject().concat(\".eml\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String toSave \u003d EmailConverter.emailToEML(emailModel.getEmail());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        FileUtil.createIfMissing(fileName);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        FileUtil.writeToFile(fileName, toSave);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 26,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/EmailStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * Represents a storage for Email."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public interface EmailStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns the file path of the Email directory."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    Path getEmailPath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Saves the email to local directory."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param emailModel cannot be null."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    void saveEmail(EmailModel emailModel) throws IOException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 19,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/IcsCalendarStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.data.CalendarBuilder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.data.CalendarOutputter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.data.ParserException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "//@@author GilgameshTC"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " * A class to access Calendars stored in the hard disk as a ics file"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "public class IcsCalendarStorage implements CalendarStorage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    private Path dirPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public IcsCalendarStorage(Path dirPath) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        this.dirPath \u003d dirPath;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Calendar calendar, String calendarName) throws IOException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String fileName \u003d calendarName + \".ics\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Path pathToSave \u003d Paths.get(dirPath.toString(), fileName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        FileUtil.createIfMissing(pathToSave);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        FileOutputStream fout \u003d new FileOutputStream(pathToSave.toFile());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        CalendarOutputter outputter \u003d new CalendarOutputter();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        outputter.output(calendar, fout);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Calendar loadCalendar(String calendarName) throws IOException, ParserException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        String fileName \u003d calendarName + \".ics\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Path pathToSave \u003d Paths.get(dirPath.toString(), fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        FileInputStream fin \u003d new FileInputStream(pathToSave.toFile());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        CalendarBuilder builder \u003d new CalendarBuilder();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        Calendar calendar \u003d builder.build(fin);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendar;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath.toString();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return Objects.hash(dirPath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        if (!(other instanceof IcsCalendarStorage)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return dirPath.equals(((IcsCalendarStorage) other).dirPath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "GilgameshTC": 62
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/Storage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.data.ParserException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.model.BudgetBookChangedEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EmailSavedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Storage component"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public interface Storage extends AddressBookStorage, BudgetBookStorage, UserPrefsStorage, CalendarStorage,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    EmailStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getAddressBookFilePath();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    Path getEmailPath();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveEmail(EmailModel email) throws IOException;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the current version of the Address Book to the hard disk."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    void handleAddressBookChangedEvent(AddressBookChangedEvent abce);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves the current version of the Budget Book to the hard disk."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @author ericyjw"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void handleBudgetBookChangedEvent(BudgetBookChangedEvent bbce);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Saves the current Email in EmailModel to the hard disk."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Creates the data file if it is missing."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    void handleEmailSavedEvent(EmailSavedEvent abce);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Path getCalendarPath();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    void createCalendar(Calendar calendar, String calendarName) throws IOException;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    Calendar loadCalendar(String calendarName) throws IOException, ParserException;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 9,
      "ericyjw": 16,
      "-": 47,
      "GilgameshTC": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import net.fortuna.ical4j.data.ParserException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import net.fortuna.ical4j.model.Calendar;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.model.BudgetBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.EmailSavedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.EmailViewEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private BudgetBookStorage budgetBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private CalendarStorage calendarStorage;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private EmailStorage emailStorage;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, BudgetBookStorage budgetBookStorage,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                          UserPrefsStorage userPrefsStorage,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                          CalendarStorage calendarStorage, EmailStorage emailStorage) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budgetBookStorage \u003d budgetBookStorage;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.calendarStorage \u003d calendarStorage;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailStorage \u003d emailStorage;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Path getBudgetBookFilePath() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBookStorage.getBudgetBookFilePath();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return readBudgetBook(budgetBookStorage.getBudgetBookFilePath());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook(Path filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBookStorage.readBudgetBook(filePath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook) throws IOException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        saveBudgetBook(budgetBook, budgetBookStorage.getBudgetBookFilePath());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBookStorage.saveBudgetBook(budgetBook, filePath);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void handleBudgetBookChangedEvent(BudgetBookChangedEvent event) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            saveBudgetBook(event.data);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Email methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public Path getEmailPath() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return emailStorage.getEmailPath();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void saveEmail(EmailModel emailModel) throws IOException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        emailStorage.saveEmail(emailModel);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void handleEmailSavedEvent(EmailSavedEvent event) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Email composed, saving to file\"));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            saveEmail(event.data);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            raise(new EmailViewEvent(event.data));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    //@@author GilgameshTC"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Calendar methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Path getCalendarPath() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarStorage.getCalendarPath();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public void createCalendar(Calendar calendar, String calendarName) throws IOException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        calendarStorage.createCalendar(calendar, calendarName);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    public Calendar loadCalendar(String calendarName) throws IOException, ParserException {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        return calendarStorage.loadCalendar(calendarName);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 25,
      "ericyjw": 44,
      "-": 99,
      "GilgameshTC": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedCca.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Budget;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Outstanding;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Spent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * JAXB-friendly version of the CCA."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class XmlAdaptedCca {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"CCA\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String head;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String viceHead;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String budget;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String spent;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String outstanding;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private String transaction;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs an XmlAdaptedCca."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlAdaptedCca() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Constructs an {@code XmlAdaptedCca} with the given CCA details."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlAdaptedCca(String name, String head, String viceHead, String budget, String spent, String outstanding,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                         String transaction) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.viceHead \u003d viceHead;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.budget \u003d budget;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.spent \u003d spent;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.outstanding \u003d outstanding;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.transaction \u003d transaction;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts a given CCA into this class for JAXB use."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedCca"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlAdaptedCca(Cca source) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        name \u003d source.getCcaName();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budget \u003d String.valueOf(source.getGivenBudgetAmount());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        head \u003d source.getHeadName();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        viceHead \u003d source.getViceHeadName();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budget \u003d String.valueOf(source.getGivenBudgetAmount());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        spent \u003d String.valueOf(source.getSpentAmount());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        outstanding \u003d String.valueOf(source.getOutstandingAmount());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        transaction \u003d source.getTransactionLog();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts this jaxb-friendly adapted cca object into the model\u0027s CCA object."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted cca"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Cca toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, CcaName.class.getSimpleName()));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!CcaName.isValidCcaName(name)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(CcaName.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final CcaName modelName \u003d new CcaName(name);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (head \u003d\u003d null) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Name.isValidName(head)) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Name modelHeadName \u003d new Name(head);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (viceHead \u003d\u003d null) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Name.isValidName(viceHead)) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Name modelViceHeadName \u003d new Name(viceHead);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (budget \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Budget.class.getSimpleName()));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Budget.isValidBudget(budget)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Budget.MESSAGE_BUDGET_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Budget modelBudget \u003d new Budget(Integer.parseInt(budget));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (spent \u003d\u003d null) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Spent.class.getSimpleName()));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Spent.isValidSpent(spent)) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Spent.MESSAGE_SPENT_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Spent modelSpent \u003d new Spent(Integer.parseInt(spent));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (outstanding \u003d\u003d null) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                Outstanding.class.getSimpleName()));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Outstanding.isValidOutstanding(outstanding)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Outstanding.MESSAGE_OUTSTANDING_CONSTRAINTS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Outstanding modelOutstanding \u003d new Outstanding(Integer.parseInt(outstanding));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (transaction \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                Transaction.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Transaction.isValidTranscation(transaction)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new IllegalValueException(Transaction.MESSAGE_TRANSACTION_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        final Transaction modelTransaction \u003d new Transaction(transaction);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return new Cca(modelName, modelHeadName, modelViceHeadName, modelBudget, modelSpent, modelOutstanding,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            modelTransaction);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof XmlAdaptedCca)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlAdaptedCca otherCca \u003d (XmlAdaptedCca) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return Objects.equals(name, otherCca.name)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(head, otherCca.head)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(viceHead, otherCca.viceHead)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(budget, otherCca.budget)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(spent, otherCca.spent)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(outstanding, otherCca.outstanding)"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 Objects.equals(transaction, otherCca.transaction);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 165,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private String room;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String school;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     * except the {@code profilePicture}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson (String name, String phone, String email, String room, String school,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                             List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String room, String school,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                            String profilePicture, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.room \u003d room;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.school \u003d school;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        room \u003d source.getRoom().value;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        school \u003d source.getSchool().value;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d source.getTags().stream()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (name \u003d\u003d null) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(name)) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name modelName \u003d new Name(name);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(phone)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone modelPhone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        if (email \u003d\u003d null) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(email)) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email modelEmail \u003d new Email(email);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (room \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Room.isValidRoom(room)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Room modelRoom \u003d new Room(room);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (school \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!School.isValidSchool(school)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(School.MESSAGE_SCHOOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        final School modelSchool \u003d new School(school);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e modelTags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person(modelName, modelPhone, modelEmail, modelRoom, modelSchool, modelTags);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(room, otherPerson.room)"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(school, otherPerson.school)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "-": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedTag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly adapted version of the Tag."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedTag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String tagName;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag() {}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(String tagName) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d tagName;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts a given CCA into this class for JAXB use."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedTag(Tag source) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        tagName \u003d source.tagName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts this jaxb-friendly adapted Tag object into the model\u0027s Tag object."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(tagName)) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(tagName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedTag)) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.equals(((XmlAdaptedTag) other).tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getAddressBookFilePath() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlSerializableAddressBook xmlAddressBook \u003d XmlFileStorage.loadDataFromSaveAbFile(filePath);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.of(xmlAddressBook.toModelType());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlFileStorage.saveDataToAbFile(filePath, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlBudgetBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * A class to access BudgetBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class XmlBudgetBookStorage implements BudgetBookStorage {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlBudgetBookStorage.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Path filePath;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlBudgetBookStorage(Path filePath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Path getBudgetBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return readBudgetBook(filePath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Similar to {@link #readBudgetBook()}"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public Optional\u003cReadOnlyBudgetBook\u003e readBudgetBook(Path filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!Files.exists(filePath)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.info(\"BudgetBook file \" + filePath + \" not found\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlSerializableBudgetBook xmlBudgetBook \u003d XmlFileStorage.loadDataFromSaveBbFile(filePath);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return Optional.of(xmlBudgetBook.toModelType());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            logger.info(\"Illegal values found in \" + filePath + \": \" + ive.getMessage());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DataConversionException(ive);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook) throws IOException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        saveBudgetBook(budgetBook, filePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Similar to {@link #saveBudgetBook(ReadOnlyBudgetBook)}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void saveBudgetBook(ReadOnlyBudgetBook budgetBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(budgetBook);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlFileStorage.saveDataToBbFile(filePath, new XmlSerializableBudgetBook(budgetBook));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlFileStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Stores addressbook data in an XML file"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlFileStorage {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given addressbook data to the specified file."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static void saveDataToAbFile(Path file, XmlSerializableAddressBook addressBook)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            throws FileNotFoundException {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(file, addressBook);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Saves the given budgetbook data to the specified file."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static void saveDataToBbFile(Path file, XmlSerializableBudgetBook budgetBook)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        throws FileNotFoundException {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            XmlUtil.saveDataToFile(file, budgetBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new AssertionError(\"Unexpected exception \" + e.getMessage(), e);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns address book in the file or an empty address book"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static XmlSerializableAddressBook loadDataFromSaveAbFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                            FileNotFoundException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns address book in the file or an empty budget book"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static XmlSerializableBudgetBook loadDataFromSaveBbFile(Path file) throws DataConversionException,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        FileNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return XmlUtil.getDataFromFile(file, XmlSerializableBudgetBook.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (JAXBException e) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new DataConversionException(e);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 26,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableBudgetBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * An Immutable BudgetBook that is serializable to XML format"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "@XmlRootElement(name \u003d \"ccabook\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class XmlSerializableBudgetBook {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_CCA \u003d \"CCA list contains duplicate CCA(s).\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private List\u003cXmlAdaptedCca\u003e ccas;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Creates an empty XmlSerializableBudgetBook."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlSerializableBudgetBook() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public XmlSerializableBudgetBook(ReadOnlyBudgetBook src) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccas.addAll(src.getCcaList().stream().map(XmlAdaptedCca::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Converts this budgetbook into the model\u0027s {@code BudgetBook} object."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * {@code XmlAdaptedCca}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBook toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        BudgetBook budgetBook \u003d new BudgetBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        for (XmlAdaptedCca c : ccas) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            Cca cca \u003d c.toModelType();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (budgetBook.hasCca(cca)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                throw new IllegalValueException(MESSAGE_DUPLICATE_CCA);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetBook.addCca(cca);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return budgetBook;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof XmlSerializableBudgetBook)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccas.equals(((XmlSerializableBudgetBook) other).ccas);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.EmailViewEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.EmailModel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(SEARCH_PAGE_URL + person.getName().fullName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private void handleEmailViewEvent(EmailViewEvent event) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        loadEmail(event.getEmailModel());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Loads HTML text preview of email."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @param emailModel The emailModel containing the saved email."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void loadEmail(EmailModel emailModel) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().loadContent(emailModel.getPreview()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 16,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetBrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.XmlToHmtl;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.CcaPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetBrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String BUDGET_PAGE \u003d \"./data/ccabook.html\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"BudgetBrowserPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetBrowserPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Load the budget page of a chosen CCA"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @param cca chosen CCA"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void loadCcaBudgetPage(Cca cca) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        String chosen \u003d cca.getCcaName();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        XmlToHmtl.convertCcaBook(chosen);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        File budgetFile \u003d new File(BUDGET_PAGE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            URL url \u003d budgetFile.toURI().toURL();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            loadPage(url.toString());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } catch (MalformedURLException e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handleCcaPanelSelectionChangedEvent(CcaPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        loadCcaBudgetPage(event.getNewSelection());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BudgetWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * The Budget Window. Displays the CCAs available and the budget information of each CCA"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class BudgetWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"BudgetWindow.fxml\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private BudgetBrowserPanel budgetBrowserPanel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private CcaListPanel ccaListPanel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private MenuItem budgetMenuItem;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private StackPane ccaListPanelPlaceholder;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetWindow(Stage root) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML, root);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public BudgetWindow(Logic logic, UserPrefs prefs) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this(new Stage());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBrowserPanel \u003d new BudgetBrowserPanel();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        browserPlaceholder.getChildren().add(budgetBrowserPanel.getRoot());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListPanel \u003d new CcaListPanel(logic.getFilteredCcaList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListPanelPlaceholder.getChildren().add(ccaListPanel.getRoot());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaListPanel getCcaListPanel() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return ccaListPanel;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetBrowserPanel.freeResources();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Show budget window"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.fine(\"Showing budget list of the hostel.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        getRoot().show();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        fillInnerParts();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Returns true if the budget window is currently being shown."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean isShowing() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return getRoot().isShowing();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Focuses on the budget window."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void focus() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        getRoot().requestFocus();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 102
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CcaCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * An UI component that displays information of a {@code Cca}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"CcaListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public final Cca cca;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label ccaName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaCard(Cca cca, int displayedIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        this.cca \u003d cca;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaName.setText(cca.getCcaName());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!(other instanceof CcaCard)) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        CcaCard card \u003d (CcaCard) other;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u0026\u0026 cca.equals(card.cca);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//package seedu.address.ui;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "///**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "// * An UI component that displays information of a {@code CCA}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "// */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//public class CcaCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    private static final String FXML \u003d \"CcaListCard.fxml\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    public final Cca cca;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    @javafx.fxml.FXML"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    private HBox cardPane;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    private Label id;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    @FXML"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    private Label ccaName;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    public CcaCard(Cca cca, int displayedIndex) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        super(FXML);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        this.cca \u003d cca;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        ccaName.setText(cca.getCcaName());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            return true;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        if (!(other instanceof CcaCard)) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            return false;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        // state check"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        CcaCard card \u003d (CcaCard) other;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//            \u0026\u0026 ccaName.equals(card.ccaName);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 119
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CcaListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.CcaPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * Panel containing the list of CCAs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " * @author ericyjw"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "public class CcaListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private static final String FXML \u003d \"CcaListPanel.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private ListView\u003cCca\u003e ccaListView;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public CcaListPanel(ObservableList\u003cCca\u003e ccaList) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        setConnections(ccaList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void setConnections(ObservableList\u003cCca\u003e ccaList) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListView.setItems(ccaList);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListView.setCellFactory(listView -\u003e new CcaListViewCell());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        ccaListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    logger.fine(\"Selection in cca list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    raise(new CcaPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Scrolls to the {@code CcaCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            ccaListView.scrollTo(index);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            ccaListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code Cca} using a {@code CcaCard}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    class CcaListViewCell extends ListCell\u003cCca\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        protected void updateItem(Cca cca, boolean empty) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            super.updateItem(cca, empty);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            if (empty || cca \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                setGraphic(new CcaCard(cca, getIndex() + 1).getRoot());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 85
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.commons.events.ui.ShowBudgetViewEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private HelpWindow helpWindow;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private BudgetWindow budgetWindow;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private MenuItem budgetMenuItem;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!helpWindow.isShowing()) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.show();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            helpWindow.focus();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Opens the budget window or focuses on it if it\u0027s already opened."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public void handleBudget() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        budgetWindow \u003d new BudgetWindow(logic, prefs);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        if (!budgetWindow.isShowing()) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetWindow.show();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            budgetWindow.focus();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    private void handleShowBudgetEvent(ShowBudgetViewEvent event) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        handleBudget();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 24,
      "-": 203
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label room;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label school;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        room.setText(person.getRoom().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        school.setText(person.getSchool().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 3,
      "-": 72
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 41
    }
  },
  {
    "path": "src/main/resources/view/BudgetBrowserPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.web.WebView?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cStackPane xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cWebView fx:id\u003d\"browser\"/\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 7
    }
  },
  {
    "path": "src/main/resources/view/BudgetWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" title\u003d\"Budget Book\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cicons\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cImage url\u003d\"@/images/budget_icon.png\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/icons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cscene\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cScene\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cURL value\u003d\"@DarkTheme.css\"/\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cURL value\u003d\"@Extensions.css\"/\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cVBox\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e--\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e--\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"--\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e--\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e--\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003cVBox fx:id\u003d\"ccaList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cStackPane fx:id\u003d\"ccaListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                            \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c!--\u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e--\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003c/VBox\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c/Scene\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/scene\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/fx:root\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e--\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import java.net.URL?\u003e--\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import javafx.geometry.Insets?\u003e--\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import javafx.scene.Scene?\u003e--\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import javafx.scene.control.SplitPane?\u003e--\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import javafx.scene.image.Image?\u003e--\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import javafx.scene.layout.StackPane?\u003e--\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import javafx.scene.layout.VBox?\u003e--\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c?import javafx.scene.web.WebView?\u003e--\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"--\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--title\u003d\"Budget\" minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e--\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cicons\u003e--\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cImage url\u003d\"@/images/budget_icon.png\"/\u003e--\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/icons\u003e--\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cscene\u003e--\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cScene\u003e--\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cstylesheets\u003e--\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cURL value\u003d\"@DarkTheme.css\"/\u003e--\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cURL value\u003d\"@Extensions.css\"/\u003e--\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/stylesheets\u003e--\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cVBox\u003e--\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e--\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e--\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\"--\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e--\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\"/\u003e--\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e--\u003e"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e--\u003e"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e--\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cStackPane fx:id\u003d\"ccaListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e--\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\"\u003e--\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cpadding\u003e--\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\"/\u003e--\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/padding\u003e--\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/StackPane\u003e--\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/SplitPane\u003e--\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\"/\u003e--\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/VBox\u003e--\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/Scene\u003e--\u003e"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/scene\u003e--\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c!--\u003c/fx:root\u003e--\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 118
    }
  },
  {
    "path": "src/main/resources/view/CcaListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.RowConstraints?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8.0.121\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\"/\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"22.0\" prefHeight\u003d\"35.0\" prefWidth\u003d\"150.0\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cInsets bottom\u003d\"5\" left\u003d\"15\" right\u003d\"5\" top\u003d\"5\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cHBox alignment\u003d\"CENTER_LEFT\" prefHeight\u003d\"17.0\" prefWidth\u003d\"56.0\" spacing\u003d\"5\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\"/\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "                \u003cLabel fx:id\u003d\"ccaName\" styleClass\u003d\"cell_big_label\" text\u003d\"\\$first\"/\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003crowConstraints\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            \u003cRowConstraints/\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003c/rowConstraints\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 35
    }
  },
  {
    "path": "src/main/resources/view/CcaListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "  \u003cListView fx:id\u003d\"ccaListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 8
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\" title\u003d\"Hallper\" onCloseRequest\u003d\"#handleExit\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 1,
      "-": 67
    }
  },
  {
    "path": "src/main/resources/view/ResultDisplay.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.TextArea?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cStackPane fx:id\u003d\"placeHolder\" styleClass\u003d\"pane-with-border\" xmlns\u003d\"http://javafx.com/javafx/8\""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "           xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cTextArea fx:id\u003d\"resultDisplay\" editable\u003d\"false\" styleClass\u003d\"result-display\"/\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/StackPane\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 1,
      "-": 9
    }
  },
  {
    "path": "src/test/data/ImportCommandTest/ccaImports.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003cList\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\t\u003cCCA cca\u003d\"golf\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    \t\u003croom\u003eB420\u003c/room\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\t\u003c/CCA\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003c/List\u003e"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 6
    }
  },
  {
    "path": "src/test/data/ImportCommandTest/contactImports.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        \u003cname\u003eJohn\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        \u003cphone\u003e12345678\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        \u003cemail\u003ejohn@gmail.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        \u003croom\u003eC234\u003c/room\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        \u003cschool\u003eComputing\u003c/school\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        \u003ctagged\u003ebasketball\u003c/tagged\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 11
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in TypicalPersons#getTypicalAddressBook() --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e94351253\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003croom\u003eB314\u003c/room\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cschool\u003eFoS\u003c/school\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ctagged\u003eBasketball\u003c/tagged\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003croom\u003eD111\u003c/room\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cschool\u003eMedicine\u003c/school\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ctagged\u003eSoccer\u003c/tagged\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ctagged\u003eFloorball\u003c/tagged\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003croom\u003eA421\u003c/room\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cschool\u003eSDE\u003c/school\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ctagged\u003eFloorball\u003c/tagged\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ctagged\u003eHandball\u003c/tagged\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003croom\u003eC120\u003c/room\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cschool\u003eBiz\u003c/school\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ctagged\u003eFloorball\u003c/tagged\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        \u003ctagged\u003eHandball\u003c/tagged\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003croom\u003eB316\u003c/room\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cschool\u003eEngine\u003c/school\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003croom\u003eE321\u003c/room\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cschool\u003eSoC\u003c/school\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003croom\u003eB420\u003c/room\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cschool\u003eEngine\u003c/school\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 7,
      "-": 53
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static java.lang.Thread.sleep;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if tests are run in headless mode."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isHeadlessMode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return isHeadlessMode;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return getNumberOfWindowsShown(stageTitle) \u003e\u003d 1;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the number of windows with {@code stageTitle} that are currently open."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumberOfWindowsShown(String stageTitle) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return (int) listTargetWindows().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .count();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance) // checks that the window is of type Stage"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 119
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.collect.ImmutableMultiset;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ROOM_FIELD_ID \u003d \"#room\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SCHOOL_FIELD_ID \u003d \"#school\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label roomLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label schoolLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        roomLabel \u003d getChildNode(ROOM_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        schoolLabel \u003d getChildNode(SCHOOL_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRoom() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return roomLabel.getText();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSchool() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return schoolLabel.getText();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if this handle contains {@code person}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Person person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return getName().equals(person.getName().fullName)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 getRoom().equals(person.getRoom().value)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                \u0026\u0026 getSchool().equals(person.getSchool().value)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getPhone().equals(person.getPhone().value)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 getEmail().equals(person.getEmail().value)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 ImmutableMultiset.copyOf(getTags()).equals(ImmutableMultiset.copyOf(person.getTags().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                        .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                        .collect(Collectors.toList())));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/TestApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Supplier;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Screen;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import systemtests.ModelHelper;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * This class is meant to override some properties of MainApp so that it will be suited for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * testing"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestApp extends MainApp {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Path SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String APP_TITLE \u003d \"Test App\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    protected static final Path DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier \u003d () -\u003e null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public TestApp(Supplier\u003cReadOnlyAddressBook\u003e initialDataSupplier, Path saveFileLocation) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.initialDataSupplier \u003d initialDataSupplier;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveFileLocation \u003d saveFileLocation;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // If some initial local data has been provided, write those to the file"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (initialDataSupplier.get() !\u003d null) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            createDataFileWithData(new XmlSerializableAddressBook(this.initialDataSupplier.get()),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                    this.saveFileLocation);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(Path configFilePath) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Config config \u003d super.initConfig(configFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setAppTitle(APP_TITLE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return config;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs userPrefs \u003d super.initPrefs(storage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs.setAddressBookFilePath(saveFileLocation);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefs;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the address book data stored inside the storage file."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook readStorageAddressBook() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook(storage.readAddressBook().get());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException dce) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Data is not in the AddressBook format.\", dce);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Storage file cannot be found.\", ioe);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the storage file."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Path getStorageSaveLocation() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return storage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the model."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public Model getModel() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model copy \u003d new ModelManager((model.getAddressBook()), model.getBudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(copy, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return copy;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an XML file at the {@code filePath} with the {@code data}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private \u003cT\u003e void createDataFileWithData(T data, Path filePath) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createIfMissing(filePath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            XmlUtil.saveDataToFile(filePath, data);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/LogicManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManagerTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidCommand \u003d \"uicfhmowqewca\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_commandExecutionError_throwsCommandException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String deleteCommand \u003d \"delete 9\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandException(deleteCommand, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(deleteCommand);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validCommand_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String listCommand \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHistoryCorrect(listCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getFilteredPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        logic.getFilteredPersonList().remove(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also confirms that {@code expectedModel} is as specified."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertParseException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandException(String inputCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the exception is thrown and that the result message is correct."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #assertCommandBehavior(Class, String, String, Model)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), model.getBudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - {@code expectedModel}\u0027s address book was saved to the storage file."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                                           String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(inputCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, null);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedException, e.getClass());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, model);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code HistoryCommand}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHistoryCorrect(String... expectedCommands) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage \u003d String.format("
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException | CommandException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 123
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddCommand}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandIntegrationTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newPerson_success() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(validPerson);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new AddCommand(validPerson), model, commandHistory,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(AddCommand.MESSAGE_SUCCESS, validPerson), expectedModel);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new AddCommand(personInList), model, commandHistory,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "-": 48
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.ReadOnlyBudgetBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Month;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "import seedu.address.model.calendar.Year;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d new AddCommand(validPerson).execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand(validPerson);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubWithPerson(validPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        addCommand.execute(modelStub, commandHistory);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void addCca(Cca cca) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public ReadOnlyBudgetBook getBudgetBook() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public ObservableList\u003cCca\u003e getFilteredCcaList() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public boolean hasCca(CcaName ccaName) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public boolean hasCca(Cca cca) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public boolean hasCca(Person toAdd) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void clearMultiplePersons(List\u003cPerson\u003e target) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void removeTagsFromPersons(List\u003cPerson\u003e target, List\u003cPerson\u003e original) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void updateCca(Cca target, Cca editedCca) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void updateMultiplePersons(List\u003cPerson\u003e target, List\u003cPerson\u003e editedPerson) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void addMultiplePersons(List\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        public void updateFilteredCcaList(Predicate\u003cCca\u003e predicate) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canUndoAddressBook() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean canRedoAddressBook() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        public void undoAddressBook() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public void redoAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        public void commitBudgetBook() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveEmail(Email email) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public boolean isExistingCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public boolean isValidDate(Year year, Month month, int date) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public boolean isValidTime(int hour, int minute) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public boolean isValidTimeFrame(int startDate, int startHour, int startMinute,"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                                        int endDate, int endHour, int endMinute) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void createCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void loadCalendar(Year year, Month month) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void createAllDayEvent(Year year, Month month, int date, String title) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void createEvent(Year year, Month month, int startDate, int startHour, int startMin,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "                                int endDate, int endHour, int endMin, String title) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public boolean isExistingEvent (Year year, Month month, int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void deleteEvent(Year year, Month month, int startDate, int endDate, String title) {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        public void updateExistingCalendar() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "            throw new AssertionError(\"This method should not be called.\");"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "GilgameshTC"
        },
        "content": "        }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that contains a single person."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubWithPerson extends ModelStub {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Person person;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubWithPerson(Person person) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person \u003d person;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.person.isSamePerson(person);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean hasPerson(Person person) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            return personsAdded.stream().anyMatch(person::isSamePerson);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        public void commitAddressBook() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            // called by {@code AddCommand#execute()}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 38,
      "ericyjw": 32,
      "-": 213,
      "GilgameshTC": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model modelEmpty \u003d new ModelManager();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModelEmpty \u003d new ModelManager();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(\"Basketball\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand(target);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(ClearCommand.MESSAGE_CLEAR_NOTHING, \u0027[\u0027 + target.get(0) + \u0027]\u0027);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(clearCommand, modelEmpty, commandHistory, expectedMessage, expectedModelEmpty);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(\"all\");"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand(target);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d ClearCommand.MESSAGE_CLEAR_ALL_SUCCESS;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new BudgetBook(model.getBudgetBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.resetData(new AddressBook());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(clearCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_clearSpecific_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(\"Handball\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ClearCommand clearCommand \u003d new ClearCommand(target);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(ClearCommand.MESSAGE_CLEAR_SPECIFIC_SUCCESS, \u0027[\u0027 + target.get(0) + \u0027]\u0027);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e fullList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e clear \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : fullList) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (new ContactContainsTagPredicate(target).test(p)) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                clear.add(p);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.clearMultiplePersons(clear);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(clearCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 67,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CONTENT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SUBJECT;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_AMY \u003d \"B124\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ROOM_BOB \u003d \"A410\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_SCHOOL_AMY \u003d \"SDE\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_SCHOOL_BOB \u003d \"Biz\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String VALID_TAG_AMY \u003d \"Handball\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "    public static final String VALID_TAG_BOB \u003d \"Floorball\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CONTENT_AMY \u003d \"Dear Bob\u003cbr /\u003e\u003cbr /\u003eSee you tomorrow!\u003cbr /\u003e\u003cbr /\u003eAmy\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_CONTENT_BOB \u003d \"Dear Amy\u003cbr /\u003e\u003cbr /\u003eSee you tomorrow!\u003cbr /\u003e\u003cbr /\u003eBob\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_SUBJECT_AMY \u003d \"Meeting Tomorrow\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_SUBJECT_BOB \u003d \"Conference Tomorrow\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_AMY \u003d \" \" + PREFIX_ROOM + VALID_ROOM_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ROOM_DESC_BOB \u003d \" \" + PREFIX_ROOM + VALID_ROOM_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SCHOOL_DESC_AMY \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SCHOOL_DESC_BOB \u003d \" \" + PREFIX_SCHOOL + VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_AMY \u003d \" \" + PREFIX_TAG + VALID_TAG_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_BOB \u003d \" \" + PREFIX_TAG + VALID_TAG_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CONTENT_DESC_AMY \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String CONTENT_DESC_BOB \u003d \" \" + PREFIX_CONTENT + VALID_CONTENT_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SUBJECT_DESC_AMY \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SUBJECT_DESC_BOB \u003d \" \" + PREFIX_SUBJECT + VALID_SUBJECT_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ROOM_DESC \u003d \" \" + PREFIX_ROOM; // empty string not allowed for room"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_SCHOOL_DESC \u003d \" \" + PREFIX_SCHOOL"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"School of Computing\"; // spacing no allowed for school"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withRoom(VALID_ROOM_AMY)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                .withSchool(VALID_SCHOOL_AMY).withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withRoom(VALID_ROOM_BOB)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                .withSchool(VALID_SCHOOL_BOB).withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel} \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged \u003cbr\u003e"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * - {@code actualCommandHistory} remains unchanged."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, CommandHistory actualCommandHistory,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            String expectedMessage) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandHistory expectedCommandHistory \u003d new CommandHistory(actualCommandHistory);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute(actualModel, actualCommandHistory);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedCommandHistory, actualCommandHistory);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        model.commitAddressBook();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 2,
      "-": 156
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ComposeCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.DefaultEmailBuilder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class ComposeCommandTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void constructor_nullEmail_throwsNullPointerException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        new ComposeCommand(null);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void execute_emailAccepted_composeSuccessful() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Email validEmail \u003d new DefaultEmailBuilder().build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        CommandResult commandResult \u003d new ComposeCommand(validEmail).execute(model, commandHistory);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertEquals(String.format(ComposeCommand.MESSAGE_SUCCESS, validEmail.getSubject()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertEquals(EMPTY_COMMAND_HISTORY, commandHistory);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Email meeting \u003d new DefaultEmailBuilder().withSubject(\"Meeting\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Email conference \u003d new DefaultEmailBuilder().withSubject(\"Conference\").build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        ComposeCommand composeMeetingCommand \u003d new ComposeCommand(meeting);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        ComposeCommand composeConferenceCommand \u003d new ComposeCommand(conference);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertTrue(composeMeetingCommand.equals(composeMeetingCommand));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        ComposeCommand composeMeetingCommandCopy \u003d new ComposeCommand(meeting);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertTrue(composeMeetingCommand.equals(composeMeetingCommandCopy));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertFalse(composeMeetingCommand.equals(1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertFalse(composeMeetingCommand.equals(null));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertFalse(composeMeetingCommand.equals(composeConferenceCommand));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 54,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code DeleteCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS, personToDelete);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e first person deleted"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person deleted again"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Deletes a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the deletion."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously deleted person in the"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the deletion. This ensures {@code RedoCommand} deletes the person object regardless of indexing."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonDeleted() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // delete -\u003e deletes second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(personToDelete, model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e deletes same second person in unfiltered person list"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(null));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(model.getFilteredPersonList().isEmpty());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 5,
      "-": 173
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e address book state not added into model"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, commandHistory, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // single address book state in model -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute(model, commandHistory);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.undoAddressBook();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new UndoCommand(), model, commandHistory, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.redoAddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new RedoCommand(), model, commandHistory, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertFalse(standardCommand.equals(new HelpCommand()));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 247
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EraseCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.EraseCommand.MESSAGE_ERASE_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.ContactContainsTagPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "class EraseCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    void execute_eraseTag_success() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cString\u003e target \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e original \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e erased \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String targetTag \u003d \"Basketball\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        target.add(targetTag);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        EraseCommand eraseCommand \u003d new EraseCommand(target);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_ERASE_SUCCESS, \u0027[\u0027 + target.get(0) + \u0027]\u0027);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new BudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        List\u003cPerson\u003e fullList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        for (Person p : fullList) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            if (new ContactContainsTagPredicate(target).test(p)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                ArrayList\u003cString\u003e editedTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                //int index \u003d 0;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                for (Tag t : p.getTags()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    if (!t.toStringOnly().equals(targetTag)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        editedTags.add(t.toStringOnly());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                PersonBuilder personErase \u003d new PersonBuilder(p);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                if (!editedTags.isEmpty()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    String[] stringArray \u003d editedTags.toArray(new String[0]);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    Person editedPerson \u003d personErase.withTags(stringArray).build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    original.add(p);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    erased.add(editedPerson);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    Person editedPerson \u003d personErase.withTags().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    original.add(p);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                    erased.add(editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.removeTagsFromPersons(erased, original);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(eraseCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ImportCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "//@@author kengwoon"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " * Contains unit tests for ImportCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "public class ImportCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_PERSON_NAME \u003d \"John\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_PERSON_PHONE \u003d \"12345678\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_PERSON_EMAIL \u003d \"john@gmail.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_PERSON_ROOM \u003d \"C234\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_PERSON_SCHOOL \u003d \"Computing\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_nullFile_throwsFileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(new File(\"./imports/notAFile.xml\"));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d ImportCommand.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandFailure(importCommand, model, commandHistory, expectedMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_validContactsFile_success() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String fileName \u003d \"contactImports.xml\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        File file \u003d new File(\"./src/test/data/ImportCommandTest/\" + fileName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(file);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_SUCCESS, fileName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new BudgetBook(model.getBudgetBook()), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        tags.add(new Tag(\"basketball\"));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person newPerson \u003d new Person(new Name(VALID_PERSON_NAME), new Phone(VALID_PERSON_PHONE),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new Email(VALID_PERSON_EMAIL),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new Room(VALID_PERSON_ROOM), new School(VALID_PERSON_SCHOOL), tags);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.addPerson(newPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(importCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void execute_validCcaFile_success() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String fileName \u003d \"ccaImports.xml\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        File file \u003d new File(\"./src/test/data/ImportCommandTest/\" + fileName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        ImportCommand importCommand \u003d new ImportCommand(file);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(ImportCommand.MESSAGE_SUCCESS, fileName);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new BudgetBook(model.getBudgetBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person original \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        PersonBuilder personInFile \u003d new PersonBuilder(original);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Person edited \u003d personInFile.withTags(\"golf\").build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.updatePerson(original, edited);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.updateFilteredPersonList(Model.PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel.commitAddressBook();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(importCommand, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 95
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), model.getBudgetBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(new ListCommand(), model, commandHistory, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SearchCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.jupiter.api.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SearchCommandTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private CommandHistory commandHistory \u003d new CommandHistory();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate predicate \u003d preparePredicate(\" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertEquals(Collections.emptyList(), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate predicate \u003d preparePredicate(\"Handball soc\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand command \u003d new SearchCommand(predicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedModel.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertCommandSuccess(command, model, commandHistory, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertEquals(Arrays.asList(CARL, DANIEL, FIONA), model.getFilteredPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    void equals() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                new FieldsContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                new FieldsContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand searchFirstCommand \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand searchSecondCommand \u003d new SearchCommand(secondPredicate);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand searchFirstCommandCopy \u003d new SearchCommand(firstPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(searchFirstCommand.equals(searchFirstCommandCopy));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(searchFirstCommand.equals(1));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(searchFirstCommand.equals(null));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(searchFirstCommand.equals(searchSecondCommand));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Parses {@code userInput} into a {@code NameContainsKeywordsPredicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private FieldsContainsKeywordsPredicate preparePredicate(String userInput) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new FieldsContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s\")));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 60,
      "ericyjw": 1,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple room - last room accepted"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder(BOB).withTags(VALID_TAG_AMY, VALID_TAG_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder(AMY).withTags().build();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                        + SCHOOL_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                        + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ROOM_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ROOM_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid room"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY, Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + SCHOOL_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_AMY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ROOM_DESC"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "                        + SCHOOL_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + TAG_DESC_BOB + TAG_DESC_AMY,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 6,
      "-": 138
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" all\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditPersonDescriptorDetails(descriptor));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "-": 142
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SCHOOL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ROOM_DESC, Room.MESSAGE_ROOM_CONSTRAINTS); // invalid room"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_SCHOOL_DESC, School.MESSAGE_SCHOOL_CONSTRAINTS); //invalid school"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_AMY + TAG_DESC_BOB + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_AMY + TAG_EMPTY + TAG_DESC_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_AMY + TAG_DESC_BOB, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ROOM_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                + EMAIL_DESC_AMY + ROOM_DESC_AMY + NAME_DESC_AMY + TAG_DESC_AMY;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withRoom(VALID_ROOM_AMY)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_BOB, VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        //@@author javenseow"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // room"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withRoom(VALID_ROOM_AMY).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        //school"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withSchool(VALID_SCHOOL_AMY).build();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_AMY;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_AMY).build();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ROOM_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_AMY + PHONE_DESC_AMY + ROOM_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_AMY"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + ROOM_DESC_BOB + EMAIL_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withRoom(VALID_ROOM_BOB).withSchool(VALID_SCHOOL_BOB)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_AMY, VALID_TAG_BOB)"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                .build();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ROOM_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                .withRoom(VALID_ROOM_BOB).build();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 13,
      "-": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Content;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_CONTENT \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_SUBJECT \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_CONTENT \u003d \"Dear Billy\u003cbr /\u003e\u003cbr /\u003eSee you tomorrow!\u003cbr /\u003e\u003cbr /\u003eAlice\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_SUBJECT \u003d \"Meeting on Friday\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    //@@author EatOrBeEaten"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseContent_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseContent((String) null));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseContent_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseContent(INVALID_CONTENT));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseContent_validValueWithoutWhitespace_returnsContent() throws Exception {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Content expectedContent \u003d new Content(VALID_CONTENT);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertEquals(expectedContent, ParserUtil.parseContent(VALID_CONTENT));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseContent_validValueWithWhitespace_returnsTrimmedContent() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String contentWithWhitespace \u003d WHITESPACE + VALID_CONTENT + WHITESPACE;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Content expectedContent \u003d new Content(VALID_CONTENT);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertEquals(expectedContent, ParserUtil.parseContent(contentWithWhitespace));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseSubject_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSubject((String) null));"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseSubject_invalidValue_throwsParseException() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Assert.assertThrows(ParseException.class, () -\u003e ParserUtil.parseSubject(INVALID_SUBJECT));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseSubject_validValueWithoutWhitespace_returnsSubject() throws Exception {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Subject expectedSubject \u003d new Subject(VALID_SUBJECT);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertEquals(expectedSubject, ParserUtil.parseSubject(VALID_SUBJECT));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public void parseSubject_validValueWithWhitespace_returnsTrimmedSubject() throws Exception {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        String subjectWithWhitespace \u003d WHITESPACE + VALID_SUBJECT + WHITESPACE;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        Subject expectedSubject \u003d new Subject(VALID_SUBJECT);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        assertEquals(expectedSubject, ParserUtil.parseSubject(subjectWithWhitespace));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 47,
      "-": 214
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SearchCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SearchCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.FieldsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SearchCommandParserTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private SearchCommandParser parser \u003d new SearchCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SearchCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void parse_validArgs_returnsSearchCommand() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        SearchCommand expectedSearchCommand \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                new SearchCommand(new FieldsContainsKeywordsPredicate(Arrays.asList(\"soccer\", \"choir\")));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertParseSuccess(parser, \"soccer choir\", expectedSearchCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertParseSuccess(parser, \"\\n soccer \\n \\t choir \\t\", expectedSearchCommand);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 21,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/FieldsContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class FieldsContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate firstPredicate \u003d new FieldsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                new FieldsContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                new FieldsContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // different person -\u003e return false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void test_fieldsContainsKeywords_returnTrue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate predicate \u003d new FieldsContainsKeywordsPredicate(Collections"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                .singletonList(\"soccer\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"soccer\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        predicate \u003d new FieldsContainsKeywordsPredicate(Arrays.asList(\"soccer\", \"track\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"soccer\", \"track\").build()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        predicate \u003d new FieldsContainsKeywordsPredicate(Arrays.asList(\"track\", \"badminton\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"soccer\", \"track\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        predicate \u003d new FieldsContainsKeywordsPredicate(Arrays.asList(\"soCcer\", \"TraCk\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"soccer\", \"track\").build()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void test_fieldsDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        FieldsContainsKeywordsPredicate predicate \u003d new FieldsContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"soccer\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        predicate \u003d new FieldsContainsKeywordsPredicate(Arrays.asList(\"badminton\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withTags(\"soccer\", \"track\").build()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // Keywords match name, phone, email, but does not match other fields"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        predicate \u003d new FieldsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"alice@email.com\", \"987654\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"987654\")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "javenseow"
        },
        "content": "                .withEmail(\"alice@email.com\").withTags(\"soccer\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 66,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RoomTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class RoomTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Room(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void constructor_invalidRoom_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String invalidRoom \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Room(invalidRoom));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void isValidRoom() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // null room"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Room.isValidRoom(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // invalid room"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(Room.isValidRoom(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(Room.isValidRoom(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(Room.isValidRoom(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(Room.isValidRoom(\"A123@\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(Room.isValidRoom(\"a1425\")); // contains more than 4 characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(Room.isValidRoom(\"1234\")); // contains only numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(Room.isValidRoom(\"abcd\")); // contains only alphabets"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // valid room"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(Room.isValidRoom(\"a123\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(Room.isValidRoom(\"A123\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 33,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/SchoolTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class SchoolTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new School(null));"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void constructor_invalidSchool_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        String invalidSchool \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new School(invalidSchool));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public void isValidSchool() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // null school"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e School.isValidSchool(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // invalid school"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(School.isValidSchool(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(School.isValidSchool(\" \")); // spaces only"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(School.isValidSchool(\"#\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(School.isValidSchool(\"soc!\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertFalse(School.isValidSchool(\"business school\")); // contains space"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        // valid school"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(School.isValidSchool(\"soc\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(School.isValidSchool(\"Biz2\")); // alphanumeric"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(School.isValidSchool(\"210\")); // numbers only"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        assertTrue(School.isValidSchool(\"SoC\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 33,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/StorageManagerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.TemporaryFolder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManagerTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public TemporaryFolder testFolder \u003d new TemporaryFolder();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private StorageManager storageManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(getTempFilePath(\"ab\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlBudgetBookStorage budgetBookStorage \u003d new XmlBudgetBookStorage(getTempFilePath(\"bdg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        IcsCalendarStorage calendarStorage \u003d new IcsCalendarStorage(getTempFilePath(\"cal\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        EmailDirStorage emailStorage \u003d new EmailDirStorage(getTempFilePath(\"em\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        storageManager \u003d new StorageManager(addressBookStorage, budgetBookStorage, userPrefsStorage, calendarStorage,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            emailStorage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Path getTempFilePath(String fileName) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return testFolder.getRoot().toPath().resolve(fileName);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void prefsReadSave() throws Exception {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link JsonUserPrefsStorage} class."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs original \u003d new UserPrefs();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        original.setGuiSettings(300, 600, 4, 6);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveUserPrefs(original);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, retrieved);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addressBookReadSave() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         * Note: This is an integration test that verifies the StorageManager is properly wired to the"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * {@link XmlAddressBookStorage} class."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         * More extensive testing of UserPref saving/reading is done in {@link XmlAddressBookStorageTest} class."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook original \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        storageManager.saveAddressBook(original);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook retrieved \u003d storageManager.readAddressBook().get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(original, new AddressBook(retrieved));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getAddressBookFilePath() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(storageManager.getAddressBookFilePath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent_exceptionThrown_eventRaised() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Storage storage \u003d new StorageManager(new XmlAddressBookStorageExceptionThrowingStub(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "            new XmlBudgetBookStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            new JsonUserPrefsStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            new IcsCalendarStorage(Paths.get(\"dummy\")),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            new EmailDirStorage(Paths.get(\"dummy\")));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        storage.handleAddressBookChangedEvent(new AddressBookChangedEvent(new AddressBook()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Stub class to throw an exception when the save method is called"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    class XmlAddressBookStorageExceptionThrowingStub extends XmlAddressBookStorage {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        public XmlAddressBookStorageExceptionThrowingStub(Path filePath) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            super(filePath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        public void saveAddressBook(ReadOnlyAddressBook addressBook, Path filePath) throws IOException {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"dummy exception\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "ericyjw": 2,
      "-": 106
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import seedu.address.model.person.School;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String INVALID_ROOM \u003d \" \";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String INVALID_SCHOOL \u003d \"junior college\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_ROOM \u003d BENSON.getRoom().toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    private static final String VALID_SCHOOL \u003d BENSON.getSchool().toString();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL,"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ROOM, VALID_SCHOOL,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_TAGS);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidRoom_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ROOM, VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d Room.MESSAGE_ROOM_CONSTRAINTS;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullRoom_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                VALID_SCHOOL, VALID_TAGS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Room.class.getSimpleName());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void toModelType_invalidSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM, INVALID_SCHOOL,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                        VALID_TAGS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d School.MESSAGE_SCHOOL_CONSTRAINTS;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "kengwoon"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "    public void toModelType_nullSchool_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "                null, VALID_TAGS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, School.class.getSimpleName());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ROOM, VALID_SCHOOL, invalidTags);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 31,
      "-": 103
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/CcaBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.budget.Transaction;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Budget;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.CcaName;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Outstanding;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.cca.Spent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Cca objects."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@author ericyjw"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class CcaBuilder {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String DEFAULT_CCANAME \u003d \"jcrc\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Name DEFAULT_HEAD \u003d CARL.getName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Name DEFAULT_VICEHEAD \u003d DANIEL.getName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final int DEFAULT_BUDGET \u003d 500;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final int DEFAULT_SPENT \u003d 100;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final int DEFAULT_OUTSTANDING \u003d 400;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final String DEFAULT_TRANSACTION \u003d \"Bought equipments/-$150\\nTeam Fund/$50\\n\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private CcaName ccaName;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Name head;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Name viceHead;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Budget budget;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Spent spent;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Outstanding outstanding;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private Transaction transaction;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.ccaName \u003d new CcaName(DEFAULT_CCANAME);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.head \u003d DEFAULT_HEAD;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.viceHead \u003d DEFAULT_HEAD;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.budget \u003d new Budget(DEFAULT_BUDGET);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.spent \u003d new Spent(DEFAULT_SPENT);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.outstanding \u003d new Outstanding(DEFAULT_OUTSTANDING);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.transaction \u003d new Transaction(DEFAULT_TRANSACTION);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the cca name of the {@code Cca} we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withCcaName(String ccaName) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.ccaName \u003d new CcaName(ccaName);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the head of the {@code Cca} we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withHead(Name head) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.head \u003d head;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the vice head of the {@code Cca} we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withViceHead(Name viceHead) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.viceHead \u003d viceHead;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the {@code Budget} of the {@code Cca} we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withBudget(int budget) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.budget \u003d new Budget(budget);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the {@code Spent} of the {@code Cca} we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withSpent(int spent) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.spent \u003d new Spent(spent);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the {@code Outstanding} of the {@code Cca} we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withOutstanding(int outstanding) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.outstanding \u003d new Outstanding(outstanding);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Sets the {@code Outstanding} of the {@code Cca} we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public CcaBuilder withTransaction(String transaction) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        this.transaction \u003d new Transaction(transaction);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public Cca build() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new Cca(ccaName, head, viceHead, budget, spent, outstanding, transaction);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 90,
      "ericyjw": 6,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/DefaultEmailBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.simplejavamail.email.EmailBuilder;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Content;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.email.Subject;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "//@@author EatOrBeEaten"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " * A utility class to help with building org.simplejavamail.email.Email objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "public class DefaultEmailBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String DEFAULT_FROM \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String DEFAULT_TO \u003d \"billy@gmail.com\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String DEFAULT_SUBJECT \u003d \"Meeting on Friday\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public static final String DEFAULT_CONTENT \u003d \"Dear Billy\u003cbr /\u003e\u003cbr /\u003eSee you tomorrow!\u003cbr /\u003e\u003cbr /\u003eAlice\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Email from;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Email to;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Subject subject;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    private Content content;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public DefaultEmailBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        from \u003d new Email(DEFAULT_FROM);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        to \u003d new Email(DEFAULT_TO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        subject \u003d new Subject(DEFAULT_SUBJECT);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        content \u003d new Content(DEFAULT_CONTENT);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Sets the {@code Subject} of the {@code Email} that we are building."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public DefaultEmailBuilder withSubject(String subject) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        this.subject \u003d new Subject(subject);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * Returns an Email object built."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     * @return org.simplejavamail.email.Email object with builder values."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    public org.simplejavamail.email.Email build() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "        return EmailBuilder.startingBlank()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .from(from.value)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .to(to.value)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .withSubject(subject.value)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .withHTMLText(content.value)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "                .buildEmail();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "EatOrBeEaten"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "EatOrBeEaten": 44,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ROOM;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_SCHOOL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        sb.append(PREFIX_ROOM + person.getRoom().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        sb.append(PREFIX_SCHOOL + person.getSchool().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code EditPersonDescriptor}\u0027s details."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getEditPersonDescriptorDetails(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getName().ifPresent(name -\u003e sb.append(PREFIX_NAME).append(name.fullName).append(\" \"));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getPhone().ifPresent(phone -\u003e sb.append(PREFIX_PHONE).append(phone.value).append(\" \"));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.getEmail().ifPresent(email -\u003e sb.append(PREFIX_EMAIL).append(email.value).append(\" \"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        descriptor.getRoom().ifPresent(room -\u003e sb.append(PREFIX_ROOM).append(room.value).append(\" \"));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        descriptor.getSchool().ifPresent(school -\u003e sb.append(PREFIX_SCHOOL).append(school.value).append(\" \"));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        if (descriptor.getTags().isPresent()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tags \u003d descriptor.getTags().get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                sb.append(PREFIX_TAG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                tags.forEach(s -\u003e sb.append(PREFIX_TAG).append(s.tagName).append(\" \"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalCcas.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.BudgetBook;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.cca.Cca;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Cca} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@@author javenseow"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "javenseow"
        },
        "content": "//@author ericyjw"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "javenseow"
        },
        "content": "public class TypicalCcas {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Cca TRACK \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        new CcaBuilder().withCcaName(\"track\").withHead(ALICE.getName()).withViceHead(DANIEL.getName())"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            .withBudget(500).withSpent(100).withOutstanding(400).withTransaction(\"Spent on energy drinks/$100\").build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static final Cca BADMINTON \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        new CcaBuilder().withCcaName(\"badminton\").withHead(BENSON.getName()).withViceHead(CARL.getName())"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            .withBudget(500).withSpent(300).withOutstanding(100).withTransaction(\"Spent on equipments/$200\\nSpent on \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            + \"welfare/$100\\n\").build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    private TypicalCcas() {} // prevents instantiation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     * Returns a {@code BudgetBook} with all the typical ccas."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "javenseow"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static BudgetBook getTypicalBudgetBook() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        BudgetBook bb \u003d new BudgetBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        for (Cca cca : getTypicalCcas()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "javenseow"
        },
        "content": "            bb.addCca(cca);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return bb;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "javenseow"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    public static List\u003cCca\u003e getTypicalCcas() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "javenseow"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(TRACK, BADMINTON));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "javenseow"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "javenseow"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "javenseow": 28,
      "-": 17
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ROOM_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_SCHOOL_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            .withRoom(\"B314\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"94351253\").withSchool(\"FoS\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        .withTags(\"Basketball\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            .withRoom(\"D111\").withSchool(\"Medicine\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        .withTags(\"Soccer\", \"Floorball\").build();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"heinz@example.com\").withRoom(\"A421\").withSchool(\"SDE\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        .withTags(\"Floorball\", \"Handball\").build();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withRoom(\"C120\").withSchool(\"Biz\").withTags(\"soccer\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        .withTags(\"Floorball\", \"Handball\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"werner@example.com\").withRoom(\"B316\").withSchool(\"Engine\").build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"lydia@example.com\").withRoom(\"E321\").withSchool(\"Soc\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"anna@example.com\").withRoom(\"B420\").withSchool(\"Engine\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"stefan@example.com\").withRoom(\"B110\").withSchool(\"Biz\").build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"hans@example.com\").withRoom(\"D210\").withSchool(\"Law\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withRoom(VALID_ROOM_AMY).withSchool(VALID_SCHOOL_AMY).withTags(VALID_TAG_AMY)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withRoom(VALID_ROOM_BOB).withSchool(VALID_SCHOOL_BOB).withTags(VALID_TAG_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            ab.addPerson(person);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 4,
      "-": 77
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getRoom(), actualCard.getRoom());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getSchool(), actualCard.getSchool());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertEquals(expectedPerson.getRoom().value, actualCard.getRoom());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertEquals(expectedPerson.getSchool().value, actualCard.getSchool());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(i);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 2,
      "-": 74
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + EMAIL_DESC_AMY + \"   \" + ROOM_DESC_AMY + \"   \" + SCHOOL_DESC_AMY + \" \" + TAG_DESC_AMY + \" \";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY + TAG_DESC_AMY;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone and email"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_BOB + ROOM_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            + TAG_DESC_BOB + EMAIL_DESC_BOB + SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        assertCommandSuccess(GEORGE);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different email -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder(HOON).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(toAdd);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ROOM_DESC_AMY + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing room -\u003e rejected */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid room -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ROOM_DESC"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ROOM_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            + SCHOOL_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 4,
      "ericyjw": 10,
      "-": 238
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Path getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "ericyjw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * Selects the person at {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "     * @code index} of the displayed list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD + \" all\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddressBook(expectedModel.getAddressBook()), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().navigateToCard(getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\", mue);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Paths.get(\".\").resolve(testApp.getStorageSaveLocation()).toString(),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "                getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 1,
      "ericyjw": 3,
      "-": 290
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \"   all\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        //assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD + \" all\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD + \" all\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String trimmedArgs \u003d command.trim();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "kengwoon"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_CLEAR_ALL_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "kengwoon": 10,
      "-": 92
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ROOM_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ROOM_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.SCHOOL_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Room;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ROOM_DESC_BOB + \" \" + SCHOOL_DESC_BOB + \" \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                + TAG_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(BOB).withTags(VALID_TAG_BOB).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different name -\u003e edited */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(getModel().getFilteredPersonList().get(index.getZeroBased()), BOB);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone and email"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_AMY + SCHOOL_DESC_AMY + TAG_DESC_AMY;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid room -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ROOM_DESC,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Room.MESSAGE_ROOM_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(ALICE));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "        command \u003d"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "ericyjw"
        },
        "content": "            EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different room -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_AMY + SCHOOL_DESC_BOB + TAG_DESC_AMY + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different phone -\u003e rejected */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different email -\u003e rejected */"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "                + ROOM_DESC_BOB + SCHOOL_DESC_BOB + TAG_DESC_AMY + TAG_DESC_BOB;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 and 2 are performed by"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "ericyjw": 4,
      "-": 300
    }
  }
]
